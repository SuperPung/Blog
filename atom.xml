<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SuperPung</title>
  
  <subtitle>Follow Your Heart</subtitle>
  <link href="https://blog.superpung.xyz/atom.xml" rel="self"/>
  
  <link href="https://blog.superpung.xyz/"/>
  <updated>2021-05-24T02:28:52.173Z</updated>
  <id>https://blog.superpung.xyz/</id>
  
  <author>
    <name>SUPER</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>疾病传播模拟</title>
    <link href="https://blog.superpung.xyz/primary-practice-h61/"/>
    <id>https://blog.superpung.xyz/primary-practice-h61/</id>
    <published>2021-05-22T12:35:30.000Z</published>
    <updated>2021-05-24T02:28:52.173Z</updated>
    
    <content type="html"><![CDATA[<p>Primary Practice h61</p><a id="more"></a><div class="note info"><h4 id="Param"><a href="#Param" class="headerlink" title="Param"></a>Param</h4><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td><code>getImmuEffect()</code> / <code>setImmuEffect(double immuEffect)</code></td><td>疫苗免疫率，可降低传染率</td></tr><tr><td><code>getImmuRate()</code> / <code>setImmuRate(double immuRate)</code></td><td>人群中注射疫苗的人的比例，随机</td></tr><tr><td><code>getCityPopulation()</code> / <code>setCityPopulation(int cityPopulation)</code></td><td>城市人口数</td></tr><tr><td><code>getFamilySize()</code> / <code>setFamilySize(int familySize)</code></td><td>每个家庭人口数（按序）</td></tr><tr><td><code>getCompanySize()</code> / <code>setCompanySize(int companySize)</code></td><td>每个公司人口数（随机）</td></tr><tr><td><code>getSpreadRateFamily()</code> / <code>setSpreadRateFamily(double spreadRateFamily)</code></td><td>家庭传染率（晚上）</td></tr><tr><td><code>getSpreadRateCompany(double spreadRateCompany)</code></td><td>公司传染率（白天）</td></tr><tr><td><code>getLatentPeriod()</code> / <code>setLatentPeriod(int latentPeriod)</code></td><td>潜伏期，此时病人具有传染性，但仍正常上班生活，度过潜伏期后排队治疗</td></tr><tr><td><code>getHealingRateHome()</code> / <code>setHealingRateHome(double healingRateHome)</code></td><td>在家每天自愈概率</td></tr><tr><td><code>getDeathRateHome()</code> / <code>setDeathRateHome(double deathRateHome)</code></td><td>在家每天死亡概率</td></tr><tr><td><code>getHealingRateHospital()</code> / <code>setHealingRateHospital(double healingRateHospital)</code></td><td>在医院每天治愈概率</td></tr><tr><td><code>getDeathRateHospital()</code> / <code>setDeathRateHospital(double deathRateHospital)</code></td><td>在医院每天死亡概率</td></tr><tr><td><code>getHospitalSize()</code> / <code>setHospitalSize(int hospitalSize)</code></td><td>医院床位数</td></tr><tr><td><code>getInitPatients()</code> / <code>setInitPatients(List&lt;Integer&gt; initPatients)</code></td><td>初始病人编号</td></tr></tbody></table><h4 id="SimResult"><a href="#SimResult" class="headerlink" title="SimResult"></a>SimResult</h4><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td><code>getLatents()</code> / <code>setLatents(int latents)</code></td><td>潜伏期状态人数</td></tr><tr><td><code>getDeaths()</code> / <code>setDeaths(int deaths)</code></td><td>死亡人数</td></tr><tr><td><code>getCured()</code> / <code>setCured(int cured)</code></td><td>自愈+痊愈人数</td></tr><tr><td><code>getPatients()</code> / <code>setPatients(int patients)</code></td><td>患病人数</td></tr></tbody></table></div><p>健康-&gt;潜伏期-&gt;患病-&gt;自愈、治愈/死亡</p><p>公司成员设置问题，影响效率；疫苗注射给谁，随机问题不能每次循环十万次</p><p>可不可以只保存不健康的人，每天不再循环健康者</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Primary Practice h61&lt;/p&gt;</summary>
    
    
    
    
    <category term="Practice" scheme="https://blog.superpung.xyz/tags/Practice/"/>
    
  </entry>
  
  <entry>
    <title>简单的爬虫尝试</title>
    <link href="https://blog.superpung.xyz/tju-drive-crawling/"/>
    <id>https://blog.superpung.xyz/tju-drive-crawling/</id>
    <published>2021-05-22T11:30:07.000Z</published>
    <updated>2021-05-22T12:24:44.388Z</updated>
    
    <content type="html"><![CDATA[<p>算是第一次写的一个小工具吧。</p><a id="more"></a><p>GitHub：<a href="https://github.com/SuperPung/TJU-Drive-Crawling/">https://github.com/SuperPung/TJU-Drive-Crawling/</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>回想起上一次写 Python 小项目，还是一年之前学习 Python 的时候。当时看书（pcc2e）时敲了一遍书后面几章的项目，尤其是外星人入侵的小游戏，很有趣。</p><p>时隔一年，面对每次打开都需要输入密码的天大云盘，还有好话老师留作业、批作业 follow his heart 的频率，我决定尝试写个小爬虫，能在云盘更新的时候提醒我。</p><p>爬虫，学 Python 之前就听说了，很喜欢这种懒人工具。前段时间开始经常逛 GitHub，也看到过一些小项目。于是我打开了许久未用过的 Pycharm，新建了一个项目。</p><blockquote><p>JetBrains 竟然不支持 edu 邮箱了，👴学生认证马上就到期，只能用学信网资料认证，好几天也不出结果……</p></blockquote><p>写这篇文章时，这个小工具已经写完了。所以有些重构的过程可能会忘记了。</p><h1 id="Crawling"><a href="#Crawling" class="headerlink" title="Crawling"></a>Crawling</h1><p>用 Chrome 抓包，分析到天大云盘的 url 实际上是 <a href="http://pan.tju.edu.cn:9123/v1/link?method=listdir%EF%BC%8C%E5%86%99%E4%B8%80%E4%B8%AA%E8%AF%B7%E6%B1%82%E5%A4%B4">http://pan.tju.edu.cn:9123/v1/link?method=listdir，写一个请求头</a> <code>payload_header</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">payload_header = &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain;charset=UTF-8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://pan.tju.edu.cn/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                  <span class="string">&quot;Chrome/90.0.4430.212 Safari/537.36 &quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求数据需要发出一个 json <code>data</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;link&quot;</span>: link,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: password,</span><br><span class="line">    <span class="string">&quot;by&quot;</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sort&quot;</span>: <span class="string">&quot;asc&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 link 就是天大云盘链接的后 32 位，password 就是密码。</p><p>最后通过 POST 请求得到响应：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = requests.session()</span><br><span class="line">get_root = s.post(url, data=json.dumps(data), headers=payload_header)</span><br><span class="line"><span class="keyword">return</span> get_root.text</span><br></pre></td></tr></table></figure><h1 id="响应分析"><a href="#响应分析" class="headerlink" title="响应分析"></a>响应分析</h1><p>得到响应后，需要对内容分析。尝试用面向对象，但最终选择了函数。通过递归将文件目录输出。</p><p>每次分析后输出文件列表，以 json 格式存放到本地目录，下一次分析则与本地比较，这样就可以知道哪些文件更新了。</p><p>因为使用了递归，所以很多小功能又用函数重构了一下。</p><h1 id="邮件服务"><a href="#邮件服务" class="headerlink" title="邮件服务"></a>邮件服务</h1><p>通过 smtplib 实现。</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>部署到服务器也走了弯路，根本原因是路径的问题。</p><p>最后在脚本上先加一句 cd 解决。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>一共花了一天多一点的时间完成，还是很有趣的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;算是第一次写的一个小工具吧。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://blog.superpung.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>简单的聊天室</title>
    <link href="https://blog.superpung.xyz/primary-practice-h60/"/>
    <id>https://blog.superpung.xyz/primary-practice-h60/</id>
    <published>2021-05-22T08:51:20.000Z</published>
    <updated>2021-05-22T11:27:27.535Z</updated>
    
    <content type="html"><![CDATA[<p>Primary Practice h60</p><a id="more"></a><div class="note info"><p>在 <code>ChatServer</code>、<code>ChatClient</code> 中增加适当代码，并增加适当的类，完成一个简单的聊天室</p></div><p>和之前 OOP 的一个实验类似，利用 Socket 实现 client 和 server 通信。不同的是，本实验需要多客户端和一服务器通信。</p><h1 id="0x00-ChatServer"><a href="#0x00-ChatServer" class="headerlink" title="0x00 ChatServer"></a>0x00 ChatServer</h1><p>类变量一定包括一个 <code>ServerSocket</code>。</p><p>根据要求，需要从文件中读取到所有的用户名和密码，用 <code>HashMap</code> 保存。</p><p>多 client，为了给每一个 client 回复，需要保存目前已经连接的 client。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ServerSocket server;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; passwd;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Socket&gt; clients = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>构造方法只需要初始化 server 和 passwd：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ChatServer</span> <span class="params">(<span class="keyword">int</span> port, String passwordFilename)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">server = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">passwd = readLines(passwordFilename);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经典：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">readLines</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String line;</span><br><span class="line">Reader reader;</span><br><span class="line">Map&lt;String, String&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">reader = <span class="keyword">new</span> FileReader(filename);</span><br><span class="line">LineNumberReader lineReader = <span class="keyword">new</span> LineNumberReader(reader);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">line = lineReader.readLine();</span><br><span class="line"><span class="keyword">if</span> (line == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (line.trim().length() == <span class="number">0</span> || line.startsWith(<span class="string">&quot;#&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">String[] lineContent = line.split(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">result.put(lineContent[<span class="number">0</span>], lineContent[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要开始监听，所以此类一定继承了 <code>Thread</code>，<code>startListen</code> 只需要调用 <code>run</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startListen</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写 <code>run</code>，因为要持续监听，与多个 client 相连，所以需要新建 <code>ServerThread</code> 类，在此类中调用它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">Socket socket = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">socket = server.accept();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">clients.add(socket);</span><br><span class="line"><span class="keyword">new</span> ServerThread(socket, passwd).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x01-ServerThread"><a href="#0x01-ServerThread" class="headerlink" title="0x01 ServerThread"></a>0x01 ServerThread</h1><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Socket socket;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; passwd;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServerThread</span><span class="params">(Socket socket, Map&lt;String, String&gt; passwd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.socket = socket;</span><br><span class="line">    <span class="keyword">this</span>.passwd = passwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写 <code>run</code>，从输入流读入，向输出流写出。读入的是每一个客户端说的话，写出需要向所有客户端写出。</p><div class="note warning"><p>这里不知道怎么处理比较合适，可能会有更好的写法，欢迎提 pr。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">            PrintWriter out = <span class="keyword">new</span> PrintWriter(socket.getOutputStream());</span><br><span class="line">            String line = in.readLine();</span><br><span class="line">            String passwdStr = line;</span><br><span class="line"><span class="comment">//            System.out.println(&quot;server received username and password: &quot; + passwdStr);</span></span><br><span class="line">            String isLoggedIn = pass(passwdStr);</span><br><span class="line">            out.write(isLoggedIn + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            out.flush();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;0&quot;</span>.equals(isLoggedIn)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                line = in.readLine();</span><br><span class="line">                <span class="comment">// \r\n is necessary</span></span><br><span class="line">                <span class="keyword">for</span> (Socket client : ChatServer.clients) &#123;</span><br><span class="line">                    PrintWriter clientOut = <span class="keyword">new</span> PrintWriter(client.getOutputStream());</span><br><span class="line">                    clientOut.write(line + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">                    clientOut.flush();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">1</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            in.close();</span><br><span class="line">            out.close();</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>判断用户名和口令是否有效，为了方便就直接返回字符串了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">pass</span><span class="params">(String passwdStr)</span> </span>&#123;</span><br><span class="line">    String[] userPasswd = passwdStr.split(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (userPasswd.length != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String username = userPasswd[<span class="number">0</span>];</span><br><span class="line">    String password = userPasswd[<span class="number">1</span>];</span><br><span class="line">    Set&lt;Map.Entry&lt;String, String&gt;&gt; passwdEntry = passwd.entrySet();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : passwdEntry) &#123;</span><br><span class="line">        <span class="keyword">if</span> (username.equals(entry.getKey())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (password.equals(entry.getValue())) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x03-ChatClient"><a href="#0x03-ChatClient" class="headerlink" title="0x03 ChatClient"></a>0x03 ChatClient</h1><p>每个客户端有是否登录两种状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isLoggedIn;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> PrintWriter out;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BufferedReader in;</span><br></pre></td></tr></table></figure><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ChatClient</span> <span class="params">(String ip, <span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Socket client = <span class="keyword">new</span> Socket(ip, port);</span><br><span class="line"><span class="comment">// 获得输出流</span></span><br><span class="line">out = <span class="keyword">new</span> java.io.PrintWriter(client.getOutputStream());</span><br><span class="line"><span class="comment">// 获得输入流</span></span><br><span class="line">in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(client.getInputStream()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登录操作，向服务器写入用户名和密码（用 <code>\t</code> 分隔），服务器会判断并写出到这里的输入流。</p><p>是不是有更好的写法？欢迎提 pr。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String userName,String password)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String passwd = userName + <span class="string">&quot;\t&quot;</span> + password;</span><br><span class="line">String get;</span><br><span class="line"><span class="comment">// \r\n is necessary</span></span><br><span class="line">out.write(passwd + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">out.flush();</span><br><span class="line">get = in.readLine();</span><br><span class="line">isLoggedIn = <span class="string">&quot;1&quot;</span>.equals(get);</span><br><span class="line"><span class="keyword">return</span> isLoggedIn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">isLoggedIn = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发言：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">(String str)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (!isLoggedIn) &#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;Haven&#x27;t logged in!&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> out.write(str + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line"> out.flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读取发言：</p><p>这里是否需要创建消息队列？欢迎评论、issue、提 pr 交流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isLoggedIn) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> in.readLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>有很多地方写的不是很好，但最后也过了，可能需要特定的测试用例？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Primary Practice h60&lt;/p&gt;</summary>
    
    
    
    
    <category term="Practice" scheme="https://blog.superpung.xyz/tags/Practice/"/>
    
  </entry>
  
  <entry>
    <title>化学反应分析</title>
    <link href="https://blog.superpung.xyz/primary-practice-h59/"/>
    <id>https://blog.superpung.xyz/primary-practice-h59/</id>
    <published>2021-05-06T13:12:11.000Z</published>
    <updated>2021-05-13T13:45:52.490Z</updated>
    
    <content type="html"><![CDATA[<p>Primary Practice h59</p><a id="more"></a><div class="note info"><p>根据 reactionFile 给出的一系列反应， 判断一个体系中根据 init 物质，判断出最后可能都存在什么物质</p><p>本文件中存放了若干的化学反应方程式（总数量不会超过 1000 个）</p><p>本文件中存放了一系列的化学反应 #表示注释</p><p>化学反应以 = 分为了左侧和右侧；不同化合物之间至少有一个空格</p><p>A + B = C + D 意味着体系中如果有了 A B 就可以生成 C D，同样如果有 C D 也可以生成 A B</p><p>所有反应，反应物前系数均为 1</p></div><ol><li>从文件中读取反应方程式，用<del>哈希映射</del> <code>Reaction</code> 类存储：反应物存储为一个集合、生成物存储为一个集合，二者一一对应（可逆反应，反应物和生成物可互换）；</li><li>遍历方程式映射，如果 result 含有所有的反应物<strong>且不含有所有的生成物（不含、含一部分）</strong>，则将生成物加入 result；依据生成物加反应物同理；</li><li>若遍历一次，result 未添加新的物质，说明反应达到平衡。</li></ol><div class="note success"><h4 id="2021-5-13-更新"><a href="#2021-5-13-更新" class="headerlink" title="2021.5.13 更新"></a>2021.5.13 更新</h4><p>文件读取方程式不能用哈希映射存储，因为可能存在反应物相同而生成物不同的情况。</p><p>所以新建了 <code>Reaction</code> 类。</p></div><p>修改后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h59;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reaction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; reactant;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; product;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Reaction</span><span class="params">(Set&lt;String&gt; reactant, Set&lt;String&gt; product)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.reactant = reactant;</span><br><span class="line">        <span class="keyword">this</span>.product = product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getReactant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> reactant;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h59;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReactionTools</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据reactionFile给出的一系列反应， 判断一个体系中根据init物质，判断出最后可能都存在什么物质</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> reactionFile 体系中初始反应物</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> initComponents 体系中初始反应物</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 最后体系中存在的全部物质</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">findAllComponents</span><span class="params">(String reactionFile,Set&lt;String&gt; initComponents)</span></span>&#123;</span><br><span class="line">List&lt;Reaction&gt; reactions = readLines(reactionFile);</span><br><span class="line">Set&lt;String&gt; result = <span class="keyword">new</span> HashSet&lt;&gt;(initComponents);</span><br><span class="line"><span class="keyword">int</span> newAddCount = initComponents.size();</span><br><span class="line"><span class="keyword">while</span> (newAddCount != <span class="number">0</span>) &#123;</span><br><span class="line">newAddCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Reaction reaction : reactions) &#123;</span><br><span class="line"><span class="comment">// contain or not contain, that is a question</span></span><br><span class="line"><span class="keyword">if</span> (result.containsAll(reaction.getReactant()) &amp;&amp; !result.containsAll(reaction.getProduct())) &#123;</span><br><span class="line">result.addAll(reaction.getProduct());</span><br><span class="line">newAddCount++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (result.containsAll(reaction.getProduct()) &amp;&amp; !result.containsAll(reaction.getReactant())) &#123;</span><br><span class="line">result.addAll(reaction.getReactant());</span><br><span class="line">newAddCount++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Reaction&gt; <span class="title">readLines</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">String line;</span><br><span class="line">Reader reader = <span class="keyword">null</span>;</span><br><span class="line">List&lt;Reaction&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">reader = <span class="keyword">new</span> FileReader(filename);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (reader == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">LineNumberReader lineReader = <span class="keyword">new</span> LineNumberReader(reader);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">line = lineReader.readLine();</span><br><span class="line"><span class="keyword">if</span> (line == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (line.trim().length() == <span class="number">0</span> || line.startsWith(<span class="string">&quot;#&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">String[] reaction = line.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">String left = reaction[<span class="number">0</span>];</span><br><span class="line">String right = reaction[<span class="number">1</span>];</span><br><span class="line">String[] lefts = left.split(<span class="string">&quot;\\ \\+\\ &quot;</span>);<span class="comment">// regular</span></span><br><span class="line">Set&lt;String&gt; leftSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String s : lefts) &#123;</span><br><span class="line">leftSet.add(s.trim());</span><br><span class="line">&#125;</span><br><span class="line">String[] rights = right.split(<span class="string">&quot;\\ \\+\\ &quot;</span>);</span><br><span class="line">Set&lt;String&gt; rightSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String s : rights) &#123;</span><br><span class="line">rightSet.add(s.trim());</span><br><span class="line">&#125;</span><br><span class="line">result.add(<span class="keyword">new</span> Reaction(leftSet, rightSet));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="note no-icon"><summary><p>修改前</p></summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h59;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReactionTools</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据reactionFile给出的一系列反应， 判断一个体系中根据init物质，判断出最后可能都存在什么物质</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> reactionFile 体系中初始反应物</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> initComponents 体系中初始反应物</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 最后体系中存在的全部物质</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">findAllComponents</span><span class="params">(String reactionFile,Set&lt;String&gt; initComponents)</span></span>&#123;</span><br><span class="line">Map&lt;Set&lt;String&gt;, Set&lt;String&gt;&gt; reactions = readLines(reactionFile);</span><br><span class="line">Set&lt;String&gt; result = <span class="keyword">new</span> HashSet&lt;&gt;(initComponents);</span><br><span class="line">Set&lt;Map.Entry&lt;Set&lt;String&gt;, Set&lt;String&gt;&gt;&gt; reactionsEntrySet = reactions.entrySet();</span><br><span class="line"><span class="keyword">int</span> newAddCount = initComponents.size();</span><br><span class="line"><span class="keyword">while</span> (newAddCount != <span class="number">0</span>) &#123;</span><br><span class="line">newAddCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Set&lt;String&gt;, Set&lt;String&gt;&gt; entry : reactionsEntrySet) &#123;</span><br><span class="line"><span class="comment">// contain or not contain, that is a question</span></span><br><span class="line"><span class="keyword">if</span> (result.containsAll(entry.getKey()) &amp;&amp; !result.containsAll(entry.getValue())) &#123;</span><br><span class="line">result.addAll(entry.getValue());</span><br><span class="line">newAddCount++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (result.containsAll(entry.getValue()) &amp;&amp; !result.containsAll(entry.getKey())) &#123;</span><br><span class="line">result.addAll(entry.getKey());</span><br><span class="line">newAddCount++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Map&lt;Set&lt;String&gt;, Set&lt;String&gt;&gt; readLines(String filename) &#123;</span><br><span class="line">String line;</span><br><span class="line">Reader reader = <span class="keyword">null</span>;</span><br><span class="line">Map&lt;Set&lt;String&gt;, Set&lt;String&gt;&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">reader = <span class="keyword">new</span> FileReader(filename);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (reader == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">LineNumberReader lineReader = <span class="keyword">new</span> LineNumberReader(reader);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">line = lineReader.readLine();</span><br><span class="line"><span class="keyword">if</span> (line == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (line.trim().length() == <span class="number">0</span> || line.startsWith(<span class="string">&quot;#&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">String[] reaction = line.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">String left = reaction[<span class="number">0</span>];</span><br><span class="line">String right = reaction[<span class="number">1</span>];</span><br><span class="line">String[] lefts = left.split(<span class="string">&quot;\\ \\+\\ &quot;</span>);<span class="comment">// regular</span></span><br><span class="line">Set&lt;String&gt; leftSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String s : lefts) &#123;</span><br><span class="line">leftSet.add(s.trim());</span><br><span class="line">&#125;</span><br><span class="line">String[] rights = right.split(<span class="string">&quot;\\ \\+\\ &quot;</span>);</span><br><span class="line">Set&lt;String&gt; rightSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String s : rights) &#123;</span><br><span class="line">rightSet.add(s.trim());</span><br><span class="line">&#125;</span><br><span class="line">result.put(leftSet, rightSet);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><a href="https://github.com/SuperPung/Primary-Practice-Homeworks/tree/master/src/com/huawei/classroom/student/h59">Source code</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Primary Practice h59&lt;/p&gt;</summary>
    
    
    
    
    <category term="Practice" scheme="https://blog.superpung.xyz/tags/Practice/"/>
    
  </entry>
  
  <entry>
    <title>投票统计</title>
    <link href="https://blog.superpung.xyz/primary-practice-h58/"/>
    <id>https://blog.superpung.xyz/primary-practice-h58/</id>
    <published>2021-05-06T13:12:08.000Z</published>
    <updated>2021-05-12T07:05:41.640Z</updated>
    
    <content type="html"><![CDATA[<p>Primary Practice h58</p><a id="more"></a><div class="note info"><p>fileName 是一个投票的明细记录，里面逐行存放了</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">投票的时间（yyyy-MM-dd HH:mm:ss 格式） + <span class="string">\t</span> + 投票的微信ID + <span class="string">\t</span> + 候选人</span><br></pre></td></tr></table></figure><p>存放按时间递增（但是可能出现同一秒出现若干条记录的情况） </p><p>现在需要完成投票统计的过程，具体要求如下：</p><ul><li>1 个微信 ID 1 分钟内 最多投 1 票 多余的票数无效</li><li>1 个微信 ID 10 分钟内 最多只能投 5 票 多余的票无效</li><li>其中微信 ID 不固定，候选人姓名不固定</li><li>测试的时候要求 10 万行记录处理时间不超过 3 秒</li></ul></div><p>很有趣的一道题，虽然最后的结果始终有 3%～5% 的误差（截止到 2021.5.6 晚 9:58，还是没有找到误差出现的地方）。</p><p>和之前分析的文件类似，每一行文本有相同的格式，此处我抽象为一个 Record 类。</p><p>假设已经有了 Record 类，根据要求，需要对每位投票者的投票操作进行分析，去除掉那些不符合要求的操作记录。所以投票者也应抽象为一 Voter 类。</p><h1 id="0x00-Record"><a href="#0x00-Record" class="headerlink" title="0x00 Record"></a>0x00 Record</h1><p>此 Record 类对应文件的一行，所以应有时间、投票者和候选人属性。但整体来看，每条记录可能有效也可能无效，所以再添加一有效性属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Date date;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String voterId;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String candidate;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> valid;</span><br></pre></td></tr></table></figure><p>构造方法只需要传入参数，初始化各个属性。难点在于时间 <code>Date</code> 类型的处理，需要引入 <code>DateFormat</code> 和 <code>SimpleDateFormat</code> 类。此时暂且将每一条记录都设为有效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Record</span><span class="params">(String date, String voterId, String candidate)</span> </span>&#123;</span><br><span class="line">    DateFormat fmt = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.date = fmt.parse(date);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.voterId = voterId;</span><br><span class="line">    <span class="keyword">this</span>.candidate = candidate;</span><br><span class="line">    valid = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义各种 getter 和 setter：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getVoterId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> voterId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCandidate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> candidate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> valid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInvalid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    valid = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，由于后续分析记录有效性的主要依据是时间，所以记录之间的先后顺序很重要。故 Record 类需要实现 <code>Comparable</code> 接口，重写 <code>compareTo</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Record</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Record</span>&gt; </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Record o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date.compareTo(o.date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x01-Voter"><a href="#0x01-Voter" class="headerlink" title="0x01 Voter"></a>0x01 Voter</h1><p>最主要的部分，本次实践的核心。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>作为一名投票者，区别身份的就是 ID，权利是一系列的投票记录：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;Record&gt; records = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RECORDS_IN_TEN_MINUTES = <span class="number">5</span>; <span class="comment">// 十分钟内最多投票的次数</span></span><br></pre></td></tr></table></figure><div class="note warning"><p>可能会联想到，Record 类的属性中，关于投票者为什么只存一个 String 而不是 Voter？</p><p>因为 Voter 会包含 Record，避免套娃，减少冗余，而且 Record 只是一个中间类，目的是根据 Record 的 voterId 将其添加到对应 voter 的 records 中，所以只需要一个 String。</p></div><p>构造方法只传入 ID：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Voter</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件中同一位投票者的投票记录不一定是连续的，所以投票记录需要逐条添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRecord</span><span class="params">(Record record)</span> </span>&#123;</span><br><span class="line">    records.add(record);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，从整体来看，投票者有若干个，可构成集合，为便于后续获取投票者的集合，此处需实现可序列化接口，重写哈希码和相等方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Voter</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Voter)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ((Voter) o).id.equals(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="去除无效记录"><a href="#去除无效记录" class="headerlink" title="去除无效记录"></a>去除无效记录</h2><p>核心中的核心。</p><p>再次回顾一下，具体要求如下：</p><ul><li>1 个微信 ID 1 分钟内 最多投 1 票 多余的票数无效</li><li>1 个微信 ID 10 分钟内 最多只能投 5 票 多余的票无效</li></ul><p>为了判断，记录存储必须是按照时间递增的。1 分钟内最多 1 票，这个条件容易判断，只需要记录当前记录的时间，计算出 1 分钟之后的时间，再和下一条记录比对。但是要保证 10 分钟内最多 5 票，就有些困难。一方面，不能先只判断 1 分钟，因为两个条件互相影响，必须按时间顺序逐条判断；另一方面，判断 10 分钟不能按 0～10、10～20 判断，因为要保证任意 10 分钟内都最多只有 5 条，所以我利用 buffer 一次读入 5 条记录，这 5 条记录一定是满足 10 分钟条件的，在此基础上进行 1 分钟条件判断。</p><div class="note primary"><h4 id="2021-5-7-更新"><a href="#2021-5-7-更新" class="headerlink" title="2021.5.7 更新"></a>2021.5.7 更新</h4><p>之前读入 5 条记录后只判断了 1 分钟条件，忘记判断 10 分钟条件。即这 5 条记录中可能从中间某一条记录开始，时间已经在第一条的 10 分钟以外，此时这条记录之前的记录一定为有效，且 buffer 应后移相应记录条数。</p><p>相应地，移动后应重新判断 1 分钟条件和 10 分钟条件，故定义了 <code>isBufFinish</code> 控制循环。</p><p>且，5 条记录内，1 分钟条件应优先于 10 分钟条件，所以加了 <code>break</code>。</p><p>修改前：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1007</span> ms cost!</span><br><span class="line"><span class="attribute">wang</span> 的误差为：<span class="number">5</span>.<span class="number">09</span>%</span><br><span class="line"><span class="attribute">zhao</span> 的误差为：<span class="number">4</span>.<span class="number">23</span>%</span><br><span class="line"><span class="attribute">zhang</span> 的误差为：<span class="number">3</span>.<span class="number">36</span>%</span><br><span class="line"><span class="attribute">li</span> 的误差为：<span class="number">4</span>.<span class="number">29</span>%</span><br></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">901</span> ms cost!</span><br><span class="line"><span class="attribute">wang</span> 的误差为：<span class="number">4</span>.<span class="number">65</span>%</span><br><span class="line"><span class="attribute">zhao</span> 的误差为：<span class="number">2</span>.<span class="number">7</span>%</span><br><span class="line"><span class="attribute">zhang</span> 的误差为：<span class="number">4</span>.<span class="number">57</span>%</span><br><span class="line"><span class="attribute">li</span> 的误差为：<span class="number">4</span>.<span class="number">05</span>%</span><br></pre></td></tr></table></figure></div><p>buffer 内部判断完成，需将 buffer 整体后移。若 buffer 之后的记录还在 10 分钟内，一定为无效。直到找到下一条 10 分钟之外的记录。每次 buffer 只移动一条记录，加 <code>break</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeInvalidRecords</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 按时间排序</span></span><br><span class="line">    records.sort(Record::compareTo);</span><br><span class="line">    <span class="comment">// 容量为5的buffer</span></span><br><span class="line">    List&lt;Record&gt; buffer = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> next = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Math.min(MAX_RECORDS_IN_TEN_MINUTES, records.size()); i++) &#123;</span><br><span class="line">        buffer.add(records.get(next++));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每条记录判断</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> i, j;</span><br><span class="line">        Date curDate = buffer.get(<span class="number">0</span>).getDate();</span><br><span class="line">        Date oneMinLater = <span class="keyword">new</span> Date(curDate.getTime() + <span class="number">60000</span>);</span><br><span class="line">        Date tenMinLater = <span class="keyword">new</span> Date(curDate.getTime() + <span class="number">600000</span>);</span><br><span class="line">        <span class="keyword">boolean</span> isBufFinish = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (!isBufFinish) &#123;</span><br><span class="line">            <span class="comment">// 去除不满足1分钟条件的记录</span></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; buffer.size(); i++) &#123;</span><br><span class="line">                Date nextDate = buffer.get(i).getDate();</span><br><span class="line">                <span class="keyword">if</span> (nextDate.compareTo(oneMinLater) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    buffer.get(i).setInvalid();</span><br><span class="line">                    buffer.remove(i--);</span><br><span class="line">                    <span class="keyword">if</span> (next &lt; records.size()) &#123;</span><br><span class="line">                        buffer.add(records.get(next++));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    oneMinLater = <span class="keyword">new</span> Date(nextDate.getTime() + <span class="number">60000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// （5.7新增）判断buffer内是否超过10分钟，不设无效，只移动</span></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; buffer.size(); i++) &#123;</span><br><span class="line">                Date nextDate = buffer.get(i).getDate();</span><br><span class="line">                <span class="keyword">if</span> (nextDate.compareTo(tenMinLater) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    tenMinLater = <span class="keyword">new</span> Date(nextDate.getTime() + <span class="number">600000</span>);</span><br><span class="line">                    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                        buffer.remove(j);</span><br><span class="line">                        buffer.add(records.get(next++));</span><br><span class="line">                    &#125;</span><br><span class="line">                    isBufFinish = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    isBufFinish = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断buffer后的下一条记录是否超过10分钟</span></span><br><span class="line">        <span class="keyword">while</span> (next &lt; records.size()) &#123;</span><br><span class="line">            Record nextRecord = records.get(next);</span><br><span class="line">            <span class="keyword">if</span> (nextRecord.getDate().compareTo(tenMinLater) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                nextRecord.setInvalid();</span><br><span class="line">                next++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                buffer.remove(<span class="number">0</span>);</span><br><span class="line">                buffer.add(nextRecord);</span><br><span class="line">                next++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (next &lt; records.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，最核心的算法已完成。但 5.7 更新后仍有 4.7% 以下的误差，一定是有边界情况未考虑，待更新。</p><h2 id="获取有效记录"><a href="#获取有效记录" class="headerlink" title="获取有效记录"></a>获取有效记录</h2><p>用哈希映射存储，遍历有效记录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Integer&gt; <span class="title">getCandidates</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Integer&gt; candidates = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Record record : records) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!record.isValid()) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String candidate = record.getCandidate();</span><br><span class="line">        <span class="keyword">int</span> count = candidates.getOrDefault(candidate, <span class="number">0</span>);</span><br><span class="line">        candidates.put(candidate, count + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> candidates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x02-VoteRecord"><a href="#0x02-VoteRecord" class="headerlink" title="0x02 VoteRecord"></a>0x02 VoteRecord</h1><p>顶层类，按行读取文件，每行存一 Record 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Record&gt; <span class="title">readLines</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">String line = <span class="string">&quot;&quot;</span>;</span><br><span class="line">Reader reader = <span class="keyword">null</span>;</span><br><span class="line">List&lt;Record&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">reader = <span class="keyword">new</span> FileReader(filename);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (reader == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">LineNumberReader lineReader = <span class="keyword">new</span> LineNumberReader(reader);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">line = lineReader.readLine();</span><br><span class="line"><span class="keyword">if</span> (line == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">String[] recordItems = line.split(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">String date = recordItems[<span class="number">0</span>];</span><br><span class="line">String voterId = recordItems[<span class="number">1</span>];</span><br><span class="line">String candidate = recordItems[<span class="number">2</span>];</span><br><span class="line">Record record = <span class="keyword">new</span> Record(date, voterId, candidate);</span><br><span class="line">result.add(record);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主体 <code>calcRecording</code>，将读取到的 Record 列表存储，存所有 voter 的 id，存所有 voter，存所有 voterId 和 voter 的对应关系，存所有的候选人和其所得票数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Integer&gt; <span class="title">calcRecording</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">List&lt;Record&gt; records = readLines(fileName);</span><br><span class="line">Set&lt;String&gt; voterIds = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">Set&lt;Voter&gt; voters = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">Map&lt;String, Voter&gt; voterMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">Map&lt;String, Integer&gt; candidates = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Record record : records) &#123;</span><br><span class="line">voterIds.add(record.getVoterId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String voterId : voterIds) &#123;</span><br><span class="line">Voter voter = <span class="keyword">new</span> Voter(voterId);</span><br><span class="line">voters.add(voter);</span><br><span class="line">voterMap.put(voterId, voter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Record record : records) &#123;</span><br><span class="line">Voter voter = voterMap.get(record.getVoterId());</span><br><span class="line">voter.addRecord(record);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Voter voter : voters) &#123;</span><br><span class="line">voter.removeInvalidRecords();</span><br><span class="line">Map&lt;String, Integer&gt; oneCandidates = voter.getCandidates();</span><br><span class="line"><span class="comment">//System.out.println(voter.getRecords().size());</span></span><br><span class="line">Set&lt;Map.Entry&lt;String, Integer&gt;&gt; oneCandidatesNameCount = oneCandidates.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : oneCandidatesNameCount) &#123;</span><br><span class="line">String candidate = entry.getKey();</span><br><span class="line"><span class="keyword">int</span> count = entry.getValue();</span><br><span class="line"><span class="keyword">if</span> (candidates.containsKey(candidate)) &#123;</span><br><span class="line">count += candidates.get(candidate);</span><br><span class="line">&#125;</span><br><span class="line">candidates.put(candidate, count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> candidates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning"><h4 id="误差待消除"><a href="#误差待消除" class="headerlink" title="误差待消除"></a>误差待消除</h4></div><p><a href="https://github.com/SuperPung/Primary-Practice-Homeworks/tree/master/src/com/huawei/classroom/student/h58">Source code</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Primary Practice h58&lt;/p&gt;</summary>
    
    
    
    
    <category term="Practice" scheme="https://blog.superpung.xyz/tags/Practice/"/>
    
  </entry>
  
  <entry>
    <title>目录下文件大小统计</title>
    <link href="https://blog.superpung.xyz/primary-practice-h57/"/>
    <id>https://blog.superpung.xyz/primary-practice-h57/</id>
    <published>2021-05-06T13:12:05.000Z</published>
    <updated>2021-05-12T07:05:33.180Z</updated>
    
    <content type="html"><![CDATA[<p>Primary Practice h57</p><a id="more"></a><div class="note info"><p>统计一个目录下所有文件大小的加和</p></div><p>递归。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h57;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTool</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 统计一个目录下所有文件大小的加和</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">recursiveCalcFileSize</span><span class="params">(String homeDir)</span> </span>&#123;</span><br><span class="line">File home = <span class="keyword">new</span> File(homeDir);</span><br><span class="line">calcFiles(home);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calcFiles</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!dir.exists() || !dir.isDirectory()) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">String[] files = dir.list();</span><br><span class="line"><span class="keyword">if</span> (files == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (String s : files) &#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(dir, s);</span><br><span class="line"><span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">sum += file.length();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">calcFiles(file);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/SuperPung/Primary-Practice-Homeworks/tree/master/src/com/huawei/classroom/student/h57">Source code</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Primary Practice h57&lt;/p&gt;</summary>
    
    
    
    
    <category term="Practice" scheme="https://blog.superpung.xyz/tags/Practice/"/>
    
  </entry>
  
  <entry>
    <title>文本文件内容替换</title>
    <link href="https://blog.superpung.xyz/primary-practice-h56/"/>
    <id>https://blog.superpung.xyz/primary-practice-h56/</id>
    <published>2021-05-06T13:12:02.000Z</published>
    <updated>2021-05-06T13:38:41.384Z</updated>
    
    <content type="html"><![CDATA[<p>Primary Practice h56</p><a id="more"></a><div class="note info"><p>将 homeDir 目录下（包括子目录）所有的文本文件（扩展名为 .txt，扩展名不是 .txt 的文件不要动，扩展名区分大小写) 文件中，orgStr 替换为 targetStr</p><p>所有文本文件均为 UTF-8 编码</p></div><p>与简单的字符串 replace 不同，此处涉及文件的写入操作。</p><p>为方便替换，在 FileTool 中定义属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTNAME = <span class="string">&quot;txt&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> String orgStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> String targetStr = <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><p>根据题目要求，需要递归遍历文件，所以在 <code>replaceTxtFileContent</code> 方法中给属性赋值后再调用 <code>readFiles</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceTxtFileContent</span><span class="params">(String homeDir,String orgStr,String targetStr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.orgStr = orgStr;</span><br><span class="line"><span class="keyword">this</span>.targetStr = targetStr;</span><br><span class="line">File home = <span class="keyword">new</span> File(homeDir);</span><br><span class="line">readFiles(home);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在经典的递归读文件方法中调用替换文件内容方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readFiles</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!dir.exists() || !dir.isDirectory()) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">String[] files = dir.list();</span><br><span class="line"><span class="keyword">if</span> (files == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (String s : files) &#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(dir, s);</span><br><span class="line"><span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">String filename = file.getName();</span><br><span class="line"><span class="keyword">if</span> (isTxtFile(filename)) &#123;</span><br><span class="line">replaceFileContent(file);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">readFiles(file);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在替换文件内容方法中，用最简单理解的方式，先读出文件内容到字符串中，再替换其中的字符串，再将替换后的字符串写入文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replaceFileContent</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">String content = readFromTxt(file);</span><br><span class="line"><span class="keyword">if</span> (content.length() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">String newContent = content.replace(orgStr, targetStr);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">FileWriter fw = <span class="keyword">new</span> FileWriter(file.getAbsoluteFile());</span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(fw);</span><br><span class="line">bw.write(newContent);</span><br><span class="line">bw.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>替换之前需要判断是否为文本文件，直接取扩展名再无大小判断即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isTxtFile</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">String[] filenames = filename.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">String ext = filenames[filenames.length - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> EXTNAME.equalsIgnoreCase(ext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经典读取文本文件的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">readFromTxt</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">Reader reader = <span class="keyword">null</span>;</span><br><span class="line">StringBuffer buf = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="comment">// InputStream in=new FileInputStream(filename);</span></span><br><span class="line">reader = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(file), StandardCharsets.UTF_8);</span><br><span class="line"><span class="keyword">int</span> readed = reader.read(chars);</span><br><span class="line"><span class="keyword">while</span> (readed != -<span class="number">1</span>) &#123;</span><br><span class="line">buf.append(chars, <span class="number">0</span>, readed);</span><br><span class="line">readed = reader.read(chars);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">close(reader);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> buf.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Closeable inout)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (inout != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">inout.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Primary Practice h56&lt;/p&gt;</summary>
    
    
    
    
    <category term="Practice" scheme="https://blog.superpung.xyz/tags/Practice/"/>
    
  </entry>
  
  <entry>
    <title>李白杜甫诗词分析</title>
    <link href="https://blog.superpung.xyz/primary-practice-h55/"/>
    <id>https://blog.superpung.xyz/primary-practice-h55/</id>
    <published>2021-05-01T12:35:37.000Z</published>
    <updated>2021-05-01T16:07:03.867Z</updated>
    
    <content type="html"><![CDATA[<p>Primary Practice h55</p><a id="more"></a><div class="note info"><p>用计算机来证明：为什么说李白是浪漫主义诗人、杜甫是现实主义诗人？</p><p>分析不同诗人使用一些汉字时候的特点。</p><ol><li>分析：不同诗人使用一个汉字的时候，将这些汉字组成什么词汇使用在诗句里面；</li><li>按这些词汇出现的频率高低排序；</li><li>只要是两个汉字连起来就视为一个词。</li></ol></div><p><a href="https://blog.superpung.xyz/oop-h13/">上一次</a> 分析比较了红楼梦的前八十回和后四十回，这一次分析比较李白和杜甫的诗词。</p><p>主体代码几乎和 h13 相同。</p><p>借用了 h13 的 <code>getTopNWords</code> 方法，属性有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String[] verses = <span class="keyword">new</span> String[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; charSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br></pre></td></tr></table></figure><p>改写 <code>getTopNWords</code> 方法：</p><ul><li>返回值改为 <code>List&lt;Map.Entry&lt;String, Integer&gt;&gt;</code> 便于得到频率值；</li><li>对切割后子串的判断条件改为 <code>!charSet.contains(str.substring(0, 1)) &amp;&amp; !charSet.contains(str.substring(1))</code>，即两个字都不在要判断的字集里时跳过。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Map.Entry&lt;String, Integer&gt;&gt; getTopNWords(<span class="keyword">int</span> n)&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">List&lt;Map.Entry&lt;String, Integer&gt;&gt; mapList;</span><br><span class="line">List&lt;Map.Entry&lt;String, Integer&gt;&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.verses.length; i++)&#123;</span><br><span class="line">String content = <span class="keyword">this</span>.verses[i];</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; content.length() - <span class="number">1</span>; j++) &#123;</span><br><span class="line">String str = content.substring(j, j + <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (!charSet.contains(str.substring(<span class="number">0</span>, <span class="number">1</span>)) &amp;&amp; !charSet.contains(str.substring(<span class="number">1</span>))) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line">count = map.getOrDefault(str, <span class="number">0</span>);</span><br><span class="line">map.put(str, count + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mapList = <span class="keyword">new</span> ArrayList&lt;&gt;(map.entrySet());</span><br><span class="line">mapList.sort((o1, o2) -&gt; o2.getValue().compareTo(o1.getValue()));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">ans.add(mapList.get(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终 <code>analysis</code> 方法只需处理文件读入和判断的字并打印结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">analysis</span><span class="params">(String pathFilename, String chars)</span> </span>&#123;</span><br><span class="line">String content = readFromTxt(pathFilename);</span><br><span class="line">List&lt;Map.Entry&lt;String, Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">charSet = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(chars.split(<span class="string">&quot;;&quot;</span>)));</span><br><span class="line">verses = content.split(<span class="string">&quot;[，。]&quot;</span>);</span><br><span class="line">result = getTopNWords(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; res : result) &#123;</span><br><span class="line">System.out.println(res.getKey() + <span class="string">&quot;\t&quot;</span> + res.getValue());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后分析不同词汇（不完整）。</p><h4 id="“春-夏-秋-冬-暑-寒-风-雨-雪-霜-露”"><a href="#“春-夏-秋-冬-暑-寒-风-雨-雪-霜-露”" class="headerlink" title="“春;夏;秋;冬;暑;寒;风;雨;雪;霜;露”"></a>“春;夏;秋;冬;暑;寒;风;雨;雪;霜;露”</h4><table><thead><tr><th>李白</th><th>杜甫</th></tr></thead><tbody><tr><td>春风    72<br/>风吹    51<br/>秋月    40<br/>清风    28<br/>秋风    25<br/>东风    24<br/>白雪    21<br/>长风    21<br/>秋浦    21<br/>秋霜    20</td><td>风尘    48<br/>秋风    30<br/>风吹    28<br/>天寒    27<br/>清秋    25<br/>春色    20<br/>春风    19<br/>风雨    17<br/>高秋    16<br/>云雨    16</td></tr></tbody></table><p>这些是几个和季节有关的词汇，李白和杜甫在高频词上有所不同，李白喜欢“春风”、“风吹”、“秋月”，杜甫喜欢“风尘”、“秋风”。</p><h4 id="“醉-酒-饮-杯”"><a href="#“醉-酒-饮-杯”" class="headerlink" title="“醉;酒;饮;杯”"></a>“醉;酒;饮;杯”</h4><table><thead><tr><th>李白</th><th>杜甫</th></tr></thead><tbody><tr><td>美酒    27<br/>一杯    21<br/>杯酒    14<br/>对酒    13<br/>三杯    11<br/>斗酒    11<br/>杯中    8<br/>饮酒    8<br/>置酒    8<br/>衔杯    7</td><td>酒酣    10<br/>杯酒    7<br/>醉眠    6<br/>嗜酒    6<br/>痛饮    6<br/>酒杯    5<br/>对酒    5<br/>杯中    5<br/>酒肉    5<br/>春酒    5</td></tr></tbody></table><p>李白喝酒比杜甫多，而且酒量也比杜甫大。</p><h4 id="“东-西-南-北”"><a href="#“东-西-南-北”" class="headerlink" title="“东;西;南;北”"></a>“东;西;南;北”</h4><table><thead><tr><th>李白</th><th>杜甫</th></tr></thead><tbody><tr><td>东风    24<br/>东海    23<br/>东山    20<br/>东流    19<br/>南山    19<br/>西来    16<br/>东南    12<br/>北斗    12<br/>西施    10<br/>北海    10</td><td>西南    15<br/>北风    14<br/>北斗    14<br/>东西    13<br/>东流    12<br/>南国    12<br/>西江    11<br/>南征    11<br/>西戎    9<br/>瀼西    9</td></tr></tbody></table><p>李白更喜欢东风，杜甫总是想到北风。</p><h4 id="“云-日-月-山-河”"><a href="#“云-日-月-山-河”" class="headerlink" title="“云;日;月;山;河”"></a>“云;日;月;山;河”</h4><table><thead><tr><th>李白</th><th>杜甫</th></tr></thead><tbody><tr><td>白日    62<br/>明月    59<br/>青云    46<br/>浮云    44<br/>秋月    40<br/>白云    34<br/>落日    32<br/>今日    28<br/>五月    26<br/>黄河    26</td><td>今日    33<br/>落日    29<br/>白日    27<br/>浮云    23<br/>江山    22<br/>巫山    20<br/>日月    20<br/>终日    18<br/>他日    18<br/>日暮    18</td></tr></tbody></table><p>除去“白日”、“今日”等与自然景色无关的词汇，李白更喜欢“明月”，而杜甫更喜欢“落日”。</p><h4 id="“水-天-玉-心”"><a href="#“水-天-玉-心”" class="headerlink" title="“水;天;玉;心”"></a>“水;天;玉;心”</h4><table><thead><tr><th>李白</th><th>杜甫</th></tr></thead><tbody><tr><td>青天    54<br/>天地    53<br/>流水    34<br/>天上    31<br/>天子    28<br/>白玉    27<br/>绿水    26<br/>天下    22<br/>海水    17<br/>汉水    16</td><td>天下    35<br/>天地    32<br/>天子    29<br/>天寒    27<br/>江水    16<br/>寸心    13<br/>白水    13<br/>秋水    12<br/>天意    12<br/>水中    11</td></tr></tbody></table><p>可见杜甫更加挂念天下苍生，忧国忧民。</p><h4 id="“歌-愁”"><a href="#“歌-愁”" class="headerlink" title="“歌;愁”"></a>“歌;愁”</h4><table><thead><tr><th>李白</th><th>杜甫</th></tr></thead><tbody><tr><td>歌舞    9<br/>愁不    9<br/>人愁    9<br/>吴歌    9<br/>行歌    8<br/>歌白    8<br/>长歌    8<br/>愁杀    7<br/>歌钟    7<br/>棹歌    7</td><td>愁思    13<br/>穷愁    11<br/>客愁    10<br/>长歌    9<br/>高歌    8<br/>歌兮    7<br/>悲歌    6<br/>兮歌    6<br/>狂歌    5<br/>愁绝    5</td></tr></tbody></table><p>可以看出李白更加浪漫，喜欢歌舞；而杜甫则悲怆多愁，连“歌”都是“悲歌”。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>由于不同的出身、经历，李白和杜甫两人的诗歌创作风格有所不同。李白和杜甫彼此深情凝望，又相互辉映。一个浪漫豪放，一个忧国忧民；一个富有激情，一个臻于深刻。李白的创作尚意韵，是神来之笔；杜甫的创作尚法度，是典范圭臬。李白和杜甫代表两种精神人格、两种风格境界。二者并立，成为两座高峰、两座丰碑，他们风格不同，却伟大相通。</p><blockquote class="blockquote-center"><p>李富于才，杜深于学。富于才者豪于情，深于学者笃于性。</p><p>诗原本性情。以性情为诗，所以凌驾一代，妙绝千古。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;Primary Practice h55&lt;/p&gt;</summary>
    
    
    
    
    <category term="Practice" scheme="https://blog.superpung.xyz/tags/Practice/"/>
    
  </entry>
  
  <entry>
    <title>判断复杂口令</title>
    <link href="https://blog.superpung.xyz/primary-practice-h54/"/>
    <id>https://blog.superpung.xyz/primary-practice-h54/</id>
    <published>2021-05-01T12:35:34.000Z</published>
    <updated>2021-05-01T15:06:44.957Z</updated>
    
    <content type="html"><![CDATA[<p>Primary Practice h54</p><a id="more"></a><div class="note info"><p>判断一个口令是否是一个复杂度合法的口令。</p><p>复杂度合法的口令有如下要求：</p><ol><li>长度 &gt;=8</li><li>最少包含一个数字</li><li>最少包含一个小写英文字母</li><li>最少包含一个大写英文字母</li><li>最少包含一个特殊字符 特殊字符定义为   ~!@#$%^&amp;*()_+</li></ol></div><p>很简单，只需要对每一位进行判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;Character&gt; CHAR_SET = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList</span><br><span class="line">(<span class="string">&#x27;~&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;+&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidPassword</span><span class="params">(String password)</span></span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> isLengthNotLess8, isContainDigital, isContainLowerLetter, isContainUpperLetter, isContainSpecialChar;</span><br><span class="line"><span class="keyword">int</span> digitalCount = <span class="number">0</span>, lowerLetterCount = <span class="number">0</span>, upperLetterCount = <span class="number">0</span>, specialCharCount = <span class="number">0</span>;</span><br><span class="line">isLengthNotLess8 = password.length() &gt;= <span class="number">8</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; password.length(); i++) &#123;</span><br><span class="line"><span class="keyword">char</span> cha = password.charAt(i);</span><br><span class="line"><span class="keyword">if</span> (cha &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; cha &gt;= <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">digitalCount++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cha &lt;= <span class="string">&#x27;z&#x27;</span> &amp;&amp; cha &gt;= <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">lowerLetterCount++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cha &lt;= <span class="string">&#x27;Z&#x27;</span> &amp;&amp; cha &gt;= <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">upperLetterCount++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (CHAR_SET.contains(cha)) &#123;</span><br><span class="line">specialCharCount++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">isContainDigital = digitalCount &gt;= <span class="number">1</span>;</span><br><span class="line">isContainLowerLetter = lowerLetterCount &gt;= <span class="number">1</span>;</span><br><span class="line">isContainUpperLetter = upperLetterCount &gt;= <span class="number">1</span>;</span><br><span class="line">isContainSpecialChar = specialCharCount &gt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> isLengthNotLess8 &amp;&amp; isContainDigital &amp;&amp; isContainLowerLetter &amp;&amp; isContainUpperLetter &amp;&amp; isContainSpecialChar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Primary Practice h54&lt;/p&gt;</summary>
    
    
    
    
    <category term="Practice" scheme="https://blog.superpung.xyz/tags/Practice/"/>
    
  </entry>
  
  <entry>
    <title>兔子繁殖问题</title>
    <link href="https://blog.superpung.xyz/primary-practice-h53/"/>
    <id>https://blog.superpung.xyz/primary-practice-h53/</id>
    <published>2021-05-01T12:35:30.000Z</published>
    <updated>2021-05-01T13:51:51.224Z</updated>
    
    <content type="html"><![CDATA[<p>Primary Practice h53</p><a id="more"></a><div class="note info"><p>1 对兔子出生以后经过 180 天可以生出一窝（2 对）兔子，以后每隔 90 天繁殖一次生出一窝（2 对）兔子</p><p>每对兔子的寿命是 700 天 </p><p>@param startCount 第 0 天 开始的时候初始的兔子对数</p><p>@param days 经过的天数</p><p>@return 目前系统中存活的兔子的对数</p></div><p>一道很有趣的题，不是简单的递归问题。无需找规律，只需模拟出真实的兔子繁殖。</p><p>可以发现，需要抽象出兔子类（个体）、兔子窝类（集体），才能完整模拟兔子繁殖。</p><h1 id="0x00-Rabbit"><a href="#0x00-Rabbit" class="headerlink" title="0x00 Rabbit"></a>0x00 Rabbit</h1><p>根据要求，兔子的属性有它的“年龄”（以天计）、“寿命”（以天计，700 天）、生存状况（生存天数达到寿命则死亡）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> dayAge;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> dead;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> lifeDayTime = <span class="number">700</span>;</span><br></pre></td></tr></table></figure><p>兔子刚出生时，“年龄”为 0：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Rabbit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    dayAge = <span class="number">0</span>;</span><br><span class="line">    dead = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取兔子的“年龄”：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDayAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dayAge;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>兔子经过一天的成长（只有此时会发生兔子死亡，所以需要判断）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">growOneDay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isDead()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dayAge++;</span><br><span class="line">    <span class="keyword">if</span> (dayAge &gt; lifeDayTime) &#123;</span><br><span class="line">        dead = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取兔子的生存状况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x01-RabbitNest"><a href="#0x01-RabbitNest" class="headerlink" title="0x01 RabbitNest"></a>0x01 RabbitNest</h1><p>上面的 Rabbit 类代表兔子个体，此 RabbitNest 类代表兔子集体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;Rabbit&gt; rabbits = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>兔子窝开始的时候，需要几只初始兔子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RabbitNest</span><span class="params">(<span class="keyword">int</span> startCount)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; startCount; i++) &#123;</span><br><span class="line">        Rabbit rabbit = <span class="keyword">new</span> Rabbit();</span><br><span class="line">        rabbits.add(rabbit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过一天，兔子们长大了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rabbitsGrow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Rabbit rabbit : rabbits) &#123;</span><br><span class="line">        rabbit.growOneDay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过一天，有的兔子达到的寿命，离开了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rabbitsDead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    rabbits.removeIf(Rabbit::isDead);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过一天，有的兔子生小兔子了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rabbitsBearLittleRabbits</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Rabbit&gt; rabbitsBornOneDay = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">// 这一天生的兔子</span></span><br><span class="line">    <span class="keyword">for</span> (Rabbit rabbit : rabbits) &#123;<span class="comment">// 这一天存活的兔子，不包括新生的兔子</span></span><br><span class="line">        <span class="keyword">int</span> dayAge = rabbit.getDayAge();<span class="comment">// 某兔子的年龄</span></span><br><span class="line">        <span class="keyword">boolean</span> isRabbitCanBear = dayAge == <span class="number">180</span> || (dayAge &gt; <span class="number">180</span> &amp;&amp; (dayAge - <span class="number">180</span>) % <span class="number">90</span> == <span class="number">0</span>);<span class="comment">// 可以生小兔子的条件</span></span><br><span class="line">        <span class="keyword">if</span> (isRabbitCanBear &amp;&amp; !rabbit.isDead()) &#123;<span class="comment">// 可生且未死亡</span></span><br><span class="line">            Rabbit rabbit1 = <span class="keyword">new</span> Rabbit();<span class="comment">// 生了一对</span></span><br><span class="line">            Rabbit rabbit2 = <span class="keyword">new</span> Rabbit();<span class="comment">// 又生了一对</span></span><br><span class="line">            rabbitsBornOneDay.add(rabbit1);</span><br><span class="line">            rabbitsBornOneDay.add(rabbit2);<span class="comment">// 加入到这一天新生的兔子中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rabbits.addAll(rabbitsBornOneDay);<span class="comment">// 这一天新生的兔子加入到兔子集体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过一天，兔子们主要经历以上三个阶段：成长、死亡、新生：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">oneDayPass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    rabbitsGrow();</span><br><span class="line">    rabbitsDead();</span><br><span class="line">    rabbitsBearLittleRabbits();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取兔子窝中兔子数量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLivingRabbits</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rabbits.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x02-RabbitCount"><a href="#0x02-RabbitCount" class="headerlink" title="0x02 RabbitCount"></a>0x02 RabbitCount</h1><p>创建了兔子和兔子窝，想要知道兔子的数量也就简单了：只需创建一个兔子窝，经历相应的天数，再获取其中兔子的数量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLivingRabbit</span><span class="params">(<span class="keyword">int</span> startCount,<span class="keyword">int</span> days)</span> </span>&#123;</span><br><span class="line">RabbitNest rabbitNest = <span class="keyword">new</span> RabbitNest(startCount);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; days; i++) &#123;</span><br><span class="line">rabbitNest.oneDayPass();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rabbitNest.getLivingRabbits();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Primary Practice h53&lt;/p&gt;</summary>
    
    
    
    
    <category term="Practice" scheme="https://blog.superpung.xyz/tags/Practice/"/>
    
  </entry>
  
  <entry>
    <title>质因数分解</title>
    <link href="https://blog.superpung.xyz/primary-practice-h52/"/>
    <id>https://blog.superpung.xyz/primary-practice-h52/</id>
    <published>2021-05-01T12:35:28.000Z</published>
    <updated>2021-05-01T13:16:39.069Z</updated>
    
    <content type="html"><![CDATA[<p>Primary Practice h52</p><a id="more"></a><div class="note info"><p>将 num 进行质因数分解，将分解到的质因数放到 Set 里面返回</p></div><p>如果每次对 num 分解都从最小的质数开始，那么分解的结果一定都是质数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;Integer&gt; <span class="title">decompose</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">Set&lt;Integer&gt; result = <span class="keyword">new</span> HashSet&lt;&gt;();<span class="comment">// 分解的结果</span></span><br><span class="line"><span class="keyword">if</span> (num &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;<span class="comment">// 负数不分解</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">result.add(<span class="number">1</span>);<span class="comment">// 1就是1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">2</span>;<span class="comment">// 先从最小质数开始</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= num) &#123;</span><br><span class="line"><span class="keyword">if</span> (num % i == <span class="number">0</span>) &#123;</span><br><span class="line">result.add(i);<span class="comment">// 整除，i是num因数</span></span><br><span class="line">num = num / i;<span class="comment">// 取剩余部分，下次继续分解</span></span><br><span class="line">i = <span class="number">2</span>;<span class="comment">// 下次分解一定要从头开始</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">i++;<span class="comment">// 不整除，只自增1即可，不必直接到下一个质数（都不能被2整除，怎么可能被4整除）</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Primary Practice h52&lt;/p&gt;</summary>
    
    
    
    
    <category term="Practice" scheme="https://blog.superpung.xyz/tags/Practice/"/>
    
  </entry>
  
  <entry>
    <title>微信红包的模拟算法</title>
    <link href="https://blog.superpung.xyz/primary-practice-h51/"/>
    <id>https://blog.superpung.xyz/primary-practice-h51/</id>
    <published>2021-05-01T12:35:22.000Z</published>
    <updated>2021-05-13T13:40:51.797Z</updated>
    
    <content type="html"><![CDATA[<p>Primary Practice h51</p><a id="more"></a><div class="note info"><p>完成分红包金额的程序，调用方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HongBao home = <span class="keyword">new</span> HongBao();</span><br></pre></td></tr></table></figure><p>返回每个人应得的的钱数，分红包规则参考微信的随机红包</p><p>此题目结果不要求精确匹配</p></div><p>模拟一个微信随机红包的算法，查阅了一些资料，得知微信随机红包可能遵循以下规律（可靠性未知，且过于简单化）：</p><ol><li>单个红包最低金额为 0.01 元；</li><li>单个红包最高金额为剩余钱数对剩余份数的平均值的二倍。</li><li>抢到红包的钱数总和等于发出的钱数。</li></ol><p>根据此，可以写出抢到红包的钱数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getOneRedPackage</span><span class="params">(<span class="keyword">double</span> remainMoney, <span class="keyword">int</span> remainCount)</span> </span>&#123;<span class="comment">// 剩余钱数、剩余份数</span></span><br><span class="line"><span class="keyword">double</span> min = <span class="number">0.01</span>;<span class="comment">// 最小值</span></span><br><span class="line"><span class="keyword">double</span> max = remainMoney / remainCount * <span class="number">2</span>;<span class="comment">// 最大值</span></span><br><span class="line"><span class="keyword">double</span> money;<span class="comment">// 抢到的钱数</span></span><br><span class="line"><span class="keyword">if</span> (remainCount == <span class="number">1</span>) &#123;</span><br><span class="line">money = remainMoney;<span class="comment">// 就剩一个了，抢到的就是剩下的钱</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">money = Math.random() * max;<span class="comment">// 如果剩多个，抢到的就是0～max之间的随机数</span></span><br><span class="line">money = Math.max(money, min);<span class="comment">// 保证抢到的大于min</span></span><br><span class="line">&#125;</span><br><span class="line">money = (<span class="keyword">double</span>) Math.round(money * <span class="number">100</span>) / <span class="number">100</span>;<span class="comment">// 保留两位，精确到分</span></span><br><span class="line"><span class="keyword">return</span> money;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>Math.random()</code> 可以返回 0.0～1.0 之间的随机数。</p><p>根据以上算法，可以进一步写出分红包的算法：</p><div class="note info"><p>@param total  红包总金额，以元为单位，精确到分，系统测试的时候保证总金额至少够每人分得 1 分钱</p><p>@param personCount 分红包的总人数 &gt; 0</p><p>@return 每个人分得的钱数</p><p>规则遵循微信分红包规则 例如：</p><p>要求 每人分得的钱数总和 = total</p><p>每个人分得钱数必须是正数，且不能少于 1 分</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">double</span>[] getHongbao(<span class="keyword">double</span> total,<span class="keyword">int</span> personCount) &#123;</span><br><span class="line"><span class="keyword">if</span> (total &lt; personCount * <span class="number">0.01</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;<span class="comment">// 发出红包份数太多/总钱数太少</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span>[] result = <span class="keyword">new</span> <span class="keyword">double</span>[personCount];<span class="comment">// 抢到金额数组</span></span><br><span class="line"><span class="keyword">int</span> remainCount = personCount;<span class="comment">// 剩余份数</span></span><br><span class="line"><span class="keyword">double</span> remainMoney = total;<span class="comment">// 剩余钱数</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; personCount; i++) &#123;</span><br><span class="line"><span class="keyword">double</span> oneMoney;<span class="comment">// 一个</span></span><br><span class="line">oneMoney = getOneRedPackage(remainMoney, remainCount);<span class="comment">// 一个</span></span><br><span class="line">remainCount--;<span class="comment">// 剩余份数减一</span></span><br><span class="line">remainMoney -= oneMoney;<span class="comment">// 剩余钱数减少</span></span><br><span class="line">result[i] = oneMoney;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success"><h4 id="2021-5-13-更新"><a href="#2021-5-13-更新" class="headerlink" title="2021.5.13 更新"></a>2021.5.13 更新</h4><p>分红包时最大值不能太大，否则剩下的连一分钱都分不到了。</p><p>所以对最大值需要增加判断，保证其他人至少要分到一分钱。</p><p>修改后的 <code>getOneRedPackage</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getOneRedPackage</span><span class="params">(<span class="keyword">double</span> remainMoney, <span class="keyword">int</span> remainCount)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> min = <span class="number">0.01</span>;</span><br><span class="line"><span class="keyword">double</span> max1 = remainMoney / remainCount * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">double</span> max2 = remainMoney - (remainCount - <span class="number">1</span>) * <span class="number">0.01</span>;</span><br><span class="line"><span class="keyword">double</span> max = Math.min(max1, max2);</span><br><span class="line"><span class="keyword">double</span> money;</span><br><span class="line"><span class="keyword">if</span> (remainCount == <span class="number">1</span>) &#123;</span><br><span class="line">money = remainMoney;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">money = Math.random() * max;</span><br><span class="line">money = Math.max(money, min);</span><br><span class="line">&#125;</span><br><span class="line">money = (<span class="keyword">double</span>) Math.round(money * <span class="number">100</span>) / <span class="number">100</span>;</span><br><span class="line"><span class="keyword">return</span> money;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="https://github.com/SuperPung/Primary-Practice-Homeworks/tree/master/src/com/huawei/classroom/student/h51">Source code</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Primary Practice h51&lt;/p&gt;</summary>
    
    
    
    
    <category term="Practice" scheme="https://blog.superpung.xyz/tags/Practice/"/>
    
  </entry>
  
  <entry>
    <title>Java 反射练习</title>
    <link href="https://blog.superpung.xyz/oop-h18/"/>
    <id>https://blog.superpung.xyz/oop-h18/</id>
    <published>2021-04-19T09:33:19.000Z</published>
    <updated>2021-04-19T12:18:54.106Z</updated>
    
    <content type="html"><![CDATA[<p>OOP h18</p><a id="more"></a><div class="note info"><p>构造一个「类厂」：MyClassFactory</p><p>该类能够用一个 .ini 文件初始化，.ini 文件的格式参考 my_config.ini，测试的时候这个文件名字可能改变，文件中包括中文，且文件一定为 UTF-8 编码</p><p>.ini 文件中描述了这个类厂能够动态创建的<strong>类</strong>和类的初始<strong>属性</strong></p><p>动态<strong>构造</strong>各种类，并且用.ini中的属性<strong>初始化</strong>，测试的时候 类名可能变化，例如  Orange.class ….</p><p>测试的时候，可能给其他对象，测试时候给的对象一定满足如下条件：</p><ul><li>有空的构造函数</li><li>其中只包括了 Integer,String 两种属性，并且有 setXxx getXxx 方法 </li></ul></div><p>将要动态创建的“类”抽象成 Param 类。</p><h1 id="0x00-Param"><a href="#0x00-Param" class="headerlink" title="0x00 Param"></a>0x00 Param</h1><p>该类应该具有成员变量，存储“类”和属性的对应关系（Map），而属性和属性值也具有对应关系（Map）。</p><p>Param 包含成员变量 allParamsMap，类型为 <code>Map&lt;String, Map&lt;String, Object&gt;&gt;</code>。</p><p>构造方法可以直接调用 readLines 读取文件转换格式。</p><p>新建 getParamMap 方法，返回对应“类”名的属性映射 <code>Map&lt;String, Object&gt;</code>。</p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h18;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Param</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashMap&lt;类名, HashMap&lt;属性名, 属性值&gt;&gt;</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Map&lt;String, Object&gt;&gt; allParamsMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Param</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        readLines(filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getParamMap</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> allParamsMap.get(className);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readLines</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream in = <span class="keyword">new</span> FileInputStream(filename);<span class="comment">// 读</span></span><br><span class="line">        InputStreamReader inReader = <span class="keyword">new</span> InputStreamReader(in, StandardCharsets.UTF_8);<span class="comment">// 读</span></span><br><span class="line">        LineNumberReader lineReader = <span class="keyword">new</span> LineNumberReader(inReader);<span class="comment">// 读</span></span><br><span class="line">        String line = lineReader.readLine();<span class="comment">// 读一行</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (line != <span class="keyword">null</span>) &#123;<span class="comment">// 没到文件末尾</span></span><br><span class="line">            <span class="keyword">if</span> (line.startsWith(<span class="string">&quot;#&quot;</span>) || line.trim().length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 这里不能 continue 否则会死循环</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 一行的格式：[类的完整路径名].[属性]=&quot;一个字符串&quot;/或者一个整数</span></span><br><span class="line">                String[] strs = line.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">                String left = strs[<span class="number">0</span>];<span class="comment">// [类的完整路径名].[属性]</span></span><br><span class="line">                String right = strs[<span class="number">1</span>];<span class="comment">// &quot;一个字符串&quot;/或者一个整数</span></span><br><span class="line">                <span class="comment">// [类的完整路径名].[属性]</span></span><br><span class="line">                <span class="keyword">int</span> dotPos = left.lastIndexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">                String className = left.substring(<span class="number">0</span>, dotPos);<span class="comment">// [类的完整路径名]</span></span><br><span class="line">                String paramName = left.substring(dotPos + <span class="number">1</span>);<span class="comment">// [属性]</span></span><br><span class="line">                <span class="comment">// [属性]=&quot;一个字符串&quot;/或者一个整数</span></span><br><span class="line">                Map&lt;String, Object&gt; paramMap = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (allParamsMap.containsKey(className)) &#123;</span><br><span class="line">                    paramMap = allParamsMap.get(className);<span class="comment">// 已经有这个类名了，把键对应的值赋给它</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    paramMap = <span class="keyword">new</span> HashMap&lt;&gt;();<span class="comment">// 没有这个类，新建</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// &quot;一个字符串&quot;/或者一个整数</span></span><br><span class="line">                <span class="keyword">if</span> (right.startsWith(<span class="string">&quot;\&quot;&quot;</span>)) &#123;</span><br><span class="line">                    paramMap.put(paramName, right.substring(<span class="number">1</span>, right.length() - <span class="number">1</span>));<span class="comment">// 是个字符串</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    paramMap.put(paramName, Integer.parseInt(right));<span class="comment">// 是个整数，可以用 valueOf</span></span><br><span class="line">                &#125;</span><br><span class="line">                allParamsMap.put(className, paramMap);<span class="comment">// put 进去</span></span><br><span class="line">            &#125;</span><br><span class="line">            line = lineReader.readLine();<span class="comment">// 再读一行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x01-MyClassFactory"><a href="#0x01-MyClassFactory" class="headerlink" title="0x01 MyClassFactory"></a>0x01 MyClassFactory</h1><p>动态调用赋值，需要给“类”新建 setter 方法（getter 是 Test 用的）。</p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h18;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Param params;<span class="comment">// 成员变量就是 Param</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassFactory</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        params = <span class="keyword">new</span> Param(filename);<span class="comment">// 新建 Param，可以存所有类以及对应的属性/属性值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 类型</span></span><br><span class="line"><span class="comment">     * setter (getter in Test)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">createInstance</span><span class="params">(Class&lt;T&gt; clazz)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException </span>&#123;</span><br><span class="line">        String className = clazz.getName();<span class="comment">// 类名</span></span><br><span class="line">        T t = clazz.newInstance();</span><br><span class="line">        Map&lt;String, Object&gt; paramMap = params.getParamMap(className);<span class="comment">// 取类的属性 Map</span></span><br><span class="line">        <span class="keyword">for</span> (String param : paramMap.keySet()) &#123;<span class="comment">// 遍历所有属性，依次创建 setter</span></span><br><span class="line">            Object value = paramMap.get(param);<span class="comment">// 属性值</span></span><br><span class="line">            String methodName = <span class="string">&quot;set&quot;</span> + param.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + param.substring(<span class="number">1</span>);<span class="comment">// setter 名</span></span><br><span class="line">            dynamicInvokeMethod(t, methodName, value);<span class="comment">// 动态调用类 t 的 setXxx 方法，把属性 xxx 赋值为 value</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动态调用赋值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dynamicInvokeMethod</span><span class="params">(Object obj, String methodName, Object... values)</span><span class="comment">// 多参数</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        Class&lt;?&gt;[] classes = <span class="keyword">new</span> Class[values.length];<span class="comment">// 每一个参数的类型</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">            classes[i] = values[i].getClass();</span><br><span class="line">        &#125;</span><br><span class="line">        Method method = obj.getClass().getMethod(methodName, classes);<span class="comment">// 创建 Method</span></span><br><span class="line">        method.invoke(obj, values);<span class="comment">// 调用 Method 赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;OOP h18&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.superpung.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>第一个 Java 小游戏（pro）</title>
    <link href="https://blog.superpung.xyz/oop-h17/"/>
    <id>https://blog.superpung.xyz/oop-h17/</id>
    <published>2021-04-19T09:32:36.000Z</published>
    <updated>2021-04-19T10:39:47.089Z</updated>
    
    <content type="html"><![CDATA[<p>OOP h17</p><a id="more"></a><div class="note info"><p>某一款游戏，其主要角色如下:</p><ul><li>游戏中每个对象有当前 x,y 坐标，坐标值取值范围为整数</li><li><strong>每种对象的攻击力 strength、攻击范围 range、初始健康值 health 通过BattleField.init(String fileName) 从配置文件中初始化</strong></li><li>非建筑物可以通过 move(dx,dy) 来移动坐标值，dx,dy 表示 x轴,y轴增量， 取值范围为整数</li><li>对象 A 攻击 B 的时候，要满足两个对象之间直线距离小于等于 A 的攻击范围，否则攻击无效（被攻击方不减健康值）</li><li>任何对象有 getHealth() 方法，返回当前生命值，如果已经死亡则返回 &lt;=0 的一个数字</li><li>任何对象有 isDestroyed() 方法，如果生命值 &lt;=0 则 true，否则 false</li><li>GameBase 初始 x,y 值在创建时指定</li><li>Barrack 兵营，可以训练出步枪兵、 RPG兵、军犬，初始 x,y 值在创建时指定</li><li>RifleSoldier 步枪兵，初始 x,y 值就是兵营的 x,y</li><li>RPGSoldier 火箭兵，初始 x,y 值就是兵营的 x,y</li><li>Dog 军犬，初始 x,y 值就是兵营的 x,y</li><li>A.attack(B)，表示 A 攻击 B 对象，B.health=B.health-A.strength，<strong>注意这次没有一击毙命方法</strong></li><li><strong>A.attack()，表示 A 寻找距离他最近、非己方、且活着的对象 B 进行攻击，如果攻击范围内没有符合要求对象则什么也不做</strong></li><li>如果 A.isDestroyed() 则 A.attack() 没有任何效果</li></ul></div><p>需要在原来的基础上实现读取文件、创建玩家和自定义攻击的功能。</p><h1 id="0x00-BattleField"><a href="#0x00-BattleField" class="headerlink" title="0x00 BattleField"></a>0x00 BattleField</h1><p>新的类，用于初始化属性值（生命值、攻击力和攻击范围），还包括玩家。</p><p>在上一次程序中，属性值由 Param 类中的一些 public 常量来定义。这次需要实现根据文件更改属性值。</p><p>成员变量包括所有玩家列表（new）。</p><p>init 方法中，可以调用 readLines 读取文件转换格式，将信息存入字符串数组列表中，遍历每一个字符串数组（即每一行）赋值。</p><p>createPlayer 方法中，传入玩家名字，就新建一个玩家，加入列表中。</p><p>getAllPlayer 列出所有玩家，只需返回所有玩家列表。</p><p>readLines 和之前用的一样，格式化的时候需要注意细节。</p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BattleField</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Player&gt; players = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BattleField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        players = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">        List&lt;String[]&gt; rule = readLines(filename);</span><br><span class="line">        <span class="keyword">if</span> (rule == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String[] ruleEle : rule) &#123;</span><br><span class="line">            setValue(ruleEle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createPlayer</span><span class="params">(String playerName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (playerName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Player newPlayer = <span class="keyword">new</span> Player(playerName);</span><br><span class="line">        players.add(newPlayer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Player&gt; <span class="title">getAllPlayer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> players;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GameBase <span class="title">createGameBase</span><span class="params">(Player player, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GameBase(player, x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String[]&gt; readLines(String filename) &#123;</span><br><span class="line">        String line = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Reader reader = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;String[]&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            reader = <span class="keyword">new</span> FileReader(filename);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (reader == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LineNumberReader lineReader = <span class="keyword">new</span> LineNumberReader(reader);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                line = lineReader.readLine();<span class="comment">// 读一行</span></span><br><span class="line">                <span class="keyword">if</span> (line == <span class="keyword">null</span>) &#123;<span class="comment">// 空的，文件末尾</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (line.trim().length() == <span class="number">0</span> || line.startsWith(<span class="string">&quot;#&quot;</span>)) &#123;<span class="comment">// 去掉一行的空格，判断是空行或者开头是#，跳过</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                result.add(line.trim().split(<span class="string">&quot;\\.|=&quot;</span>));<span class="comment">// 正则表达式，&quot;.&quot;需要转义（？）前面加\\，|可以代表多个分隔符</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String[] rule)</span> </span>&#123;<span class="comment">// 设置属性，这一定不是好的写法</span></span><br><span class="line">        <span class="keyword">if</span> (EnumObjectType.base.toString().equals(rule[<span class="number">0</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (EnumObjectType.health.toString().equals(rule[<span class="number">1</span>])) &#123;</span><br><span class="line">                Param.baseHealth = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EnumObjectType.strength.toString().equals(rule[<span class="number">0</span>])) &#123;</span><br><span class="line">                Param.baseStrength = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EnumObjectType.range.toString().equals(rule[<span class="number">0</span>])) &#123;</span><br><span class="line">                Param.baseRange = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EnumObjectType.heavyTank.toString().equals(rule[<span class="number">0</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (EnumObjectType.health.toString().equals(rule[<span class="number">1</span>])) &#123;</span><br><span class="line">                Param.heavyTankHealth = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EnumObjectType.strength.toString().equals(rule[<span class="number">1</span>])) &#123;</span><br><span class="line">                Param.heavyTankStrength = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EnumObjectType.range.toString().equals(rule[<span class="number">1</span>])) &#123;</span><br><span class="line">                Param.heavyTankRange = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EnumObjectType.mediumTank.toString().equals(rule[<span class="number">0</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (EnumObjectType.health.toString().equals(rule[<span class="number">1</span>])) &#123;</span><br><span class="line">                Param.mediumTankHealth = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EnumObjectType.strength.toString().equals(rule[<span class="number">1</span>])) &#123;</span><br><span class="line">                Param.mediumTankStrength = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EnumObjectType.range.toString().equals(rule[<span class="number">1</span>])) &#123;</span><br><span class="line">                Param.mediumTankRange = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EnumObjectType.rifleSoldier.toString().equals(rule[<span class="number">0</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (EnumObjectType.health.toString().equals(rule[<span class="number">1</span>])) &#123;</span><br><span class="line">                Param.rifleSoldierHealth = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EnumObjectType.strength.toString().equals(rule[<span class="number">1</span>])) &#123;</span><br><span class="line">                Param.rifleSoldierStrength = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EnumObjectType.range.toString().equals(rule[<span class="number">1</span>])) &#123;</span><br><span class="line">                Param.rifleSoldierRange = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EnumObjectType.RPGSoldier.toString().equals(rule[<span class="number">0</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (EnumObjectType.health.toString().equals(rule[<span class="number">1</span>])) &#123;</span><br><span class="line">                Param.RPGSoldierHealth = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EnumObjectType.strength.toString().equals(rule[<span class="number">1</span>])) &#123;</span><br><span class="line">                Param.RPGSoldierStrength = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EnumObjectType.range.toString().equals(rule[<span class="number">1</span>])) &#123;</span><br><span class="line">                Param.RPGSoldierRange = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EnumObjectType.dog.toString().equals(rule[<span class="number">0</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (EnumObjectType.health.toString().equals(rule[<span class="number">1</span>])) &#123;</span><br><span class="line">                Param.dogHealth = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EnumObjectType.strength.toString().equals(rule[<span class="number">1</span>])) &#123;</span><br><span class="line">                Param.dogStrength = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EnumObjectType.range.toString().equals(rule[<span class="number">1</span>])) &#123;</span><br><span class="line">                Param.dogRange = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EnumObjectType.warFactory.toString().equals(rule[<span class="number">0</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (EnumObjectType.health.toString().equals(rule[<span class="number">1</span>])) &#123;</span><br><span class="line">                Param.warFactoryHealth = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EnumObjectType.strength.toString().equals(rule[<span class="number">1</span>])) &#123;</span><br><span class="line">                Param.warFactoryStrength = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EnumObjectType.range.toString().equals(rule[<span class="number">1</span>])) &#123;</span><br><span class="line">                Param.warFactoryRange = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EnumObjectType.barrack.toString().equals(rule[<span class="number">0</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (EnumObjectType.health.toString().equals(rule[<span class="number">1</span>])) &#123;</span><br><span class="line">                Param.barrackHealth = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EnumObjectType.strength.toString().equals(rule[<span class="number">1</span>])) &#123;</span><br><span class="line">                Param.barrackStrength = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EnumObjectType.range.toString().equals(rule[<span class="number">1</span>])) &#123;</span><br><span class="line">                Param.barrackRange = Integer.parseInt(rule[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x01-Player"><a href="#0x01-Player" class="headerlink" title="0x01 Player"></a>0x01 Player</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h17;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x02-GameObject"><a href="#0x02-GameObject" class="headerlink" title="0x02 GameObject"></a>0x02 GameObject</h1><p>增加自定义攻击方法。</p><p>因为要在范围内找所有对象，需要新建成员变量 gameObject（GameObject 列表）用于遍历，每新建对象是存入（add）到此列表。</p><p>新建成员变量 player 代表所属玩家、objectType 代表所属类型。分别新建 getter 方法和 setter 方法。</p><p>重写 toString 方法，用于 debug：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;[&quot;</span>+player.getName() + <span class="string">&quot;.&quot;</span> + objectType +<span class="string">&quot; live=&quot;</span> + (!isDestroyed()) + <span class="string">&quot; x=&quot;</span> + x + <span class="string">&quot; y=&quot;</span> + y+ <span class="string">&quot; health=&quot;</span> + lifeValue+<span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 attack(GameObject) 方法（不再有一击毙命）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">(GameObject obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (obj.isDestroyed() || <span class="keyword">this</span>.isDestroyed()) &#123;<span class="comment">// 攻击者或被攻击者死了</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.attackRange &gt;= <span class="keyword">this</span>.getDistance(obj)) &#123;<span class="comment">// 在范围内，可以攻击</span></span><br><span class="line">String debug=<span class="keyword">this</span>+<span class="string">&quot; 攻击 &quot;</span>+obj;<span class="comment">// debug 需要</span></span><br><span class="line">obj.changeHealth(<span class="keyword">this</span>.attackPower);</span><br><span class="line">debug=debug+<span class="string">&quot; 攻击后 health=&quot;</span>+obj.getHealth();<span class="comment">// debug 需要</span></span><br><span class="line">System.out.println(debug);<span class="comment">// debug 需要</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建 attack() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.isDestroyed()) &#123;<span class="comment">// 判断，此处可省</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> min = <span class="keyword">this</span>.attackRange;<span class="comment">// 可攻击的最大距离</span></span><br><span class="line"><span class="keyword">for</span> (GameObject obj : GameObject.gameObjects) &#123;<span class="comment">// 遍历所有对象，找最近的</span></span><br><span class="line"><span class="keyword">if</span> (obj.isDestroyed() || obj.player == <span class="keyword">this</span>.player) &#123;<span class="comment">// 被攻击者死了或者是友军</span></span><br><span class="line"><span class="keyword">continue</span>;<span class="comment">// 继续找，这里不能 return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.getDistance(obj) &lt;= min) &#123;<span class="comment">// 更近的</span></span><br><span class="line">min = <span class="keyword">this</span>.getDistance(obj);<span class="comment">// 更近的距离</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (GameObject obj : GameObject.gameObjects) &#123;<span class="comment">// 上面找到了最近的距离</span></span><br><span class="line"><span class="keyword">if</span> (obj.isDestroyed() || obj.player == <span class="keyword">this</span>.player) &#123;<span class="comment">// 被攻击者死了或者是友军</span></span><br><span class="line"><span class="keyword">continue</span>;<span class="comment">// 继续找那个距离是最近距离的对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.getDistance(obj) - min &lt; <span class="number">0.000001</span>) &#123;<span class="comment">// 找到了</span></span><br><span class="line">attack(obj);<span class="comment">// 直接调用上面的方法攻击</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x03-Others"><a href="#0x03-Others" class="headerlink" title="0x03 Others"></a>0x03 Others</h1><p>Param 中变量不再是 final。</p><p>继承 GameObject 的类均需在构造方法中调用 setObjectType 方法，指明自身类型，便于 debug。</p><p>继承 GameObject 的类的构造方法均需传入参数「玩家」。</p><p>gameBase 创建 barrack 和 warFactory 、barrack 和 warFactory 创建 soldier、dog 和 tank 时，需传入自身的 getPlayer。</p><p>building、tank 和 soldier 起传递作用。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;OOP h17&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.superpung.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java Socket 练习</title>
    <link href="https://blog.superpung.xyz/oop-h16/"/>
    <id>https://blog.superpung.xyz/oop-h16/</id>
    <published>2021-04-19T08:55:49.000Z</published>
    <updated>2021-04-19T10:39:56.672Z</updated>
    
    <content type="html"><![CDATA[<p>OOP h16</p><a id="more"></a><div class="note info"><p>完成 MyServer 类，随机测试向服务器端输入几句话，要求服务器端原封不动返回，向服务器端输入 bye ，表示断开连接。</p></div><p>开始没有完全理解，需要启动线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyServer.java</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h16;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startListen</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">Thread serverThread = <span class="keyword">new</span> ServerThread(port);</span><br><span class="line">serverThread.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建 ServerThread 类继承 Thread，用于监听端口。</p><p>会用到的成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;<span class="comment">// 端口</span></span><br><span class="line"><span class="keyword">private</span> ServerSocket server;<span class="comment">// 服务器</span></span><br><span class="line"><span class="keyword">private</span> Socket socket;<span class="comment">// socket</span></span><br><span class="line"><span class="keyword">private</span> InputStream in;<span class="comment">// 输入流</span></span><br><span class="line"><span class="keyword">private</span> OutputStream out;<span class="comment">// 输出流</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_LEN = <span class="number">100</span>;<span class="comment">// 最大长度</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String STOP_STRING = <span class="string">&quot;bye&quot;</span> + <span class="string">&quot;\r\n&quot;</span>;<span class="comment">// 断开连接口令</span></span><br></pre></td></tr></table></figure><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServerThread</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">server = <span class="keyword">null</span>;</span><br><span class="line">socket = <span class="keyword">null</span>;</span><br><span class="line">in = <span class="keyword">null</span>;</span><br><span class="line">out = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">this</span>.port = port;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写 <code>run</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;<span class="comment">// Test 没有捕获异常，这里不能抛出</span></span><br><span class="line">server = <span class="keyword">new</span> ServerSocket(port);<span class="comment">// 服务器</span></span><br><span class="line">socket = server.accept();<span class="comment">// 等待客户端连接</span></span><br><span class="line">in = socket.getInputStream();<span class="comment">// 获取客户端输入流</span></span><br><span class="line">out = socket.getOutputStream();<span class="comment">// 获取客户端输出流</span></span><br><span class="line"><span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[MAX_LEN];<span class="comment">// 读取的字节</span></span><br><span class="line"><span class="keyword">int</span> readed = in.read(data);<span class="comment">// 从输入流读，读取的长度</span></span><br><span class="line">String line = <span class="keyword">new</span> String(data, <span class="number">0</span>, readed);<span class="comment">// 字符串格式</span></span><br><span class="line"><span class="keyword">while</span> (!STOP_STRING.equals(line)) &#123;<span class="comment">// 没断开</span></span><br><span class="line">out.write(line.getBytes());<span class="comment">// 向输出流写</span></span><br><span class="line">readed = in.read(data);<span class="comment">// 再读</span></span><br><span class="line">line = <span class="keyword">new</span> String(data, <span class="number">0</span>, readed);</span><br><span class="line">&#125;</span><br><span class="line">in.close();</span><br><span class="line">out.close();</span><br><span class="line">socket.close();</span><br><span class="line">server.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">close(in);</span><br><span class="line">close(out);</span><br><span class="line">close(socket);</span><br><span class="line">close(server);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Closeable inout)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (inout != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">inout.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>终于忙完了，一年的大创结束了……</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;OOP h16&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.superpung.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 类及接口练习</title>
    <link href="https://blog.superpung.xyz/oop-h20/"/>
    <id>https://blog.superpung.xyz/oop-h20/</id>
    <published>2021-04-07T08:32:30.000Z</published>
    <updated>2021-04-07T13:59:00.964Z</updated>
    
    <content type="html"><![CDATA[<p>OOP h20</p><a id="more"></a><div class="note info"><p>定义合适的类、接口，使得下面的代码编译并能正确运行。</p></div><p>Test：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h20;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**定义合适的类、接口，使得下面的代码编译并能正确运行*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">A a = <span class="keyword">new</span> D();<span class="comment">// D继承/实现A</span></span><br><span class="line">C c = <span class="keyword">new</span> D();<span class="comment">// D继承/实现C</span></span><br><span class="line">D d = <span class="keyword">new</span> D();</span><br><span class="line"> </span><br><span class="line">System.out.println(<span class="string">&quot;pass 1&quot;</span>);</span><br><span class="line"></span><br><span class="line">B b = c;<span class="comment">// C继承/实现B</span></span><br><span class="line">System.out.println(<span class="string">&quot;pass 2&quot;</span>);</span><br><span class="line"></span><br><span class="line">a = d;</span><br><span class="line">System.out.println(<span class="string">&quot;pass 3&quot;</span>);</span><br><span class="line"></span><br><span class="line">c=<span class="keyword">new</span> E();<span class="comment">// E继承/实现C</span></span><br><span class="line">System.out.println(<span class="string">&quot;pass 4&quot;</span>);</span><br><span class="line"></span><br><span class="line">a=<span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">if</span> (!(a <span class="keyword">instanceof</span> B)) &#123;<span class="comment">// A不继承/实现B</span></span><br><span class="line">System.out.println(<span class="string">&quot;pass 5&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(c <span class="keyword">instanceof</span> A)) &#123;<span class="comment">// C不继承/实现A</span></span><br><span class="line">System.out.println(<span class="string">&quot;pass 6&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!(c <span class="keyword">instanceof</span> D)) &#123;<span class="comment">// C不继承/实现D</span></span><br><span class="line">System.out.println(<span class="string">&quot;pass 7&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上：</p><ul><li>D 继承/实现 A</li><li>D 继承/实现 C</li><li>C 继承/实现 B</li><li>E 继承/实现 C</li><li>A 不继承/实现 B</li><li>C 不继承/实现 A</li><li>C 不继承/实现 D</li></ul><p>D 同时继承/实现 A 和 C，由于 Java 不支持多继承，猜测可能为多重继承——由于 C 不继承/实现 A、A 不继承/实现 B、C 继承/实现 B，则 A 和 C 之间不存在继承关系。所以得出结论：A 和 C 一个为接口、一个为类，D 继承了类、实现了接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h20;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h20;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h20;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h20;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h20;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">E</span> <span class="keyword">implements</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;OOP h20&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.superpung.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 类、集合、文件练习</title>
    <link href="https://blog.superpung.xyz/oop-h19/"/>
    <id>https://blog.superpung.xyz/oop-h19/</id>
    <published>2021-04-07T08:32:26.000Z</published>
    <updated>2021-04-07T13:40:06.316Z</updated>
    
    <content type="html"><![CDATA[<p>OOP h19</p><a id="more"></a><h1 id="q01"><a href="#q01" class="headerlink" title="q01"></a>q01</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h19.q01;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String speakStr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        speakStr = <span class="string">&quot;wangwang&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.speakStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="q02"><a href="#q02" class="headerlink" title="q02"></a>q02</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h19.q02;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h19.q02;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="q03"><a href="#q03" class="headerlink" title="q03"></a>q03</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h19.q03;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> arrayEle : array) &#123;</span><br><span class="line">            min = Math.min(min, arrayEle);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="q04"><a href="#q04" class="headerlink" title="q04"></a>q04</h1><p>去掉重复字符。</p><p>第一次出现的字符建立一个集合，只需要依次判断字符串中的字符：若在此集合中，则跳过；否则加入此集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h19.q04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StrUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">removeDulpicatedChar</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> curChar = str.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (!isInSet(curChar, set)) &#123;</span><br><span class="line">                result.append(curChar);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInSet</span><span class="params">(<span class="keyword">char</span> cha, StringBuilder set)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; set.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cha == set.charAt(i)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="q05"><a href="#q05" class="headerlink" title="q05"></a>q05</h1><div class="note info"><p>完成 StudentUtil，使其具有如下功能：</p><ul><li><p>一个文本文件中 <code>学生姓名,科目,单科成绩;</code>（见 score.txt，这个文件肯定是UTF-8 编码）</p></li><li><p>将所有学生按总成绩从高到低排名，如果成绩并列则按语文从高到低排列，如果语文成绩也相同，则按数学由高到低排列，如果数学成绩也相同，则按英语由高到低排列（不会出现总分相同&amp;&amp;语文相同&amp;&amp;数学相同&amp;&amp;英语相同情况)     </p></li></ul></div><p>首先应读取文件，其次按格式存储文件中的数据，然后对数据进行排序。</p><h2 id="0x00-读取文件-readLines"><a href="#0x00-读取文件-readLines" class="headerlink" title="0x00 读取文件 readLines"></a>0x00 读取文件 <code>readLines</code></h2><p>Test 没有捕捉异常，所以此处不能抛出异常，应捕捉。</p><p><code>FileReader</code> 读文件，<code>LineNumberReader</code> 读行。读取的同时去掉了末尾的分号，且用逗号分割后存放到一个字符串数组。</p><p>最终返回一个字符串数组的列表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String[]&gt; readLines(String filename) &#123;</span><br><span class="line">    String line = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    Reader reader = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;String[]&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        reader = <span class="keyword">new</span> FileReader(filename);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (reader == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LineNumberReader lineReader = <span class="keyword">new</span> LineNumberReader(reader);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            line = lineReader.readLine();</span><br><span class="line">            <span class="keyword">if</span> (line == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(line.replace(<span class="string">&quot;;&quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x01-格式化每行数据-Score"><a href="#0x01-格式化每行数据-Score" class="headerlink" title="0x01 格式化每行数据 Score"></a>0x01 格式化每行数据 <code>Score</code></h2><p>上面用字符串数组存放一行数据，但最终需要排序，显然字符串数组不利于排序。</p><p>可以把学生的成绩抽象为一个 <code>Score</code> 类。注意不是把一行数据抽象为一个类，因为很有可能存在许多行对应同一个学生的情况。</p><p>根据要求，排序的依据依次是总成绩、语文成绩、数学成绩、英语成绩，其他成绩都不重要。所以这个类的成员变量应该包括姓名、总成绩、语文成绩、数学成绩和英语成绩。</p><p><code>Score</code> 类的初始化即给这五个变量赋值。为了便于排序，需要实现 <code>Comparable</code> 接口，重写 <code>compareTo</code> 方法，内容就是排序的规则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h19.q05;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Score</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> totalScore;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> chineseScore;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mathScore;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> englishScore;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Score</span><span class="params">(String name, <span class="keyword">int</span> chineseScore, <span class="keyword">int</span> mathScore, <span class="keyword">int</span> englishScore, <span class="keyword">int</span> totalScore)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.chineseScore = chineseScore;</span><br><span class="line">        <span class="keyword">this</span>.mathScore = mathScore;</span><br><span class="line">        <span class="keyword">this</span>.englishScore = englishScore;</span><br><span class="line">        <span class="keyword">this</span>.totalScore = totalScore;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Score)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.totalScore &gt; ((Score) o).totalScore) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.totalScore &lt; ((Score) o).totalScore) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.chineseScore &gt; ((Score) o).chineseScore) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.chineseScore &lt; ((Score) o).chineseScore) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.mathScore &gt; ((Score) o).mathScore) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.mathScore &lt; ((Score) o).mathScore) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(<span class="keyword">this</span>.englishScore, ((Score) o).englishScore);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x02-比较器-ScoreComparator"><a href="#0x02-比较器-ScoreComparator" class="headerlink" title="0x02 比较器 ScoreComparator"></a>0x02 比较器 <code>ScoreComparator</code></h2><p>实现 <code>Comparator</code> 接口，重写 <code>compare</code> 方法。</p><p>为增强可扩展性，定义了排序方式（升序/降序）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h19.q05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScoreComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Score</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1 asc</span></span><br><span class="line"><span class="comment">     * -1 des</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> order;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScoreComparator</span><span class="params">(<span class="keyword">int</span> order)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.order = order;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Score s1, Score s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = s1.compareTo(s2);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.order == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x03-格式转换-initScoreLists"><a href="#0x03-格式转换-initScoreLists" class="headerlink" title="0x03 格式转换 initScoreLists"></a>0x03 格式转换 <code>initScoreLists</code></h2><p>上面获取了文本的一行为字符串数组，需要先转换为列表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> scoreLine 一行文本</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 0 姓名 1 语文 2 数学 3 英语 4 当前成绩</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">line2list</span><span class="params">(String[] scoreLine, List&lt;String&gt; scoreList)</span> </span>&#123;</span><br><span class="line">    String name = scoreLine[<span class="number">0</span>];</span><br><span class="line">    String object = scoreLine[<span class="number">1</span>];</span><br><span class="line">    String score = scoreLine[<span class="number">2</span>];</span><br><span class="line">    scoreList.set(<span class="number">0</span>, name);</span><br><span class="line">    scoreList.set(<span class="number">4</span>, score);</span><br><span class="line">    <span class="keyword">switch</span> (object) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;语文&quot;</span>:</span><br><span class="line">            scoreList.set(<span class="number">1</span>, score);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;数学&quot;</span>:</span><br><span class="line">            scoreList.set(<span class="number">2</span>, score);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;英语&quot;</span>:</span><br><span class="line">            scoreList.set(<span class="number">3</span>, score);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在初始化 <code>Score</code> 类型列表时，重复遍历以找到当前学生的所有科目的成绩，并存放到对应位置、计算总成绩：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Score&gt; <span class="title">initScoreLists</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    List&lt;String[]&gt; scores = readLines(filename);</span><br><span class="line">    Set&lt;String&gt; nameSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    List&lt;Score&gt; scoreList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; scores.size(); i++) &#123;</span><br><span class="line">        String name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> totalScore = <span class="number">0</span>, chineseScore = <span class="number">0</span>, mathScore = <span class="number">0</span>, englishScore = <span class="number">0</span>;</span><br><span class="line">        List&lt;String&gt; scoreLine = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">&quot;&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span>));</span><br><span class="line">        line2list(scores.get(i), scoreLine);</span><br><span class="line">        name = scoreLine.get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (nameSet.contains(name)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nameSet.add(name);</span><br><span class="line">        &#125;</span><br><span class="line">        totalScore += Integer.parseInt(scoreLine.get(<span class="number">4</span>));</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; scores.size(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (scores.get(j)[<span class="number">0</span>].equals(name)) &#123;</span><br><span class="line">                line2list(scores.get(j), scoreLine);</span><br><span class="line">                totalScore += Integer.parseInt(scoreLine.get(<span class="number">4</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        chineseScore = Integer.parseInt(scoreLine.get(<span class="number">1</span>));</span><br><span class="line">        mathScore = Integer.parseInt(scoreLine.get(<span class="number">2</span>));</span><br><span class="line">        englishScore = Integer.parseInt(scoreLine.get(<span class="number">3</span>));</span><br><span class="line">        Score score = <span class="keyword">new</span> Score(name, chineseScore, mathScore, englishScore, totalScore);</span><br><span class="line">        scoreList.add(score);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> scoreList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x04-排序-sort"><a href="#0x04-排序-sort" class="headerlink" title="0x04 排序 sort"></a>0x04 排序 <code>sort</code></h2><p>降序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">sort</span><span class="params">(String filename)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;Score&gt; scoreLists = initScoreLists(filename);</span><br><span class="line">    scoreLists.sort(<span class="keyword">new</span> ScoreComparator(-<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; scoreLists.size(); i++) &#123;</span><br><span class="line">        result.add(scoreLists.get(i).getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;OOP h19&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.superpung.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 多线程练习</title>
    <link href="https://blog.superpung.xyz/oop-h15/"/>
    <id>https://blog.superpung.xyz/oop-h15/</id>
    <published>2021-04-07T08:32:23.000Z</published>
    <updated>2021-05-01T06:08:57.068Z</updated>
    
    <content type="html"><![CDATA[<p>OOP h15</p><a id="more"></a><h1 id="0x00-ThreadUtil"><a href="#0x00-ThreadUtil" class="headerlink" title="0x00 ThreadUtil"></a>0x00 <code>ThreadUtil</code></h1><div class="note info"><p>测试程序输入一个 StringBuffer，刚输入的时候 StringBuffer 值为空，等待1000 ms 后，这个 StringBuffer 的值变为 “ok”。</p></div><p>传入 StringBuffer 时不能赋值，1000 ms 后赋值完成，所以赋值需要在 0～1000 ms 内进行。</p><p>采用多线程的方式，继承 <code>Thread</code> 类，重写 <code>run</code> 方法，睡眠 100 ms 再赋值。需要声明 StringBuffer 类型成员变量，便于在 <code>run</code> 中赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h15;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadUtil</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringBuffer buffer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadUtil</span><span class="params">(StringBuffer buf)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.buffer = buf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.buffer.append(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x01-PrimeUtil"><a href="#0x01-PrimeUtil" class="headerlink" title="0x01 PrimeUtil"></a>0x01 <code>PrimeUtil</code></h1><div class="note info"><p>多线程方式，统计 [start,end) 区间所有的质数，并且从小到大排序返回。</p></div><p>采用多线程的方式，所以应为单独一个线程创建类 <code>PrimeThread</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h15;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimeThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> start;<span class="comment">// 区间开始位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> end;<span class="comment">// 区间结束位置</span></span><br><span class="line">  <span class="comment">// 构造方法赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PrimeThread</span><span class="params">(<span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 找质数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Long&gt; <span class="title">getPrime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> i;</span><br><span class="line">        List&lt;Long&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="keyword">this</span>.start; i &lt; <span class="keyword">this</span>.end; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isPrime(i)) &#123;</span><br><span class="line">                result.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 判断质数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">long</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= Math.sqrt(num); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num % i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到 <code>PrimeUtil</code>，传入的参数 <code>threadCount</code> 指明了线程数，所以需要创建大小为 <code>threadCount</code> 的 <code>PrimeThread</code> 类型数组，每个元素计算对应长度的值，创建对象、<code>start</code> 开始计算。</p><p>最终 <code>join</code> 到一起，<code>addAll</code> 得到结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h15;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimeUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PrimeUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Long&gt; <span class="title">getPrimeList</span><span class="params">(<span class="keyword">long</span> start, <span class="keyword">long</span> end, <span class="keyword">int</span> threadCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        List&lt;Long&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        PrimeThread[] threads = <span class="keyword">new</span> PrimeThread[threadCount];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> threadStart = start + (end - start) / threadCount * i;</span><br><span class="line">            <span class="keyword">long</span> threadEnd = start + (end - start) / threadCount * (i + <span class="number">1</span>);</span><br><span class="line">            threads[i] = <span class="keyword">new</span> PrimeThread(threadStart, threadEnd);</span><br><span class="line">            threads[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                threads[i].join();</span><br><span class="line">                result.addAll(threads[i].getPrime());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning"><p>上述方法错在哪里？（未 override run 方法）</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h15;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimeThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> end;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PrimeThread</span><span class="params">(<span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Long&gt; <span class="title">getPrime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">long</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= Math.sqrt(num); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num % i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="keyword">this</span>.start; i &lt; <span class="keyword">this</span>.end; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isPrime(i)) &#123;</span><br><span class="line">                result.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;OOP h15&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.superpung.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 文件练习（名单）</title>
    <link href="https://blog.superpung.xyz/oop-h14/"/>
    <id>https://blog.superpung.xyz/oop-h14/</id>
    <published>2021-04-07T07:18:39.000Z</published>
    <updated>2021-04-07T09:44:55.876Z</updated>
    
    <content type="html"><![CDATA[<p>OOP h14</p><a id="more"></a><div class="note info"><p>现在所有学生的名单 students.txt（为了避免乱码问题，文件中不包含汉字），其中每行为一个学生信息，包括学号、姓名、班级，以 tab 符号分割(\t)。</p><p>学院要求所有同学把自己一寸照片发给辅导员，图片命名规则为 “学号.jpg” </p><p>现在存在下列问题，请用编程的方式帮助辅导员解决如下问题：</p><ol><li>找出哪些同学没有交照片； </li><li>在目标目录下每个班级建立一个子目录，把上交的同学的照片，统一按 学号_姓名.jpg 方式拷贝到各自班级目录下，原来的文件不要删除。</li></ol><p>实际测试中，文件存放位置可能改变，学生数量也可能改变。</p></div><p>txt 文件给出了学生名单，某文件夹下是学生上交的图片。</p><p>首先读取 txt 文件，每行为一个字符串数组，所有行组成一个列表；读取文件夹，获得有效的文件名，组成字符串列表，然后进一步判断。</p><h1 id="0x00-getNameList"><a href="#0x00-getNameList" class="headerlink" title="0x00 getNameList"></a>0x00 <code>getNameList</code></h1><p>按行读取 txt 文件，按 <code>\t</code> 分隔，按格式存储信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String[]&gt; getNameList(String filename) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">String line = <span class="string">&quot;&quot;</span>;</span><br><span class="line">Reader reader;</span><br><span class="line">List&lt;String[]&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">reader = <span class="keyword">new</span> FileReader(filename);</span><br><span class="line">LineNumberReader lineReader = <span class="keyword">new</span> LineNumberReader(reader);</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">line = lineReader.readLine();</span><br><span class="line"><span class="keyword">if</span> (line == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">result.add(line.split(<span class="string">&quot;\t&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x01-getValidFileIdList"><a href="#0x01-getValidFileIdList" class="headerlink" title="0x01 getValidFileIdList"></a>0x01 <code>getValidFileIdList</code></h1><p>获取文件夹下有效的文件名（学号）列表。</p><p>传入参数为目录，用 <code>listFiles</code> 列出目录下的所有文件，然后遍历这些文件，取文件名，若符合学号的标准则存储，最终返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getValidFileIdList</span><span class="params">(String filename)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">File file = <span class="keyword">new</span> File(filename);</span><br><span class="line">File[] fileList = file.listFiles();</span><br><span class="line"><span class="keyword">if</span> (fileList == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (File fileEle : fileList) &#123;</span><br><span class="line">String name = fileEle.getName();</span><br><span class="line"><span class="keyword">if</span> (name.matches(<span class="string">&quot;[0-9]&#123;10&#125;.jpg&quot;</span>)) &#123;</span><br><span class="line">result.add(name.substring(<span class="number">0</span>, <span class="number">10</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x02-copyFile"><a href="#0x02-copyFile" class="headerlink" title="0x02 copyFile"></a>0x02 <code>copyFile</code></h1><p>拷贝文件方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 复制IO流</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> in</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> out</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyIO</span><span class="params">(InputStream in, OutputStream out)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[CHUNK_SIZE];</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从输入流读取内容并写入到另外一个流的典型方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> len = in.read(buf);</span><br><span class="line"><span class="keyword">while</span> (len != -<span class="number">1</span>) &#123;</span><br><span class="line">out.write(buf, <span class="number">0</span>, len);</span><br><span class="line">len = in.read(buf);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 复制文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fsrc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fdest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(String fsrc, String fdest)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">InputStream in = <span class="keyword">null</span>;</span><br><span class="line">OutputStream out = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">in = <span class="keyword">new</span> FileInputStream(fsrc);</span><br><span class="line">out = <span class="keyword">new</span> FileOutputStream(fdest, <span class="keyword">true</span>);</span><br><span class="line">copyIO(in, out);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">close(in);</span><br><span class="line">close(out);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭一个输入 输出流</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inout</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Closeable inout)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (inout != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">inout.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x03-copyToTargetDirAndReturnNoExist"><a href="#0x03-copyToTargetDirAndReturnNoExist" class="headerlink" title="0x03 copyToTargetDirAndReturnNoExist"></a>0x03 <code>copyToTargetDirAndReturnNoExist</code></h1><div class="note info"><p>找到未交照片的学生，并将已交照片拷贝至指定目录且重命名。</p></div><p>由于拷贝的目标目录下还需建立班级子目录，所以可以遍历名单，若对应的班级文件夹不存在则创建。</p><p>遍历名单，若对应的学号在已交文件名列表中不存在，则将其姓名加入未交照片列表，否则拷贝其对应的文件。</p><div class="note warning"><p>注意文件的扩展名以及目录的斜杠等细节。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">copyToTargetDirAndReturnNoExist</span><span class="params">(String studentListFile,String srcDir,String target)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">List&lt;String[]&gt; nameList = getNameList(studentListFile);</span><br><span class="line">List&lt;String&gt; fileIdList = getValidFileIdList(srcDir);</span><br><span class="line">Set&lt;String&gt; noExistIdSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String[] stu : nameList) &#123;</span><br><span class="line">File targetDir = <span class="keyword">new</span> File(target, stu[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">if</span> (!targetDir.exists()) &#123;</span><br><span class="line">targetDir.mkdirs();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nameList.size(); i++) &#123;</span><br><span class="line">String id = nameList.get(i)[<span class="number">0</span>];</span><br><span class="line">String name = nameList.get(i)[<span class="number">1</span>];</span><br><span class="line">String classNo = nameList.get(i)[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!fileIdList.contains(id)) &#123;</span><br><span class="line">noExistIdSet.add(id);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">String srcPath = srcDir + id + <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">String targetPath = target + classNo + <span class="string">&quot;/&quot;</span> + id + <span class="string">&quot;_&quot;</span> + name + <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">copyFile(srcPath, targetPath);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> noExistIdSet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x04-完整代码"><a href="#0x04-完整代码" class="headerlink" title="0x04 完整代码"></a>0x04 完整代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h14;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在本包下增加合适的类和方法， 本程序不但要测试通过，还需要写适当的注释</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 不要引用jdk1.8以外第三方的包</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTools</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> CHUNK_SIZE = <span class="number">4096</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyTools</span><span class="params">( )</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> studentListFile  存放学生名单的文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> srcDir 图片存放的目录（不会包含子目录）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">copyToTargetDirAndReturnNoExist</span><span class="params">(String studentListFile,String srcDir,String target)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">List&lt;String[]&gt; nameList = getNameList(studentListFile);</span><br><span class="line">List&lt;String&gt; fileIdList = getValidFileIdList(srcDir);</span><br><span class="line">Set&lt;String&gt; noExistIdSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String[] stu : nameList) &#123;</span><br><span class="line">File targetDir = <span class="keyword">new</span> File(target, stu[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">if</span> (!targetDir.exists()) &#123;</span><br><span class="line">targetDir.mkdirs();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nameList.size(); i++) &#123;</span><br><span class="line">String id = nameList.get(i)[<span class="number">0</span>];</span><br><span class="line">String name = nameList.get(i)[<span class="number">1</span>];</span><br><span class="line">String classNo = nameList.get(i)[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!fileIdList.contains(id)) &#123;</span><br><span class="line">noExistIdSet.add(id);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">String srcPath = srcDir + id + <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">String targetPath = target + classNo + <span class="string">&quot;/&quot;</span> + id + <span class="string">&quot;_&quot;</span> + name + <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">copyFile(srcPath, targetPath);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> noExistIdSet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filename</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> FileNotFoundException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getValidFileIdList</span><span class="params">(String filename)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">File file = <span class="keyword">new</span> File(filename);</span><br><span class="line">File[] fileList = file.listFiles();</span><br><span class="line"><span class="keyword">if</span> (fileList == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (File fileEle : fileList) &#123;</span><br><span class="line">String name = fileEle.getName();</span><br><span class="line"><span class="keyword">if</span> (name.matches(<span class="string">&quot;[0-9]&#123;10&#125;.jpg&quot;</span>)) &#123;</span><br><span class="line">result.add(name.substring(<span class="number">0</span>, <span class="number">10</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filename</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;String[]&gt; getNameList(String filename) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">String line = <span class="string">&quot;&quot;</span>;</span><br><span class="line">Reader reader;</span><br><span class="line">List&lt;String[]&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">reader = <span class="keyword">new</span> FileReader(filename);</span><br><span class="line">LineNumberReader lineReader = <span class="keyword">new</span> LineNumberReader(reader);</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">line = lineReader.readLine();</span><br><span class="line"><span class="keyword">if</span> (line == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">result.add(line.split(<span class="string">&quot;\t&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 复制IO流</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> in</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> out</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyIO</span><span class="params">(InputStream in, OutputStream out)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[CHUNK_SIZE];</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从输入流读取内容并写入到另外一个流的典型方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> len = in.read(buf);</span><br><span class="line"><span class="keyword">while</span> (len != -<span class="number">1</span>) &#123;</span><br><span class="line">out.write(buf, <span class="number">0</span>, len);</span><br><span class="line">len = in.read(buf);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 复制文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fsrc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fdest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(String fsrc, String fdest)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">InputStream in = <span class="keyword">null</span>;</span><br><span class="line">OutputStream out = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">in = <span class="keyword">new</span> FileInputStream(fsrc);</span><br><span class="line">out = <span class="keyword">new</span> FileOutputStream(fdest, <span class="keyword">true</span>);</span><br><span class="line">copyIO(in, out);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">close(in);</span><br><span class="line">close(out);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭一个输入 输出流</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inout</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Closeable inout)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (inout != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">inout.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;OOP h14&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.superpung.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 文件练习（红楼梦）</title>
    <link href="https://blog.superpung.xyz/oop-h13/"/>
    <id>https://blog.superpung.xyz/oop-h13/</id>
    <published>2021-04-07T07:18:33.000Z</published>
    <updated>2021-04-07T08:29:26.958Z</updated>
    
    <content type="html"><![CDATA[<p>OOP h13</p><a id="more"></a><div class="note info"><p>现在有一个文本文件 red.txt（其格式和内容见 red.txt），里面存放了红楼梦 120 回的内容：</p><p>请完成 Analysis 类，增加完成适当的方法，使得该程序可以完成如下功能：</p><ol><li>统计任意词在红楼梦中每回出现的频率：getStringFrequent(str)</li><li>不考虑空格、回车、所有标点符号、制表符的情况下，统计整个红楼梦中 topN 的两个字的组合： getTopNWords(n)</li></ol><p>参考的输出结果见：参考运行结果</p><p>提示：Analysis 中已经有了 readFromTxt（不要修改这个方法，否则可能会读出乱码）和将红楼梦拆分为 120 回的方法。 将小说分成 120 个章节的时候，不用过分纠结小说中的干扰字符，例如： 手机电子书·大学生小说网…….更新时间:2006-7-26 11:43:00 本章字数:6394 等等</p></div><p>需要完成的有构造方法、统计频率和统计最高频词。</p><h1 id="0x00-Analysis"><a href="#0x00-Analysis" class="headerlink" title="0x00 Analysis"></a>0x00 Analysis</h1><p>构造方法传参数为文件地址，需要调用给出的 <code>readFromTxt</code> 方法读取文件，返回一个字符串。</p><p>由于后续操作需要分章节，所以在此处可以调用 <code>splitContentToChapter</code> 拆分章节，存放到字符串数组中。</p><div class="note warning"><p>注意，后续统计均忽略空格、回车、所有标点符号和制表符，为此需要将这些特殊字符存放起来用于后续判断。我将所有标点符号用正则表达式替换为空格，然后存放空格、回车和制表符为需要忽略的字符。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String[] chapters;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Character&gt; ignoreChar = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\t&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Analysis</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String text = readFromTxt(filename);</span><br><span class="line">text = text.replaceAll(<span class="string">&quot;[\\pP‘’“”]&quot;</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="keyword">this</span>.chapters = splitContentToChapter(text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x01-getStringFrequent"><a href="#0x01-getStringFrequent" class="headerlink" title="0x01 getStringFrequent"></a>0x01 <code>getStringFrequent</code></h1><div class="note info"><p>统计每章节某字符串出现的次数。</p></div><p>共 120 章，所以建立大小为 120 的数组，第 i 个元素就是该字符串在第 i 章出现的次数。</p><div class="note warning"><p>注意需要统计的字符串长度不定。</p></div><p>因为上面拆分出来的字符串数组第 0 个元素为第一章之前的部分，所以循环从 1（第一章）开始，循环 120 次，对于每一次循环，遍历该章节的字符串，并取子串比较，若相等则自增 1。（此处可优化）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] getStringFrequent(String str) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">int</span>[] counts = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">120</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.chapters.length &gt; <span class="number">121</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;拆分的章节数量不对&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">int</span> length = str.length();</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.chapters.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">String content = <span class="keyword">this</span>.chapters[i];</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; content.length() + <span class="number">1</span> - length; j++) &#123;</span><br><span class="line">String contentStr = content.substring(j, j + length);</span><br><span class="line"><span class="keyword">if</span> (str.equals(contentStr)) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">counts[i - <span class="number">1</span>] = count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> counts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x02-getTopNWords"><a href="#0x02-getTopNWords" class="headerlink" title="0x02 getTopNWords"></a>0x02 <code>getTopNWords</code></h1><div class="note info"><p>返回红楼梦中出现频率最高的 N 个词，频率从高到低排列（所谓词就是两个相邻的汉字）。</p></div><p>同样，和之前做过的作业类似，用哈希映射，把所有词作为键存放其中，其出现的频率作为值，最后排个序。</p><p>如果统计过程中遇到需要忽略的字符，则跳过。</p><p>最终存放前 n 个键，即为高频词。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getTopNWords</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">List&lt;Map.Entry&lt;String, Integer&gt;&gt; mapList;</span><br><span class="line">List&lt;String&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.chapters.length; i++)&#123;</span><br><span class="line">String content = <span class="keyword">this</span>.chapters[i];</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; content.length() - <span class="number">1</span>; j++) &#123;</span><br><span class="line">String str = content.substring(j, j + <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (ignoreChar.contains(str.charAt(<span class="number">0</span>)) || ignoreChar.contains(str.charAt(<span class="number">1</span>))) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line">count = map.getOrDefault(str, <span class="number">0</span>);</span><br><span class="line">map.put(str, count + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mapList = <span class="keyword">new</span> ArrayList&lt;&gt;(map.entrySet());</span><br><span class="line">mapList.sort((o1, o2) -&gt; o2.getValue().compareTo(o1.getValue()));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">ans.add(mapList.get(i).getKey());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x03-完整代码"><a href="#0x03-完整代码" class="headerlink" title="0x03 完整代码"></a>0x03 完整代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在本包下增加合适的类和方法，使得Test类能够测试通过 </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 不要引用jdk1.8以外第三方的包</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Analysis</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String[] chapters;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Character&gt; ignoreChar = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\t&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Analysis</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String text = readFromTxt(filename);</span><br><span class="line">text = text.replaceAll(<span class="string">&quot;[\\pP‘’“”]&quot;</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="keyword">this</span>.chapters = splitContentToChapter(text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提示 ：将一个文本文件读取到一个字符串中返回</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filename 红楼梦文本文件的全路径名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 文本的内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">readFromTxt</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Reader reader = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">StringBuffer buf = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="comment">// InputStream in=new FileInputStream(filename);</span></span><br><span class="line"></span><br><span class="line">reader = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(filename), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> readed = reader.read(chars);</span><br><span class="line"><span class="keyword">while</span> (readed != -<span class="number">1</span>) &#123;</span><br><span class="line">buf.append(chars, <span class="number">0</span>, readed);</span><br><span class="line">readed = reader.read(chars);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> buf.toString();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">close(reader);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回红楼梦中出现频率最高的N个次，频率从高到低排列（所谓词就是两个相邻的汉字）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getTopNWords</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">List&lt;Map.Entry&lt;String, Integer&gt;&gt; mapList;</span><br><span class="line">List&lt;String&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.chapters.length; i++)&#123;</span><br><span class="line">String content = <span class="keyword">this</span>.chapters[i];</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; content.length() - <span class="number">1</span>; j++) &#123;</span><br><span class="line">String str = content.substring(j, j + <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (ignoreChar.contains(str.charAt(<span class="number">0</span>)) || ignoreChar.contains(str.charAt(<span class="number">1</span>))) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line">count = map.getOrDefault(str, <span class="number">0</span>);</span><br><span class="line">map.put(str, count + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mapList = <span class="keyword">new</span> ArrayList&lt;&gt;(map.entrySet());</span><br><span class="line">mapList.sort((o1, o2) -&gt; o2.getValue().compareTo(o1.getValue()));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">ans.add(mapList.get(i).getKey());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭输入输入流</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inout</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Closeable inout)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (inout != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">inout.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提示 将红楼梦文本文件拆分为120个章节的方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回120个元素的字符串数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String[] splitContentToChapter(String content) &#123;</span><br><span class="line"><span class="comment">// 提示 使用 content.split(&quot; 第[一,二,三,四,五,六,七,八,九,十,零]&#123;1,5&#125;回 &quot;);正则表达拆分</span></span><br><span class="line"><span class="comment">// 百度一下正则表达式</span></span><br><span class="line">String contents[] = content.split(<span class="string">&quot; 第[一,二,三,四,五,六,七,八,九,十,零]&#123;1,5&#125;回 &quot;</span>);</span><br><span class="line"><span class="keyword">return</span> contents;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统计红楼梦章节字符串str出现的频率</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] getStringFrequent(String str) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">int</span>[] counts = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">120</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.chapters.length &gt; <span class="number">121</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;拆分的章节数量不对&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">int</span> length = str.length();</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.chapters.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">String content = <span class="keyword">this</span>.chapters[i];</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; content.length() + <span class="number">1</span> - length; j++) &#123;</span><br><span class="line">String contentStr = content.substring(j, j + length);</span><br><span class="line"><span class="keyword">if</span> (str.equals(contentStr)) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">counts[i - <span class="number">1</span>] = count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> counts;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;OOP h13&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.superpung.xyz/tags/Java/"/>
    
  </entry>
  
</feed>
