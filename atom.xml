<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Super Blog</title>
  
  <subtitle>Follow Your Heart</subtitle>
  <link href="https://blog.superpung.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.superpung.cn/"/>
  <updated>2022-07-29T12:07:35.669Z</updated>
  <id>https://blog.superpung.cn/</id>
  
  <author>
    <name>SUPER</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Genius Bar 两日游</title>
    <link href="https://blog.superpung.cn/genius-bar/"/>
    <id>https://blog.superpung.cn/genius-bar/</id>
    <published>2022-07-29T12:03:18.000Z</published>
    <updated>2022-07-29T12:07:35.669Z</updated>
    
    <content type="html"><![CDATA[<p>在 MacBook Air 购买了一年半之后，它的键盘获得了重生。</p><a id="more"></a><p>起因是暑假在家时，突然发现 MacBook 的 fn 键和左 shift 键被卡住了，fn 键尤为严重，导致每次按 F12 都很别扭。<del>可能 fn 键的唯二作用就是 F12 和表情符号了吧。</del>初步怀疑可能是键盘缝隙进入了杂物，尝试了 <a href="https://support.apple.com/zh-cn/HT205662">Apple 推荐的做法</a>，并没有成功。于是准备去 Genius Bar 让天才们修理一下。</p><p>截至目前，天津一共有 3 家 Apple Store，分别是位于南开区的 <a href="https://www.apple.com.cn/retail/tianjinjoycity/">天津大悦城</a>、位于和平区的 <a href="https://www.apple.com.cn/retail/riverside66tianjin/">天津恒隆广场</a> 和位于河西区的 <a href="https://www.apple.com.cn/retail/mixctianjin/">天津万象城</a>。很不巧，最近河西区和南开区先后出现了疫情中高风险区域，为避免因为有“高中风险地区和高中风险区所在县（市、区、旗、直辖市为所在区）旅居史”，我不得不退掉比较容易到达的 Apple 天津大悦城的预约，预约了 Apple 天津恒隆广场。</p><p>预约 Genius Bar 很简单，在 Apple 官网选择故障类型、预约时间段等信息进行预约即可，如果没有预约可能会导致排不上班的情况。预约成功后会收到 Apple 发来的短信和邮件（提醒：为接受 Genius Bar 天才吧服务做好准备），还可以将预约码添加到钱包。取消预约也很简单，进入预约列表点击取消即可。整个预约过程都是免费的。</p><p>根据 Apple 的提示，去 Genius Bar 之前需要备份你的数据，我用 Time Machine 备份了一下。Apple 还提醒需要确保可以提供相关单据（带上身份证）并携带购买凭证。虽然 Apple 说“请务必携带购买凭证”，但我也找不到我的购买凭证了，事实证明最后也并没有要我出示它，Apple Store 可以直接查到你的购买信息。</p><p>24 日我如约 <a href="https://twitter.com/repusme/status/1551117378708455427">来到 Apple Store</a>，在门口签到后坐下等待安排给我的天才到来。对了，在官网预约时应该登录了你的 Apple ID，所以预约的姓名是你的 Apple ID 对应的姓名。几分钟后天才来了，让我拿出 MacBook，问我出现了什么问题。得知键盘问题后，他按了几下发现确实如此，说可以给换个键盘。同意后，他开始对 MacBook 进行检测，关掉了 Find My Mac（据说是为了连接到 Apple Store 的设备）。检测没什么问题，告知我现在键盘并没有现货，需要从上海调配才能给我换，需要一周内时间。我同意，然后他开了维修记录（Apple Store 工作授权），我签字后收到了副本邮件，有维修编号、客户信息、产品信息、问题说明 / 诊断、维修估价等信息。当然，维修估价共计 RMB 0。</p><p>第一日游并没有如愿修好我的 MacBook，我也把 MacBook 带回了。在 Apple Store 看到了春季新品，比如指纹收集器暗夜色 MacBook Air M2 和怀旧设计 MacBook Pro M2。指纹收集器是真的容易沾上指纹，显得尤为突兀。不过它的配色是我心目中最好看的 MacBook 配色。</p><p>回去之后，fn 键竟然似乎有些好转了，真是玄学。好几天过去了，Apple 并没有给我打电话，就在我以为 Apple 应该是不能如其到货了的昨天，Apple 打来了电话，问我什么时候有空去送修。我选择了上午的时间，然后就收到了短信和邮件。和前一次预约相同。天才让我做好备份，我又用 Time Machine 备份了一遍。</p><p>29 日我又如约 <a href="https://twitter.com/repusme/status/1552887350383894529">来到 Apple Store</a>，准确说来得稍早了一些，我又摸了一遍 Apple Store 的样机。不得不说，iPhone 13 Pro 和 iPhone 13 Pro Max 的 120 Hz 高刷真的震惊到我了，第一次认真体验才发现如此丝滑。我再拿起旁边的 iPhone 13 和 iPhone 13 mini，竟感觉如此卡顿……（不过多刷一会 60 Hz 也就习惯了）（反转了，后悔没有买 iPhone 13 Pro &gt;_&lt;）Mac Studio 是真的重。iMac 的大下巴是真的丑。MacBook Pro 16 英寸新款也丑，键盘的黑色底色尤为突兀，而且在那么大的 C 面上留那么小的键盘区域，感觉比例有些失调。</p><p>摸了半天，终于到我了。签到后又等着天才来找我，过来后又检测了一遍，和第一次来一样。最后签了字开了条就让我走了。理论上最快 4 小时可以换好，据天才说 M1 款的维修比 Intel 款的简单，而且维修后的检测时间也比 Intel 款的更短（0.5h &lt; 2~3h）。将信将疑下，他说最快今晚可以取回，比较稳妥是明天。一番交谈过后，我离开了 Apple Store（该吃午饭了）。</p><p>由于不想再浪费一天来个“三日游”，坐地铁时间还挺长的，我打算到处转转等今晚拿下。在 M 吃完午饭后回恒隆广场转了一圈，看到了无人问津的小米之家。体验了一下 12 S Ultra，<del>广告是真的多，</del>发现小米的触感反馈做得也很不错了，感觉比 iPhone 的触感体验还要好。恒隆广场挺大的，走一会我又回到了 Apple Store。过了一段时间 Apple 打来了电话，是下午 4:03，说我的 MacBook 修好了可以取货。看来天才诚不欺我，说 4 个小时就 4 个小时。等了一会后，天才拿着我的 MacBook 过来了，让我试一试键盘，试了一下挺好的<del>，像新的一样</del>。然后看了一下我的身份证，签字后就拿走了。</p><p>给我拿 iPad 的小哥让我印象深刻，他是一位听障人士，靠打字和我交流，能感受到他的紧张但很认真。很感动，致敬每一位努力生活的人，也致敬 Apple 强大的辅助功能为残障人士带来了科技的温暖。</p><p>回归正题，最后发现我的 MacBook 应该是整个 C 面都换新了，包括键盘和触控板，顺带给清洁了屏幕（忘了问天才是如何把屏幕清洁得这么干净的了）。<del>当然，最希望电池也能直接给换了，但并没有。</del>总之这次 Genius Bar 的体验还是很棒的，全过程没有任何数据丢失，0 成本（除去路费）九舍一入拿到了“全新”的 MacBook Air，感觉又可以再战几年了（希望 256 GB 硬盘能多撑一会）。</p><blockquote><p>怀念 2019 年在滨江道散步的夜晚，Apple 天津恒隆广场店人潮涌动（当时靠马路边的门是开的），那种景象大抵是回不去了罢。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 MacBook Air 购买了一年半之后，它的键盘获得了重生。&lt;/p&gt;</summary>
    
    
    
    
    <category term="记录" scheme="https://blog.superpung.cn/tags/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Apple" scheme="https://blog.superpung.cn/tags/Apple/"/>
    
  </entry>
  
  <entry>
    <title>实训小记</title>
    <link href="https://blog.superpung.cn/training-report/"/>
    <id>https://blog.superpung.cn/training-report/</id>
    <published>2022-06-18T03:15:23.000Z</published>
    <updated>2022-06-18T03:34:29.671Z</updated>
    
    <content type="html"><![CDATA[<p>简单记录一下一个多月的“实训”。</p><a id="more"></a><h2 id="1-Linux-虚拟网络基础"><a href="#1-Linux-虚拟网络基础" class="headerlink" title="1 Linux 虚拟网络基础"></a>1 Linux 虚拟网络基础</h2><h3 id="1-1-tap"><a href="#1-1-tap" class="headerlink" title="1.1 tap"></a>1.1 tap</h3><p>tap 和 tun 是操作系统内核中的虚拟网络设备，tap 位于二层，tun 位于三层。它们的数据结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tun_struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">8</span>];                <span class="comment">// 设备名</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;         <span class="comment">// 区分tun和tap设备</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fasync_struct</span> *<span class="title">fasync</span>;</span> <span class="comment">// 文件异步通知结构</span></span><br><span class="line">    <span class="keyword">wait_queue_head_t</span> read_wait; <span class="comment">// 等待队列</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_device</span> <span class="title">dev</span>;</span>       <span class="comment">// Linux抽象网络设备结构</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sk_buff_head</span> <span class="title">txq</span>;</span>     <span class="comment">// 网络缓冲区队列</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">net_device_stats</span> <span class="title">stats</span>;</span> <span class="comment">// 网卡状态信息结构</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>tap 和 tun 的数据结构定义相同，两者仅通过一个 Flag 来区分。但二者承载的功能区别很大：</p><ul><li>tap 位于网络 OSI 模型的二层（数据链路层）</li><li>tun 位于网络的三层</li></ul><p>tap 从功能定位上来讲，位于数据链路层，数据链路层的主要协议有：</p><ol><li>点对点协议（Point-to-Point Protocol）</li><li>以太网（Ethernet）</li><li>高级数据链路协议（High-Level Data Link Protocol）</li><li>帧中继（Frame Relay）</li><li>异步传输模式（Asynchronous Transfer Mode）</li></ol><p>tap 只与其中一种协议——以太网（Ethernet）协议对应。所以 tap 有时也称为“虚拟以太设备”。</p><p>创建 tap 的方法：</p><ol><li>Linux 使用 tun 模块实现了 tun/tap，所以首先 Linux 得有 tun 模块，使用 <code>modinfo tun</code> 检查</li><li>使用 <code>lsmod | grep tuntun</code> 检查 tun 模块是否已经加载</li><li>确认 Linux 是否有操作 tun/tap 的命令行工具 tunctl，安装方式 <code>yum install tunctl</code></li><li>创建一个 tap 设备：<code>tunctl -t tap_test</code></li><li>查看刚刚创建的 tap：<code>ip link list</code> 或 <code>ifconfig -a</code></li><li>绑定IP地址：<code>ip addr add local 192.168.100.1/24 dev tap_test</code> 或 <code>ifconfig tap_test 192.168.100.1/24</code></li><li>创建完成</li></ol><h3 id="1-2-namespace"><a href="#1-2-namespace" class="headerlink" title="1.2 namespace"></a>1.2 namespace</h3><p>传统的 Linux 的许多资源是全局的，namespace 的目的首先就是将这些资源做资源隔离。Linux 可以在一个 Host 内创建许多 namespace，不同 namespace 的资源互相不可见、彼此透明。namespace 示意图如下所示：</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/r-1-2-1.png"></p><p>从网络的视角来看，一个 namespace 提供了一份独立的网络协议栈（网络设备接口、IPv4、IPv6、IP路由、防火墙规则、sockets 等）。一个设备（Linux Device）只能位于一个 namespace 中，不同 namespace 中的设备可以利用 veth  pair 进行桥接。</p><p>namespace 操作：</p><ol><li>查看当前的 namespace 列表：<code>ip netns list</code></li><li>创建一个 namespace，名字是 ns_test：<code>ip netns add ns_test</code></li><li>把原来创建的虚拟设备 tap_test 迁移到这个 namespace 里去：<code>ip link set tap_test netns ns_test</code></li><li>查看或操作 namespace 里面的设备：<code>ip [-all] netns exec [NAME] cmd ...</code></li></ol><h3 id="1-3-veth-pair"><a href="#1-3-veth-pair" class="headerlink" title="1.3 veth pair"></a>1.3 veth pair</h3><p>veth  pair 不是一个设备，而是一对设备，以连接两个虚拟以太端口。操作 veth  pair，需要跟 namespace 一起配合，否则没有意义。</p><p>veth pair 简单示例：</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/r-1-3-1.png"></p><p>创建简单示例：</p><ol><li>创建 veth pair：<code>ip link add tap1 type veth peer name tap2</code></li><li>创建 namespace：<code>ip netns add ns1ip netns add ns2</code></li><li>把两个 tap 分别迁移到对应的 namespace 中：<code>ip link set tap1 netns ns1ip link set tap2 netns ns2</code></li><li>分别给两个 tap 绑定 IP 地址：<code>ip netns exec ns1 ip addr add local 192.168.50.1/24 dev tap1</code>、<code>ip netns exec ns2 ip addr add local 192.168.50.2/24 dev tap2</code></li><li>将两个 tap 设置为 up：<code>ip netns exec ns1 ifconfig tap1 up</code>、<code>ip netns exec ns2 ifconfig tap2 up</code></li><li>ping：<code>ip netns exec ns2 ping 192.168.50.1</code>、<code>ip netns exec ns1 ping 192.168.50.2</code></li></ol><h3 id="1-4-Bridge"><a href="#1-4-Bridge" class="headerlink" title="1.4 Bridge"></a>1.4 Bridge</h3><p>Linux 中 Bridge（网桥）即为 Switch（交换机）。Linux 实现 Bridge 功能的是 brctl 模块，相关用法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">brctlUsage: brctl [commands]</span><br><span class="line">commands:</span><br><span class="line">addbr         &lt;bridge&gt;              add bridge</span><br><span class="line">    delbr         &lt;bridge&gt;              delete bridge</span><br><span class="line">    addif         &lt;bridge&gt; &lt;device&gt;     add interface to bridge</span><br><span class="line">    delif         &lt;bridge&gt; &lt;device&gt;     delete interface from bridge</span><br><span class="line">    hairpin       &lt;bridge&gt; &lt;port&gt; &#123;on|off&#125;     turn hairpin on/off</span><br><span class="line">    setageing     &lt;bridge&gt; &lt;time&gt;              <span class="built_in">set</span> ageing time</span><br><span class="line">    setbridgeprio &lt;bridge&gt; &lt;prio&gt;              <span class="built_in">set</span> bridge priority</span><br><span class="line">    setfd         &lt;bridge&gt; &lt;time&gt;              <span class="built_in">set</span> bridge forward delay</span><br><span class="line">    sethello      &lt;bridge&gt; &lt;time&gt;              <span class="built_in">set</span> hello time</span><br><span class="line">    setmaxage     &lt;bridge&gt; &lt;time&gt;              <span class="built_in">set</span> max message age</span><br><span class="line">    setpathcost   &lt;bridge&gt; &lt;port&gt; &lt;cost&gt;       <span class="built_in">set</span> path cost</span><br><span class="line">    setportprio   &lt;bridge&gt; &lt;port&gt; &lt;prio&gt;       <span class="built_in">set</span> port priority</span><br><span class="line">    show          [ &lt;bridge&gt; ]          show a list of bridges</span><br><span class="line">    showmacs      &lt;bridge&gt;              show a list of mac addrs</span><br><span class="line">    showstp       &lt;bridge&gt;              show bridge stp info</span><br><span class="line">    stp           &lt;bridge&gt; &#123;on|off&#125;     turn stp on/off</span><br></pre></td></tr></table></figure><p>veth pair 综合示例：</p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/r-1-4-1.png" style="zoom:50%;" /><p>实现这个用例：</p><ol><li>创建 veth pair：<code>ip link add tap1 type veth peer name tap1_peer</code>、<code>ip link add tap2 type veth peer name tap2_peer</code>、<code>ip link add tap3 type veth peer name tap3_peer</code>、<code>ip link add tap4 type veth peer name tap4_peer</code></li><li>创建 namespace：<code>ip netns add ns1</code>、<code>ip netns add ns2</code>、<code>ip netns add ns3</code>、<code>ip netns add ns4</code></li><li>把 tap 迁移到相应 namespace 中：<code>ip link set tap1 netns ns1</code>、<code>ip link set tap2 netns ns2</code>、<code>ip link set tap3 netns ns3</code>、<code>ip link set tap4 netns ns4</code></li><li>创建 Bridge：<code>brctl addbr br1</code></li><li>把相应 tap 添加到 Bridge 中：<code>brctl addif br1 tap1_peer</code>、<code>brctl addif br1 tap2_peer</code>、<code>brctl addif br1 tap3_peer</code>、<code>brctl addif br1 tap4_peer</code></li><li>配置相应 tap 的 IP 地址：<code>ip netns exec ns1 ip addr add local 192.168.50.1/24 dev tap1</code>、<code>ip netns exec ns2 ip addr add local 192.168.50.2/24 dev tap2</code>、<code>ip netns exec ns3 ip addr add local 192.168.50.3/24 dev tap3</code>、<code>ip netns exec ns4 ip addr add local 192.168.50.4/24 dev tap4</code></li><li>将 Bridge 及所有 tap 状态设置为 up：<code>ip link set br1 up</code>、<code>ip link set tap1_peer up</code>、<code>ip link set tap2_peer up</code></li></ol><h3 id="1-5-Router"><a href="#1-5-Router" class="headerlink" title="1.5 Router"></a>1.5 Router</h3><p>Linux 就是路由器（Router），修改配置文件 “/etc/sysctl.conf”， 将 <code>net.ipv4.ip_forward = 0</code> 修改为 <code>1</code>，保存后退出，即打开了路由转发功能。</p><p>查看路由表：<code>route -nee</code>，添加静态路由：<code>route add -net [ip] netmask [netmask] gw [gateway]</code>。</p><h3 id="1-6-tun"><a href="#1-6-tun" class="headerlink" title="1.6 tun"></a>1.6 tun</h3><p>tun 是一个网络层（IP）的点对点设备，它启用了 IP 层隧道功能。Linux 原生支持的三层隧道，可以通过命令行 <code>ip tunnel help</code> 查看：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ip tunnel <span class="built_in">help</span></span><br><span class="line">Usage: ip tunnel &#123; add | change | del | show | prl | 6rd &#125; [ NAME ]</span><br><span class="line">[ mode &#123; ipip | gre | sit | isatap | vti &#125; ] [ remote ADDR ] [ <span class="built_in">local</span> ADDR ]</span><br><span class="line">    [ [i|o]seq ] [ [i|o]key KEY ] [ [i|o]csum ]</span><br><span class="line">    [ prl-default ADDR ] [ prl-nodefault ADDR ] [ prl-delete ADDR ]</span><br><span class="line">    [ 6rd-prefix ADDR ] [ 6rd-relay_prefix ADDR ] [ 6rd-reset ]</span><br><span class="line">    [ ttl TTL ] [ tos TOS ] [ [no]pmtudisc ] [ dev PHYS_DEV ]</span><br><span class="line">Where: NAME := STRING</span><br><span class="line">ADDR := &#123; IP_ADDRESS | any &#125;</span><br><span class="line">    TOS  := &#123; STRING | 00..ff | inherit | inherit/STRING | inherit/00..ff &#125;</span><br><span class="line">    TTL  := &#123; 1..255 | inherit &#125;</span><br><span class="line">    KEY  := &#123; DOTTED_QUAD | NUMBER &#125;</span><br></pre></td></tr></table></figure><p>可以看到，Linux 一共原生支持 5 种三层隧道（tunnel）：</p><table><thead><tr><th>隧道</th><th>简述</th></tr></thead><tbody><tr><td>ipip</td><td>IP in IP，在 IPv4 报文的基础上再封装一个 IPv4 报文头，属于IPv4 in IPv4</td></tr><tr><td>gre</td><td>通用路由封装（Generic Routing Encapsulation），定义了在任意一种网络层协议上封装任意一个其他网络层协议的协议，属于 IPv4/IPv6 over IPv4</td></tr><tr><td>sit</td><td>这个跟 ipip 类似，只不过是用一个 IPv4 的报文头封装 IPv6 的报文，属于 IPv6 over IPv4</td></tr><tr><td>isatap</td><td>站内自动隧道寻址协议，一般用于 IPv4 网络中的 IPv6/IPv4 节点间的通信</td></tr><tr><td>vti</td><td>全称是 Virtual Tunnel Interface，为 IPsec 隧道提供了一个可路由的接口类型</td></tr></tbody></table><h3 id="1-7-iptables"><a href="#1-7-iptables" class="headerlink" title="1.7 iptables"></a>1.7 iptables</h3><p>通过 iptables 相关的命令行，可以实现了防火墙、NAT 的功能，而这种功能的实现是通过运行在内核空间的 netfilter 模块完成的，它们之间的关系如下所示：</p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/r-1-7-1.png" style="zoom:50%;" /><p>iptables 内置了三张表：filter、nat 和 mangle。filter 和 nat 是为了实现防火墙和 NAT 功能而服务的，mangle 主要应用在修改数据包内容上，用来做流量整形。iptables 还内置了另外 2 张表 raw 和 security，这里不详细介绍了。</p><p>iptables 内置的既是三张表，也是三条链（chain），也是三种策略（policy），这些策略由不同规则（rule）串接而成。</p><p><code>iptables -A INPUT -i eth0 -p icmp -j ACCEPT</code> 这条规则表达的意思是：允许所有从eth0 端口进入且协议是 ICMP 的报文可以接受（可以进入下一个流程）的。</p><h4 id="1-7-1-NAT"><a href="#1-7-1-NAT" class="headerlink" title="1.7.1 NAT"></a>1.7.1 NAT</h4><p>NAT（Network Address Translation，网络地址转换），顾名思义，就是从一个 IP 地址转换为另一个 IP 地址。当然，这里面的根本原因还是IP地址不够用的问题（解决 IP 地址枯竭的方法一个是 IPv6，另一个就是 NAT）。</p><p>NAT 从实现技术角度分为：静态 NAT、动态 NAT 和端口多路复用三种方案：</p><ol><li><p>静态 NAT（Static NAT）</p><p> 静态 NAT 有两个特征：</p><ol><li>私网IP地址与公网IP地址的转换规则是静态指定的，比如 10.10.10.1 与 50.0.0.1 互相转换，这个是静态指定好的；</li><li>私网 IP 地址与公网 IP 地址是 1∶1，即一个私网 IP 地址对应 1 个公网 IP 地址。</li></ol></li><li><p>动态 NAT</p><p> 一般情况是公网 IP 比私网 IP 地址少的时候，用到动态 NAT 方案。动态 NAT，就是一批私网 IP 与公网 IP 地址之间不是固定的转换关系，而是在 IP 报文处理过程中由 NAT 模块进行动态匹配。虽然，公网 IP 比私网 IP 地址少，但是，同时在线的私网 IP 需求小于等于公网 IP 数量，不然某些私网 IP 将得不到正确的转换，从而导致网络通信失败。</p><p> 动态 NAT，有三个特征：</p><ol><li>私网与公网IP地址之间不是固定匹配转换的，而是变化的；</li><li>两者之间的转换规则不是静态指定的，而是动态匹配的；</li><li>私网 IP 地址与公网 IP 地址之间是 m∶n，一般 m &lt; n。</li></ol></li><li><p>端口多路复用 / PAT</p><p> 如果私网 IP 地址有多个，而公网 IP 地址只有一个，那么，静态 NAT 显然是不行了，动态 NAT 也基本不行（只有一个公网 IP，不够用）。此时，就需要用到端口多路复用。多个私网 IP 映射到同一个公网 IP，不同的私网 IP 利用端口号进行区分，这里的端口号指的是 TCP/UDP 端口号。所以端口复用又叫 PAT（Port Address Translation）。</p><p> 端口多路复用（PAT）的特征是：</p><ol><li>私网 IP：公网 IP = m∶1；</li><li>以公网 IP + 端口号来区分私网 IP。</li></ol></li><li><p>SNAT / DNAT</p><p> 前面说的静态 NAT（Static NAT）和动态 NAT不能简称 SNAT、DNAT，因为 SNAT/DNAT 有另外的含义，是另外的缩写。要区分SNAT（Source Network Address Translation，源地址转换）与DNAT（Destination Network Address Translation，目的地址转换）这两个功能可以简单地由连接发起者是谁来区分。</p><ol><li>内部地址要访问公网上的服务时（如 Web访问），内部地址会主动发起连接，由路由器或者防火墙上的网关对内部地址做个地址转换，将内部地址的私有 IP 转换为公网的公有 IP，网关的这个地址转换称为 SNAT，主要用于内部共享 IP 访问外部。</li><li>当内部需要提供对外服务时（如对外发布 Web 网站），外部地址发起主动连接，由路由器或者防火墙上的网关接收这个连接，然后将连接转换到内部，此过程是由带有公网 IP 的网关替代内部服务来接收外部的连接，然后在内部做地址转换，此转换称为 DNAT，主要用于内部服务对外发布。</li></ol></li></ol><p>Linux 内核空间 Netfilter 模块的 NAT 处理，一共有三个 Chain（处理时刻点）：</p><table><thead><tr><th>流</th><th>流描述</th><th>Chain</th><th>NAT类型</th><th>NAT说明</th></tr></thead><tbody><tr><td>流1</td><td>流从外部到达 Linux 用户空间（私网 IP）</td><td>PREROUTING</td><td>DNAT</td><td>将目的 IP 从公网 IP（Linux 内核空间对应的 IP）转换到私网 IP（Linux 用户空间对应的 IP）</td></tr><tr><td>流2</td><td>流从 Linux 用户空间（私网 IP）到达外部</td><td>POSTROUTING</td><td>SNAT</td><td>将源 IP 从私网 IP（Linux 用户空间对应的 IP）转换到公网 IP（Linux 内核空间对应的 IP）</td></tr><tr><td>流3</td><td>流从 Linux 内核空间（公网 IP）到达外部</td><td>OUTPUT</td><td>DNAT</td><td></td></tr></tbody></table><h4 id="1-7-2-Firewall"><a href="#1-7-2-Firewall" class="headerlink" title="1.7.2 Firewall"></a>1.7.2 Firewall</h4><p>iptables 中的 Firewall（防火墙）概念，属于网络防火墙的概念。iptables 中的防火墙的规则就是基于 TCP/IP 协议栈的规则，所以我们称之为网络防火墙。这些规则有：</p><ol><li>in-interface（入网络接口名），数据包从哪个网络接口进入；</li><li>out-interface（出网络接口名），数据包从哪个网络接口输出；</li><li>protocol（协议类型），数据包的协议，如 TCP、UDP 和 ICMP 等；</li><li>source（源地址（或子网）），数据包的源IP地址（或子网）；</li><li>destination（目标地址（或子网）），数据包的目标IP地址（或子网）；</li><li>sport（源端口号），数据包的源端口号；</li><li>dport（目的端口号），数据包的目的端口号。</li></ol><p>符合这些规则的，可以设置为通过（ACCEPT），反之，则不通过（DROP）。或者，符合这些规则的，设置为不通过（DROP）；反之，则通过（ACCEPT）。</p><p>Netfilter 中的 Firewall，会在三个时刻点，进行处理，如下图所示：</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/r-1-7-2.png"></p><h4 id="1-7-3-mangle"><a href="#1-7-3-mangle" class="headerlink" title="1.7.3 mangle"></a>1.7.3 mangle</h4><p>mangle 表主要用于修改数据包的 ToS（Type  of  Service，服务类型）、TTL（Time  to  Live，生存周期）以及为数据包设置 Mark 标记，以实现 QoS（Quality  of  Service，服务质量）调整以及策略路由等应用。</p><p>netfilter 模块中的 mangle 处理的时刻点如下图所示：</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/r-1-7-3.png"></p><h3 id="1-8-Linux-虚拟网络基础总结"><a href="#1-8-Linux-虚拟网络基础总结" class="headerlink" title="1.8 Linux 虚拟网络基础总结"></a>1.8 Linux 虚拟网络基础总结</h3><p>tap、tun、veth  pair 在 Linux 中都被称为设备，但是在与日常概念的类比中，常常被称作接口。Neutron 利用这些“接口”进行 Bridge 之间的连接、Bridge 与 VM（虚拟机）的连接、Bridge 与 Router之间的连接。三者与物理网卡之间的对比关系，如下图所示：</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/r-1-8-1.png"></p><p>Router、Bridge 这些在 Linux 中没有被称为设备的网络功能，反而在日常概念中常常被称为设备。Bridge 提供二层转发功能，Router 提供三层转发功能。Router 还常常借助 iptable 提供 SNAT/DNAT 功能。Bridge 也常常借助 iptable 提供 Firewall 功能。</p><p>在 Neutron中，隔离是一个非常重要的特性，利用 namespace 做隔离也是 Neutron 的一个非常重要的手段。</p><h2 id="2-Neutron-原理介绍"><a href="#2-Neutron-原理介绍" class="headerlink" title="2 Neutron 原理介绍"></a>2 Neutron 原理介绍</h2><h3 id="2-1-Neutron-概述"><a href="#2-1-Neutron-概述" class="headerlink" title="2.1 Neutron 概述"></a>2.1 Neutron 概述</h3><p>Neutron 是 OpenStack 项目中负责提供网络服务的组件，它基于软件定义网络的思想，实现了网络虚拟化下的资源管理。Neutron 的设计目标是实现“网络即服务”，为了达到这一目标，在设计上遵循了基于“软件定义网络”实现网络虚拟化的原则，在实现上充分利用了 Linux 系统上的各种网络相关的技术。</p><p>Neutron管理下面的实体：</p><ul><li>网络：隔离的 L2 域，可以是虚拟、逻辑或交换。</li><li>子网：隔离的 L3 域，IP 地址块。其中每个机器有一个 IP，同一个子网的主机彼此 L3 可见。</li><li>端口：网络上虚拟、逻辑或交换端口。<br>  所有这些实体都是虚拟的，拥有自动生成的唯一标示id，支持CRUD功能，并在数据库中跟踪记录状态。</li></ul><h3 id="2-2-实现模式"><a href="#2-2-实现模式" class="headerlink" title="2.2 实现模式"></a>2.2 实现模式</h3><p>无论哪种具体的网络虚拟化实现，一个简化和抽象后的系统架构可以表述为下图所示。</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/r-abstract_arch.png"></p><p>在启用 DVR 特性（J 版本以后支持）之前，所有流量（东西向、南北向）都需要经过网络节点的转发；DVR 特性则允许东西向流量和带有 Floating IP 的南北向流量不经过网络节点的转发，直接从计算节点的外部网络出去。</p><p>网络节点有且仅有 Neutron 服务，就是网络服务。Neutron 主要负责管理私有网段和公有网段之间的通信，同时管理虚拟机网络之间的通信以及防火墙等等。一般在部署时会部署两个以上的网络端口，分别用于与控制节点通信、同计算/存储节点通信、用于外部的虚拟机与相应的网络之间的通信。</p><p>计算节点主要包含计算服务、网络服务以及监控服务。计算节点对所部署的虚拟机提供基本的网络功能支持，包括隔离不同租户的虚拟机和进行一些基本的安全策略管理。计算节点包含 Nova，Neutron，Telemeter 三个服务：</p><ul><li>基础服务 Nova：提供虚拟机的创建，运行，迁移，快照等各种围绕虚拟机的服务，并提供 API 与控制节点对接，由控制节点下发任务</li><li>基础服务 Neutron：提供计算节点与网络节点之间的通信服务</li><li>扩展服务 Telmeter：提供计算节点的监控代理，将虚拟机的情况反馈给控制节点，是 Centimeter 的代理服务</li></ul><h4 id="2-2-1-GRE-模式"><a href="#2-2-1-GRE-模式" class="headerlink" title="2.2.1 GRE 模式"></a>2.2.1 GRE 模式</h4><p>在 OpenStack 中网络实现的一个简化的架构示意：</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/r-basic_arch_gre.png"></p><p>计算节点上包括两台虚拟机 VM1 和 VM2，分别经过一个网桥（如 qbr-XXX）连接到 br-int 网桥上。br-int 网桥再经过 br-tun 网桥（物理网络是 GRE 实现）连接到物理主机外部网络。对于物理网络通过 vlan 来隔离的情况，则一般会存在一个 br-eth 网桥，替代 br-tun 网桥。</p><p>br-tun将带有 vlan tag 的 vm 跟外部通信的流量转换到对应的 gre 隧道，这上面要实现主要的转换逻辑，规则要复杂，一般通过多张表来实现，这些规则所组成的整体转发逻辑如下图所示。</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/r-compute_br_tun_fwd_logic.png"></p><p>计算节点上发往 GRE 隧道的网包最终抵达网络节点上的 br-tun，该网桥的规则跟计算节点上 br-tun 的规则相似，完成 tunnel 跟 vlan 之间的转换。br-int 上挂载了很多进程来提供网络服务，包括路由器、DHCP服务器等。这些进程不同的租户可能都需要，彼此的地址空间可能冲突，也可能跟物理网络的地址空间冲突，因此都运行在独立的网络名字空间中。规则跟计算节点的br-int规则一致，表现为一个正常交换机。</p><h4 id="2-2-2-VLAN-模式"><a href="#2-2-2-VLAN-模式" class="headerlink" title="2.2.2 VLAN 模式"></a>2.2.2 VLAN 模式</h4><p>Vlan 模式下的系统架构跟 GRE 模式下类似，如下图所示。</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/r-basic_arch_vlan.png"></p><p>需要注意的是，在 vlan 模式下，vlan tag 的转换需要在 br-int 和 br-ethx 两个网桥上进行相互配合。即 br-int 负责从 int-br-ethX 过来的包（带外部 vlan）转换为内部 vlan，而 br-ethx 负责从 phy-br-ethx 过来的包（带内部 vlan）转化为外部的 vlan。</p><p>在计算节点中，类似 GRE 模式下，br-int 负责租户隔离，br-eth1 负责跟计算节点外的网络通信。在 Vlan 模式下，租户的流量隔离是通过 vlan 来进行的，因此此时包括两种 vlan，虚拟机在计算内流量带有的 local vlan 和在计算之外物理网络上隔离不同租户的 vlan。br-int 和 br-eth1 分别对从端口 int-br-eth1 和 phy-br-eth1 上到达的网包进行 vlan tag 的处理。此处有两个网，分别带有两个 vlan tag（内部 tag1 对应外部 tag101，内部 tag2 对应外部 tag102 ）。其中，安全组策略仍然在 qbr 相关的 iptables 上实现。</p><p>在网络节点中，类似 GRE 模式下，br-eth1 收到到达的网包，int-br-eth1 和 phy-br-eth1 上分别进行 vlan 转换，保证到达 br-int 上的网包都是带有内部 vlan tag，到达 br-eth1 上的都是带有外部 vlan tag。br-ex 则完成到 OpenStack 以外网络的连接。</p><h4 id="2-2-3-VXLAN-模式"><a href="#2-2-3-VXLAN-模式" class="headerlink" title="2.2.3 VXLAN 模式"></a>2.2.3 VXLAN 模式</h4><p>VXLAN 模式下，网络的架构跟 GRE 模式类似，所不同的是，不同节点之间通过 VXLAN 隧道互通，即虚拟化层是采用的 VXLAN 协议，基本结构如下图所示。</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/r-vxlan.png"></p><p>计算节点主要包括两个网桥：集成网桥 br-int 和 隧道网桥 br-tun，网络节点担负着进行网络服务的任务，包括DHCP、路由和高级网络服务等，一般包括三个网桥：br-tun、br-int 和 br-ex。</p><h3 id="2-3-使用的服务"><a href="#2-3-使用的服务" class="headerlink" title="2.3 使用的服务"></a>2.3 使用的服务</h3><ol><li><p>网络命名空间</p><p> 在 Linux 中，网络名字空间可以被认为是隔离的拥有单独网络栈（网卡、路由转发表、iptables）的环境。网络名字空间经常用来隔离网络设备和服务，只有拥有同样网络名字空间的设备，才能看到彼此。</p></li><li><p>DHCP 服务</p><p> dhcp 服务是通过 dnsmasq 进程（轻量级服务器，可以提供 dns、dhcp、tftp 等服务）来实现的，该进程绑定到 dhcp 名字空间中的 br-int 的接口上。可以查看相关的进程。</p></li><li><p>路由服务</p><p> router 是提供跨 subnet 的互联功能的。比如用户的内部网络中主机想要访问外部互联网的地址，就需要 router 来转发（因此，所有跟外部网络的流量都必须经过 router）。目前router 的实现是通过 iptables 进行的。</p></li><li><p>安全组</p><p> 安全组通过 Linux IPtables 来实现，为此，在计算节点上引入了 qbr* 这样的 Linux 传统 bridge（iptables 规则目前无法加载到直接挂在到 ovs 的 tap 设备上），整体逻辑如下图所示：</p><p> <img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/r-sg_global_logic.png"></p></li><li><p>负载均衡即服务</p><p> 负载均衡即服务（Load Balance as a Service，LBaaS）是一项网络高级服务。它允许租户动态的在自己的网络创建一个负载均衡设备，可以说是分布式系统中比较基础的组件，它接收前端过来的请求，然后将请求按照某种均衡的策略转发给后端资源池中的某个处理单元，以完成处理。进而可以实现高可用性和横向的扩展性。OpenStack Neutron 通过高级服务扩展的形式支持 LBaaS，目前默认是通过 HAProxy 软件来实现的。</p></li><li><p>防火墙即服务</p><p> 防火墙即服务（FireWall as a Service）在网络节点上（具体说来是在路由器命名空间中）来实现。目前，OpenStack 中实现防火墙基于 Linux 系统自带的 iptables 实现。一个可能混淆的概念是安全组（Security Group），安全组的对象是虚拟网卡，由 L2 Agent 来实现，比如 neutron_openvswitch_agent 和 neutron_linuxbridge_agent，会在计算节点上通过配置 iptables 规则来限制虚拟网卡的进出访问。防火墙可以在安全组之前隔离外部过来的恶意流量，但是对于同个子网内部不同虚拟网卡间的通讯不能过滤（除非它要跨子网）。可以同时部署防火墙和安全组实现双重防护。</p></li><li><p>分布式路由</p><p> 为了降低网络节点的负载，同时提高可扩展性，OpenStack 自 Juno 版本开始正式引入了分布式路由（Distributed Virtual Router，DVR）特性（用户可以选择使用与否），来让计算节点自己来处理原先的大量东西向流量和非 SNAT 南北流量（有 floating IP 的 vm 跟外面的通信）。这样网络节点只需要处理占到一部分的 SNAT （无 floating IP 的 vm 跟外面的通信）流量，大大降低了负载和整个系统对网络节点的依赖。很自然的，FWaaS 也可以跟着放到计算节点上。DHCP 服务、VPN 服务目前仍然需要集中在网络节点上进行。</p></li></ol><h2 id="3-虚拟网络安装配置"><a href="#3-虚拟网络安装配置" class="headerlink" title="3 虚拟网络安装配置"></a>3 虚拟网络安装配置</h2><h3 id="3-1-部署前的准备"><a href="#3-1-部署前的准备" class="headerlink" title="3.1 部署前的准备"></a>3.1 部署前的准备</h3><p>挂载本地镜像源，安装以下 rpm 包：<code>python3-openstackclient</code>、<code>mariadb</code>、<code>mariadb-server</code>、<code>python3-PyMySQL</code>、<code>rabbitmq-server</code>、<code>memcached</code>、<code>python3-memcached</code>、<code>openstack-keystone</code>、<code>httpd</code>、<code>python3-mod_wsgi</code>、<code>openstack-neutron</code>、<code>openstack-neutron-ml2</code>、<code>openstack-neutron-openvswitch</code>、<code>ebtables</code>、<code>ipset</code>。</p><h3 id="3-2-Neutron-的脚本部署"><a href="#3-2-Neutron-的脚本部署" class="headerlink" title="3.2 Neutron 的脚本部署"></a>3.2 Neutron 的脚本部署</h3><ol><li><p>定义 IP 和主机名变量，后续部署使用</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LOCALMANAGEMENTIP=<span class="string">&quot;192.168.230.134&quot;</span></span><br><span class="line">LOCALOVERLAYIP=<span class="string">&quot;192.168.230.134&quot;</span></span><br><span class="line">LOCALHOSTNAME=<span class="string">&quot;localhost.localdomain&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>设置语言为中文、编码为 <code>UTF-8</code></p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localectl set-locale LANG=zh_CN.UTF-8</span><br></pre></td></tr></table></figure></li><li><p>利用 <code>firewalld</code> 开放端口，更新防火墙规则</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port 9696/tcp <span class="comment">#neutron</span></span><br><span class="line">firewall-cmd --permanent --add-port 5000/tcp <span class="comment">#keystone</span></span><br><span class="line">firewall-cmd --permanent --add-port 5672/tcp <span class="comment">#rabbitmq</span></span><br><span class="line">firewall-cmd --permanent --add-port 4789/udp <span class="comment">#vxlan</span></span><br><span class="line">firewall-cmd --permanent --add-port 11211/tcp <span class="comment">#memcached</span></span><br><span class="line">firewall-cmd --permanent --add-port 11211/udp <span class="comment">#memcached</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>配置 MySQL</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/my.cnf.d/openstack.cnf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">bind-address = $LOCALMANAGEMENTIP </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">default-storage-engine = innodb</span></span><br><span class="line"><span class="string">innodb_file_per_table = on</span></span><br><span class="line"><span class="string">max_connections = 4096</span></span><br><span class="line"><span class="string">collation-server = utf8_general_ci</span></span><br><span class="line"><span class="string">character-set-server = utf8</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li><li><p>启动 <code>mariadb.service</code></p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> mariadb.service</span><br><span class="line">systemctl start mariadb.service</span><br></pre></td></tr></table></figure></li><li><p>启动 <code>rabbitmqp-server</code>，增加新用户名和密码，给用户赋予配置、读、写权限</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> rabbitmq-server.service</span><br><span class="line">systemctl start rabbitmq-server.service</span><br><span class="line">rabbitmqctl add_user openstack openstack</span><br><span class="line">rabbitmqctl set_permissions openstack <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br><span class="line">systemctl restart rabbitmq-server.service</span><br></pre></td></tr></table></figure><blockquote><p>此处发生错误，在 <code>/etc/rabbitmq/rabbitmq-env.conf</code> 文件中添加 <code>NODENAME=rabbit@localhost</code>，重启 <code>rabbitmq-server</code> 解决。</p></blockquote></li><li><p>将 <code>memcached</code> 监听地址改为所有 IP，启动服务</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;/OPTIONS/c\OPTIONS=&quot;-l 0.0.0.0&quot;&#x27;</span> /etc/sysconfig/memcached</span><br><span class="line">systemctl <span class="built_in">enable</span> memcached.service</span><br><span class="line">systemctl start memcached.service</span><br></pre></td></tr></table></figure></li><li><p>MySQL 创建 <code>keystone</code> 和 <code>neutron</code> 数据库</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p &lt;&lt;<span class="string">EOF 2&gt;/dev/null</span></span><br><span class="line"><span class="string">    CREATE DATABASE keystone;</span></span><br><span class="line"><span class="string">    GRANT ALL PRIVILEGES ON keystone.* TO &#x27;keystone&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;keystone&#x27;;</span></span><br><span class="line"><span class="string">    GRANT ALL PRIVILEGES ON keystone.* TO &#x27;keystone&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;keystone&#x27;;</span></span><br><span class="line"><span class="string">    GRANT ALL PRIVILEGES ON keystone.* TO &#x27;keystone&#x27;@&#x27;$LOCALHOSTNAME&#x27; IDENTIFIED BY &#x27;keystone&#x27;;</span></span><br><span class="line"><span class="string">    CREATE DATABASE neutron;</span></span><br><span class="line"><span class="string">    GRANT ALL PRIVILEGES ON neutron.* TO &#x27;neutron&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;neutron&#x27;;</span></span><br><span class="line"><span class="string">    GRANT ALL PRIVILEGES ON neutron.* TO &#x27;neutron&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;neutron&#x27;;</span></span><br><span class="line"><span class="string">    GRANT ALL PRIVILEGES ON neutron.* TO &#x27;neutron&#x27;@&#x27;$LOCALHOSTNAME&#x27; IDENTIFIED BY &#x27;neutron&#x27;;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li><li><p>更新 <code>keystone</code> 配置文件，设置文件所有权，设置管理 IP，初始化数据库信息和 <code>Fernet</code> 密钥数据库，并设置密码和节点</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /etc/keystone/keystone.conf</span><br><span class="line">cp ./keystone.conf /etc/keystone/keystone.conf</span><br><span class="line">chown root:keystone /etc/keystone/keystone.conf</span><br><span class="line">sed -i <span class="string">&quot;s/172.30.20.211/<span class="variable">$&#123;LOCALMANAGEMENTIP&#125;</span>/g&quot;</span> /etc/keystone/keystone.conf</span><br><span class="line"></span><br><span class="line">su -s /bin/sh -c <span class="string">&quot;keystone-manage db_sync&quot;</span> keystone</span><br><span class="line">keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone</span><br><span class="line">keystone-manage credential_setup --keystone-user keystone --keystone-group keystone</span><br><span class="line">keystone-manage bootstrap --bootstrap-password admin \</span><br><span class="line">    --bootstrap-admin-url http://<span class="variable">$&#123;LOCALMANAGEMENTIP&#125;</span>:5000/v3/ \</span><br><span class="line">    --bootstrap-internal-url http://<span class="variable">$&#123;LOCALMANAGEMENTIP&#125;</span>:5000/v3/ \</span><br><span class="line">    --bootstrap-public-url http://<span class="variable">$&#123;LOCALMANAGEMENTIP&#125;</span>:5000/v3/ \</span><br><span class="line">    --bootstrap-region-id RegionOne</span><br></pre></td></tr></table></figure></li><li><p>设置管理 IP，配置 HTTP 配置文件，启动服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/</span><br><span class="line">systemctl <span class="built_in">enable</span> httpd.service</span><br><span class="line">systemctl start httpd.service</span><br></pre></td></tr></table></figure></li><li><p>配置用户名、密码、项目名等信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; ~/.bashrc &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">export OS_USERNAME=admin</span></span><br><span class="line"><span class="string">export OS_PASSWORD=admin</span></span><br><span class="line"><span class="string">export OS_PROJECT_NAME=admin</span></span><br><span class="line"><span class="string">export OS_USER_DOMAIN_NAME=Default</span></span><br><span class="line"><span class="string">export OS_PROJECT_DOMAIN_NAME=Default</span></span><br><span class="line"><span class="string">export OS_AUTH_URL=http://$&#123;LOCALMANAGEMENTIP&#125;:5000/v3</span></span><br><span class="line"><span class="string">export OS_IDENTITY_API_VERSION=3</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li><li><p>获取 openstack token 并创建 service 项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line">openstack token issue <span class="comment">#获取token</span></span><br><span class="line">openstack project create --domain default --description <span class="string">&quot;Service Project&quot;</span> service <span class="comment">#创建service项目</span></span><br></pre></td></tr></table></figure></li><li><p>创建 neutron 用户，将 neutron 用户添加入 service 项目并拥有 admin 权限，创建 network 服务并添加三个 endpoint</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">openstack user create --domain default --password neutron neutron</span><br><span class="line">openstack role add --project service --user neutron admin</span><br><span class="line">openstack service create --name neutron --description <span class="string">&quot;OpenStack Networking&quot;</span> network</span><br><span class="line">openstack endpoint create --region RegionOne network public http://<span class="variable">$&#123;LOCALMANAGEMENTIP&#125;</span>:9696</span><br><span class="line">openstack endpoint create --region RegionOne network internal http://<span class="variable">$&#123;LOCALMANAGEMENTIP&#125;</span>:9696</span><br><span class="line">openstack endpoint create --region RegionOne network admin http://<span class="variable">$&#123;LOCALMANAGEMENTIP&#125;</span>:9696</span><br></pre></td></tr></table></figure></li><li><p>更新 neutron 配置文件，设置文件所有权和管理 IP</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /etc/neutron/neutron.conf</span><br><span class="line">cp ./neutron.conf /etc/neutron/neutron.conf</span><br><span class="line">chown root:neutron /etc/neutron/neutron.conf</span><br><span class="line">sed -i <span class="string">&quot;s/172.30.20.211/<span class="variable">$&#123;LOCALMANAGEMENTIP&#125;</span>/g&quot;</span> /etc/neutron/neutron.conf</span><br></pre></td></tr></table></figure></li><li><p>更新 ml2 配置文件和所有权</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /etc/neutron/plugins/ml2/ml2_conf.ini</span><br><span class="line">cp ./ml2_conf.ini /etc/neutron/plugins/ml2/ml2_conf.ini</span><br><span class="line">chown root:neutron /etc/neutron/plugins/ml2/ml2_conf.ini</span><br></pre></td></tr></table></figure></li><li><p>更新 openvswitch_agent 配置文件、所有权、业务 IP</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /etc/neutron/plugins/ml2/openvswitch_agent.ini</span><br><span class="line">cp ./openvswitch_agent.ini /etc/neutron/plugins/ml2/openvswitch_agent.ini</span><br><span class="line">chown root:neutron /etc/neutron/plugins/ml2/openvswitch_agent.ini</span><br><span class="line">sed -i <span class="string">&quot;s/172.30.20.211/<span class="variable">$&#123;LOCALOVERLAYIP&#125;</span>/g&quot;</span> /etc/neutron/plugins/ml2/openvswitch_agent.ini</span><br></pre></td></tr></table></figure></li><li><p>更新 l3_agent 配置文件和所有权</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /etc/neutron/l3_agent.ini</span><br><span class="line">cp ./l3_agent.ini /etc/neutron/l3_agent.ini</span><br><span class="line">chown root:neutron /etc/neutron/l3_agent.ini</span><br></pre></td></tr></table></figure></li><li><p>更新 dhcp_agent 配置文件和所有权，杀死 dnsmasq 进程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /etc/neutron/dhcp_agent.ini</span><br><span class="line">cp ./dhcp_agent.ini /etc/neutron/dhcp_agent.ini</span><br><span class="line">chown root:neutron /etc/neutron/dhcp_agent.ini</span><br><span class="line">pkill dnsmasq</span><br></pre></td></tr></table></figure></li><li><p>更新 ml2_conf 配置文件，同步数据库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini</span><br><span class="line">su -s /bin/sh -c <span class="string">&quot;neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head&quot;</span> neutron</span><br></pre></td></tr></table></figure></li><li><p>启动 neutron 服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> neutron-server.service openvswitch.service neutron-dhcp-agent.service neutron-l3-agent.service neutron-openvswitch-agent.service</span><br><span class="line">systemctl start neutron-server.service openvswitch.service neutron-dhcp-agent.service neutron-l3-agent.service neutron-openvswitch-agent.service</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-3-验证网络操作"><a href="#3-3-验证网络操作" class="headerlink" title="3.3 验证网络操作"></a>3.3 验证网络操作</h3><p>使用 <code>openstack network agent list</code> 命令列出代理以验证启动 neutron 代理是否成功，得到输出如下：</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/agent-list.png"></p><p>启动成功。</p><h3 id="3-4-Neutron-创建网络和子网"><a href="#3-4-Neutron-创建网络和子网" class="headerlink" title="3.4 Neutron 创建网络和子网"></a>3.4 Neutron 创建网络和子网</h3><p>使用 <code>neutron net-create net1</code> 命令创建名为 <code>net1</code> 的网络：</p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/net-create.png" style="zoom:50%;" /><p>使用 <code>neutron subnet-create net1 192.168.2.0/24 --name subnet1</code> 命令创建名为 <code>subnet1</code>、IP 为 <code>192.168.0.2/24</code> 的子网：</p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/subnet-create.png" style="zoom: 50%;" /><p>查看创建结果：</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/create-result.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单记录一下一个多月的“实训”。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>《软件测试技术》笔记</title>
    <link href="https://blog.superpung.cn/stt-notes/"/>
    <id>https://blog.superpung.cn/stt-notes/</id>
    <published>2022-05-26T10:18:30.000Z</published>
    <updated>2022-05-26T10:19:14.418Z</updated>
    
    <content type="html"><![CDATA[<p>《软件测试技术》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;《软件测试技术》&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="Notes" scheme="https://blog.superpung.cn/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>Q-Learning 简介</title>
    <link href="https://blog.superpung.cn/q-learning/"/>
    <id>https://blog.superpung.cn/q-learning/</id>
    <published>2022-04-05T02:50:56.000Z</published>
    <updated>2022-04-05T06:06:05.245Z</updated>
    
    <content type="html"><![CDATA[<p>强化学习（Reinforcement Learning）是一种用于模拟现实世界的算法，而其中的一个重要的组成部分是 Q-Learning。</p><a id="more"></a><p>假设有一系列「状态」（state）组成的环境，在每一个状态中都可以采取一种「动作」（action）到达下一个状态。 这些状态并不都是相同的，根据实际应用，不同的状态有不同的「奖励」（reward），而且存在终止状态。我们的目标是从任意初始状态出发，到达终止状态，且所获得的奖励最大。</p><p>Q-Learning 就是这样一种决策算法，帮助我们在每个状态决定应该采取何种动作，才能最终得到最大奖励。</p><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>Q-Learning 算法的核心是维护一张 Q 表，它的每一行对应一个状态，每一列对应一种动作，每个值代表了这个状态下采取这种动作最终可以得到的最大奖励。Q-Learning 会经过多次尝试去更新其中的值，不断试错，从而“学习”到外部环境的机制。</p><p>步骤如下：</p><ol><li>随机初始化 $Q(s, a)$</li><li>重复以下步骤，每一次重复记作一次 episode：<ol><li>初始化状态 s</li><li>重复以下步骤，每一次重复记作一次 episode 的一步（step）：<ol><li>选择状态 s 下要采取的动作 a（依据一定的策略，如 $\epsilon$-greedy）</li><li>执行动作 a，得到奖励 r，到达下一状态 s’</li><li>更新 Q 表：$Q(s,a)\leftarrow Q(s,a)+\alpha[r+\gamma max_{a’}Q(s’,a’)-Q(s,a)]$</li><li>更新状态：$s\leftarrow s’$</li></ol></li><li>当 s 为终止状态，停止</li></ol></li></ol><p>要说明的：</p><ul><li>在每个 step 中，要首先根据一定策略选择要执行的动作。其中 $\epsilon$-greedy 策略是在一定概率下按 Q 表的最优值选择动作，其他情况下随机选择动作。</li><li>在更新 Q 表的步骤中，$r+\gamma max_{a’}Q(s’,a’)$ 是当前得到的最大奖励值（当前状态 s 采取动作 a 获得的奖励 + 下一状态 s’ 获得的最大奖励（Q 表预测的 ）），而 $Q(s,a)$ 则是 Q 表预测的最大奖励值。将二者作差并乘上一个学习率 $\alpha$，叠加到现有的 Q 表中，就完成了 Q 表的一次更新。</li><li>上面中出现的 $\gamma$ 是衰减率，为 0 即不考虑未来奖励如何，只考虑当前奖励最大；为 1 即考虑所有未来的奖励；介于 0 和 1 之间则考虑的程度随 $\gamma^2$ 不断衰减。</li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><p>根据上面数学角度的分析，不难看出实际需要处理的就是两个部分：选择动作和更新 Q 表。下面用 <code>python</code> 演示这两部分。</p><h3 id="init"><a href="#init" class="headerlink" title="__init__"></a><code>__init__</code></h3><p>初始化函数主要为建立 Q 表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, actions, learning_rate=<span class="number">0.01</span>, reward_decay=<span class="number">0.9</span>, e_greedy=<span class="number">0.9</span></span>):</span></span><br><span class="line">    self.actions = actions</span><br><span class="line">    self.lr = learning_rate</span><br><span class="line">    self.gamma = reward_decay</span><br><span class="line">    self.epsilon = e_greedy</span><br><span class="line">    self.q_table = pd.DataFrame(columns=self.actions, dtype=np.float64)</span><br></pre></td></tr></table></figure><p>其中 <code>actions</code> 为动作的集合（<code>list</code> 类型），需要用到 <code>pandas</code> 和 <code>numpy</code> 库。</p><h3 id="choose-action"><a href="#choose-action" class="headerlink" title="choose_action"></a><code>choose_action</code></h3><p><code>choose_action</code> 是选择动作的函数，需要接收一个参数作为当前状态：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose_action</span>(<span class="params">self, observation</span>):</span></span><br></pre></td></tr></table></figure><p>为方便后续处理和操作，将参数转换为 <code>str</code> 类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">observation = <span class="built_in">str</span>(observation)</span><br></pre></td></tr></table></figure><p>接下来需要选择要执行的动作了，但我们首先要判断参数对应的状态是否在 Q 表中，需要引入函数 <code>check_state_exist</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_state_exist</span>(<span class="params">self, state</span>):</span></span><br><span class="line">    <span class="keyword">if</span> state <span class="keyword">not</span> <span class="keyword">in</span> self.q_table.index:</span><br><span class="line">        <span class="comment"># append new state to q table</span></span><br><span class="line">        self.q_table = self.q_table.append(</span><br><span class="line">            pd.Series(</span><br><span class="line">                [<span class="number">0</span>] * <span class="built_in">len</span>(self.actions),</span><br><span class="line">                index=self.q_table.columns,</span><br><span class="line">                name=state,</span><br><span class="line">            )</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>逻辑很简单，当这个状态不在 Q 表中时，我们就把它加入 Q 表。</p><div class="note warning"><p>若此处出现报错 <code>TypeError: unhashable type: &#39;list&#39;</code>，应该是把 <code>list</code> 类型的 <code>state</code> 作为参数传了过来。<code>list</code> 类型是不可以作为 key 的，注意需要转换为 <code>str</code> 类型。</p></div><p>在 <code>choose_action</code> 中调用函数 <code>check_state_exist</code> 进行判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.check_state_exist(observation)</span><br></pre></td></tr></table></figure><p>接下来就可以进行动作的选择了！</p><p>注意之前提到的 $\epsilon$-greedy 策略，我们需要在一定的概率下选择 Q 表中最优值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> np.random.uniform() &lt; self.epsilon:</span><br><span class="line">    <span class="comment"># choose best action</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># choose random action</span></span><br></pre></td></tr></table></figure><p>回忆一下，Q 表每一行对应一个状态、每一列对应一种动作。所以在 Q 表中选择动作，首先要找到当前的状态：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state_action = self.q_table.loc[observation, :]</span><br></pre></td></tr></table></figure><p>然后就可以找这一行中的最大值对应的动作了。</p><p>但是这里有一个问题，如果有多个相同的最大值呢？这种情况下如果我们直接判断 argmax，返回的将永远是第一个最大值，永远不会遍历到后面的最大值对应的动作。所以这里我们需要随机选择一个最大值来避免这种情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action = np.random.choice(state_action[state_action == state_action.<span class="built_in">max</span>()].index)</span><br></pre></td></tr></table></figure><p>这就是基于 Q 表选择的动作了。</p><p>在另一个分支进行随机选择：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action = np.random.choice(self.actions)</span><br></pre></td></tr></table></figure><p>最后返回执行的动作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> action</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose_action</span>(<span class="params">self, observation</span>):</span></span><br><span class="line">    observation = <span class="built_in">str</span>(observation)</span><br><span class="line">    self.check_state_exist(observation)</span><br><span class="line">    <span class="comment"># action selection</span></span><br><span class="line">    <span class="keyword">if</span> np.random.uniform() &lt; self.epsilon:</span><br><span class="line">        <span class="comment"># choose best action</span></span><br><span class="line">        state_action = self.q_table.loc[observation, :]</span><br><span class="line">        action = np.random.choice(state_action[state_action == state_action.<span class="built_in">max</span>()].index)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># choose random action</span></span><br><span class="line">        action = np.random.choice(self.actions)</span><br><span class="line">        <span class="keyword">return</span> action</span><br></pre></td></tr></table></figure><h3 id="learn"><a href="#learn" class="headerlink" title="learn"></a><code>learn</code></h3><p><code>learn</code> 是学习的过程，也就是更新 Q 表的函数，需要接收当前状态、当前执行的动作、获得的奖励和下一个状态 4 个参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">learn</span>(<span class="params">self, s, a, r, s_</span>):</span></span><br></pre></td></tr></table></figure><p>同样对状态做字符串化处理，并判断下一个状态是否在 Q 表中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">str</span>(s)</span><br><span class="line">s_ = <span class="built_in">str</span>(s_)</span><br><span class="line">self.check_state_exist(s_)</span><br></pre></td></tr></table></figure><p>根据上一部分的分析，更新 Q 表需要知道当前选择对应的最大奖励值（$r+\gamma max_{a’}Q(s’,a’)$，记作 <code>q_target</code>）和 Q 表预测的最大奖励值（$Q(s,a)$，记作 <code>q_predict</code>）。</p><p>其中 <code>q_predict</code> 比较容易得到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q_predict = self.q_table.loc[s, a]</span><br></pre></td></tr></table></figure><p>而 <code>q_target</code> 需要判断下一状态是否到了最终状态，如果是，则 <code>q_target</code> 直接为当前获得的奖励 <code>r</code>，否则根据公式计算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> s_ != <span class="string">&#x27;terminal&#x27;</span>:</span><br><span class="line">    q_target = r + self.gamma * self.q_table.loc[s_, :].<span class="built_in">max</span>()  <span class="comment"># next state is not terminal</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    q_target = r  <span class="comment"># next state is terminal</span></span><br></pre></td></tr></table></figure><p>更新 Q 表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.q_table.loc[s, a] += self.lr * (q_target - q_predict)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mofanpy.com/tutorials/machine-learning/reinforcement-learning/">强化学习 (Reinforcement Learning) | 莫烦Python</a></p><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p><a href="https://copilot.github.com/">GitHub Copilot · Your AI pair programmer</a></p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/copilot-qlearning.JPG" alt="copilot-qlearning"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;强化学习（Reinforcement Learning）是一种用于模拟现实世界的算法，而其中的一个重要的组成部分是 Q-Learning。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Machine Learning" scheme="https://blog.superpung.cn/tags/Machine-Learning/"/>
    
    <category term="Reinforcement Learning" scheme="https://blog.superpung.cn/tags/Reinforcement-Learning/"/>
    
    <category term="Q-Learning" scheme="https://blog.superpung.cn/tags/Q-Learning/"/>
    
  </entry>
  
  <entry>
    <title>软件测试技术实验 3 和 4 遇到的一些问题和解决方案</title>
    <link href="https://blog.superpung.cn/software-testing-lab3-4/"/>
    <id>https://blog.superpung.cn/software-testing-lab3-4/</id>
    <published>2022-03-23T14:02:56.000Z</published>
    <updated>2022-03-24T03:44:52.870Z</updated>
    
    <content type="html"><![CDATA[<p>最近写《软件测试技术》实验 3 和实验 4 时，遇到了一些工具上的问题，并尝试了一些解决方案，记录一下。</p><a id="more"></a><h1 id="实验-3：MuJava"><a href="#实验-3：MuJava" class="headerlink" title="实验 3：MuJava"></a>实验 3：MuJava</h1><p><a href="https://cs.gmu.edu/~offutt/mujava/">MuJava</a> 是一个变异测试的工具，可以生成变异体并运行，最终可以得到变异测试的结果。</p><blockquote><p>变异测试是衡量测试充分性的有效方法，其思想就是模拟程序编写中可能会出现的错误，得到一系列和源程序不同的“变异体”，用来“测试”你的测试程序是否能测出来这些“变异”。你的测试程序杀死（使变异体的运行结果不同于源程序）的变异体越多，测试越充分。</p></blockquote><h2 id="0x00-安装-MuJava"><a href="#0x00-安装-MuJava" class="headerlink" title="0x00 安装 MuJava"></a>0x00 安装 MuJava</h2><ol><li><p>直接到 <a href="https://cs.gmu.edu/~offutt/mujava/">官网</a> 下载 <code>mujava.jar</code>。</p></li><li><p>为了后续实验进行，还需要下载 <code>junit.jar</code>（编写测试程序）、<code>openjava.jar</code>。</p></li><li><p>保存三个 jar 包到固定路径，编辑 <code>~/.bash_profile</code> 引入环境：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_281.jdk/Contents/Home</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:/path/to/openjava.jar:/path/to/junit.jar:/path/to/mujava.jar</span><br></pre></td></tr></table></figure><p> （适用于 macOS，Windows 略有不同）</p></li><li><p>保存并运行 <code>source ~/.bash_profile</code>。</p></li><li><p>为了使用 MuJava，需要创建需要的目录结构：</p> <figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">|--\classes\</span></span><br><span class="line"><span class="string">|--mujava.config</span></span><br><span class="line"><span class="string">|--\result\</span></span><br><span class="line"><span class="string">|--\src\</span></span><br><span class="line"><span class="string">|--\testset\</span></span><br></pre></td></tr></table></figure><h2 id="0x01-生成变异体"><a href="#0x01-生成变异体" class="headerlink" title="0x01 生成变异体"></a>0x01 生成变异体</h2></li><li><p>将源文件移至 <code>\src\</code> 目录。</p></li><li><p><code>javac</code> 编译源文件，得到 <code>classes</code> 文件，移至 <code>\classes\</code> 目录。</p></li><li><p>运行 <code>java mujava.gui.GenMutantsMain</code>，进入图形化设置界面，勾选需要生成变异体的文件和需要的变异算子，点击 <code>Generate</code> 即可生成（保存在 <code>result</code> 目录）。</p></li></ol><div class="note warning"><p>若此处出现问题，请检查 0x00 第 3 步中路径是否包含空格。即使使用 <code>\</code> 转译也可能存在问题，建议用 <code>-</code> 或 <code>_</code> 代替空格。</p></div><h2 id="0x02-生成测试集"><a href="#0x02-生成测试集" class="headerlink" title="0x02 生成测试集"></a>0x02 生成测试集</h2><p>使用 JUnit 编写即可，比较简单，得到 <code>xxxTest.java</code>。</p><h2 id="0x03-运行变异测试"><a href="#0x03-运行变异测试" class="headerlink" title="0x03 运行变异测试"></a>0x03 运行变异测试</h2><ol><li><code>javac</code> 编译测试文件，得到 <code>classes</code> 文件，移至 <code>\testset\</code> 目录。</li><li>运行 <code>java mujava.gui.RunTestMain &gt; TestResult.log</code>，将变异测试日志输出至文件保存。</li></ol><div class="note warning"><p>若此处出现问题，请检查 0x00 第 3 步中是否引入了 <code>$JAVA_HOME/lib/tools.jar</code> 和 <code>$JAVA_HOME/lib/dt.jar</code>。</p></div><p>变异测试完成，后续可以进一步分析测试代码和变异体，做进一步改进。</p><h1 id="实验-4：Major"><a href="#实验-4：Major" class="headerlink" title="实验 4：Major"></a>实验 4：Major</h1><p><a href="http://mutation-testing.org/">Major</a> 和 Mujava 功能相近，也是变异测试的工具。</p><h2 id="0x00-安装-Major"><a href="#0x00-安装-Major" class="headerlink" title="0x00 安装 Major"></a>0x00 安装 Major</h2><ol><li><p>直接到 <a href="http://mutation-testing.org/downloads/">官网</a> 下载 Major v1.3.5，解压为 major 目录，存放到固定路径。</p></li><li><p>配置环境变量：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/path/to/major/bin:$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><p> 保存并运行 <code>source ~/.bash_profile</code>。</p></li><li><p>验证是否配置成功：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ javac -version</span><br><span class="line">javac 1.7.0-Major-v1.3.5</span><br><span class="line">❯ ant -version</span><br><span class="line">Apache Ant(TM) version 1.8.4-Major-v1.3.5 compiled on July 18 2019</span><br></pre></td></tr></table></figure><div class="note warning"><p>如果验证时得到的输出和上述不同，特别是 <code>javac -version</code> 输出结果不包含 <code>Major-v1.3.5</code>，建议检查第 2 步引入环境变量的顺序，应将 <code>major/bin</code> 目录放在最前面。</p></div></li></ol><h2 id="0x01-配置文件"><a href="#0x01-配置文件" class="headerlink" title="0x01 配置文件"></a>0x01 配置文件</h2><ol><li><p>Major 使用 <code>ant</code> 运行变异测试，并在 <code>major/example/</code> 目录下给出运行模板。所以我们需要依此建立目录结构：</p> <figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">|--\src\</span></span><br><span class="line"><span class="string">|--\test\</span></span><br><span class="line"><span class="string">|--build.xml</span></span><br><span class="line"><span class="string">|--run.sh</span></span><br></pre></td></tr></table></figure></li><li><p>将源文件移至 <code>src</code> 目录，将 <code>JUnit</code> 测试文件移至 <code>test</code> 目录。</p></li></ol><div class="note warning"><p>请确保代码文件的 <code>package</code> 和目录结构对应，参照给出的运行模板。</p></div><p><code>build.xml</code> 和 <code>run.sh</code> 是 Major 运行的重要文件，前者是配置文件、后者是运行脚本。由于运行目录不同，所以在运行前我们需要在 <code>example</code> 的基础上，根据自己的实际情况对两个文件做一些修改。</p><h3 id="build-xml"><a href="#build-xml" class="headerlink" title="build.xml"></a><code>build.xml</code></h3><ol><li><p>可以在第一行修改自己的项目名称：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">&quot;YourProjectName&quot;</span> <span class="attr">default</span>=<span class="string">&quot;compile&quot;</span> <span class="attr">basedir</span>=<span class="string">&quot;.&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改 <code>/javac/</code> 文件的路径：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;major&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/your/path/to/major/bin/javac&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p> 它上面两行一般不需要改动。</p></li></ol><h3 id="run-sh"><a href="#run-sh" class="headerlink" title="run.sh"></a><code>run.sh</code></h3><ol><li><p>修改 <code>/major/</code> 目录的路径：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAJOR_HOME=&quot;/your/path/to/major&quot;</span><br></pre></td></tr></table></figure></li><li><p>如果没有编写 MML 脚本（一般情况下不需要自己编写），修改 <code>ant</code> 运行的参数：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">MAJOR_HOME/bin/ant -DmutOp=<span class="string">&quot;:ALL&quot;</span> clean compile</span></span><br></pre></td></tr></table></figure><p> 直接指定为 <code>ALL</code> 对应全部变异算子，若此处不修改可能会导致后续生成变异体数量为 0。</p></li></ol><h2 id="0x02-运行变异测试"><a href="#0x02-运行变异测试" class="headerlink" title="0x02 运行变异测试"></a>0x02 运行变异测试</h2><p>运行 <code>./run.sh</code>，得到类似下方的输出则成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">mutation.test:</span><br><span class="line">     [echo] Running mutation analysis ...</span><br><span class="line">    [junit] MAJOR: Mutation analysis enabled</span><br><span class="line">    [junit] MAJOR: ------------------------------------------------------------</span><br><span class="line">    [junit] MAJOR: Run 1 ordered test to verify independence</span><br><span class="line">    [junit] MAJOR: ------------------------------------------------------------</span><br><span class="line">    [junit] MAJOR: Preprocessing time: xxx seconds</span><br><span class="line">    [junit] MAJOR: ------------------------------------------------------------</span><br><span class="line">    [junit] MAJOR: Mutants generated: xxx</span><br><span class="line">    [junit] MAJOR: Mutants covered:   xxx (xx.xx%)</span><br><span class="line">    [junit] MAJOR: ------------------------------------------------------------</span><br><span class="line">    [junit] MAJOR: Export test map to testMap.csv</span><br><span class="line">    [junit] MAJOR: ------------------------------------------------------------</span><br><span class="line">    [junit] MAJOR: Run mutation analysis with 1 individual test</span><br><span class="line">    [junit] MAJOR: ------------------------------------------------------------</span><br><span class="line">    [junit] MAJOR: 1/1 - UpgradedTriangleTest (xxms / xxx):</span><br><span class="line">    [junit] MAJOR: xxx (xxx / xxx / xxx) -&gt; AVG-RTPM: xms</span><br><span class="line">    [junit] MAJOR: Mutants killed / live: xxx (xxx-x-x) / xx</span><br><span class="line">    [junit] MAJOR: ------------------------------------------------------------</span><br><span class="line">    [junit] MAJOR: Summary:</span><br><span class="line">    [junit] MAJOR:</span><br><span class="line">    [junit] MAJOR: Analysis time:  x.x seconds</span><br><span class="line">    [junit] MAJOR: Mutation score: xx.xx% (xx.xx%)</span><br><span class="line">    [junit] MAJOR: Mutants killed / live: xxx (xxx-x-x) / xx</span><br><span class="line">    [junit] MAJOR: Mutant executions: xxx</span><br><span class="line">    [junit] MAJOR: ------------------------------------------------------------</span><br><span class="line">    [junit] MAJOR: Export summary of results to summary.csv</span><br><span class="line">    [junit] MAJOR: Export run-time results to results.csv</span><br><span class="line">    [junit] MAJOR: Export mutant kill details to killed.csv</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line">Total time: x second</span><br></pre></td></tr></table></figure><p>和 MuJava 类似，后续可以进一步分析测试代码和变异体，做进一步改进。</p><div class="note warning"><p>如果 Mutants covered 未达到 100%，请移除源程序的 <code>main</code> 方法。</p></div><h2 id="0x03-其他问题"><a href="#0x03-其他问题" class="headerlink" title="0x03 其他问题"></a>0x03 其他问题</h2><p>如有其他问题，强烈建议阅读 <a href="http://mutation-testing.org/doc/major.pdf">官方文档</a>，十分详细。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近写《软件测试技术》实验 3 和实验 4 时，遇到了一些工具上的问题，并尝试了一些解决方案，记录一下。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.superpung.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>我和我的 2021</title>
    <link href="https://blog.superpung.cn/rev-2021/"/>
    <id>https://blog.superpung.cn/rev-2021/</id>
    <published>2021-12-31T03:07:41.000Z</published>
    <updated>2021-12-31T06:01:45.248Z</updated>
    
    <content type="html"><![CDATA[<p>用数字记录 2021 很容易，但用文字记录却很难。</p><a id="more"></a><p>每一天都看似平常，但 365 个平常交叠，总会带来不一样的感受。是啊，茫茫中又度过了一年。2020 的记忆未曾消去，2021 却已悄然而过，来不及沉浸在过去的回忆里，时间催促着我们向前看，2022 的曙光即将在黑夜之后到来。</p><p>每逢新年伊始，心中满怀对新年的企盼。无数次盼望新年胜旧年，盼望旧年的伤悲都能随风，盼望新年的喜乐都能常伴。心怀希望永远是我们面对陌生的勇气，即使时代并不会对我们好些，我们也会继续走下去。</p><p>即使新冠疫情改变了世界的运作方式，但 2021 对我来说也不算很糟。做出了很多新的尝试，有很多有意义的回忆，并没有停留在以前的认知。热爱着我所热爱的，坚持着我所坚持的，继续学习，继续进步。</p><p>这一年的课余时间除了休息外，应该只有做一些项目和学一些新的知识了。开始使用 Notion 作为笔记管理工具，所以很惭愧没有经常更新博客……（2022 一定会多更新的，不能荒废了）学习真是一件容易让人满足的事情。</p><hr><p>找到几张比较有意义的照片，不能说可以贯穿 2021，但也能在漫无目的中留下一些意义。</p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/2021-1.png" alt="2021-1" style="zoom:50%;" /><p>2021 收到最有心的生日礼物，感谢一直陪伴我的 peggy。</p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/2021-2.png" alt="2021-2" style="zoom:50%;" /><p>在天津大悦城 Apple Store 第一次体验了 iPhone 12 mini，可以说是理想中的手机大小了。</p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/2021-3.png" alt="2021-3" style="zoom:50%;" /><p>AirPods Pro 牛年限定……</p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/2021-4.png" alt="2021-4" style="zoom:50%;" /><p>拥有了第一台 Mac（也是最贵的生日礼物……），陪伴我一年的 Hackintosh 终于光荣退役，让它重新回到了 Windows。</p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/2021-5.png" alt="2021-5" style="zoom:50%;" /><p>第一次坐救护车……希望不再有这种经历了。</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/2021-7.png" alt="2021-7"></p><p>青年湖畔的落日和晚霞。</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/2021-8.png" alt="2021-8"></p><p>重回卫津路，19 年的回忆浮现</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/2021-9.png" alt="2021-9"></p><p>打卡三里屯 Apple Store。</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/2021-10.png" alt="2021-10"></p><p>第一次听周鸿祎老板的讲座。</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/2021-11.png" alt="2021-11"></p><p>第一次去海洋馆，看到了北极狐。</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/2021-13.png" alt="2021-13"></p><p>去看了世界智能大会。</p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/2021-14.png" alt="2021-14" style="zoom:50%;" /><p>AirPods Pro，喧嚣离我远一步。</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/2021-15.png" alt="2021-15"></p><p>青年湖畔的午后。</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/2021-16.png" alt="2021-16"></p><p>青年湖畔的晚霞。</p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/2021-17.png" alt="2021-17" style="zoom:50%;" /><p>可能……是继 4s 后的第一部小手机？</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/2021-18.png" alt="2021-18"></p><p>夜景模式下的体育场。</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/2021-19.png" alt="2021-19"></p><p>2021 初雪，随立冬而至。前一天晚上还在下雨，第二天醒来室外已是银装素裹。</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/2021-20.png" alt="2021-20"></p><p>打卡天津恒隆广场 Apple Store。</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/2021-21.png" alt="2021-21"></p><p>22 考研第一天傍晚，路上满是出校的车。</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/2021-24.PNG" alt="2021-24"></p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/2021-22.png" alt="2021-22"></p><p>每一年都和网易云度过，今年比去年多听了近 200 小时、近 1000 首歌。</p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/2021-23.png" alt="2021-23" style="zoom:50%;" /><p>没想到今年有 324 天都登录了 B 站 🤣</p><hr><p>照片可以定格时间，时间也让照片有了岁月的意义。回望 2021 迈出的每一步，似乎都是平平无奇的一个念头，但这些「抉择」确确实实改变了许多。「落子无悔，抉择本身就是向前」，希望自己可以摆脱抱怨，坚持自己的选择，永远向前看。</p><p>来不及停留，来不及等待。来不及感伤岁月，来不及蹉跎光阴。惟愿 2022 的每一分时光都有意义，继续热爱生活。</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/2021-25.png" alt="2021-25"></p><p>2021，再见！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;用数字记录 2021 很容易，但用文字记录却很难。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Review" scheme="https://blog.superpung.cn/tags/Review/"/>
    
  </entry>
  
  <entry>
    <title>写过的第二个 App</title>
    <link href="https://blog.superpung.cn/my-2nd-app/"/>
    <id>https://blog.superpung.cn/my-2nd-app/</id>
    <published>2021-09-14T14:34:21.000Z</published>
    <updated>2022-04-04T11:31:51.417Z</updated>
    
    <content type="html"><![CDATA[<p>可能是第一个比较成熟的 app。</p><a id="more"></a><h1 id="What-and-Why"><a href="#What-and-Why" class="headerlink" title="What and Why"></a>What and Why</h1><p>好久没有更新博客了。上一次更新还是在 7 月 13 日，正好过去了两个月的时间。上一篇文章是在学习 swiftUI 时记录的，如今已经完成了 <a href="https://github.com/SuperPung/HwS-100days">100 days of swiftUI</a>。写上一篇文章的时候还没开始做这个 App，如今已经结束了。</p><p>两个月的时间，从在家躺平到提前返校，再到开始小学期、开始暑期训练营，再到正式上课……与此同时，这个 App 的开发也正好伴随着我度过这两个月。</p><p>做的第一个 App 是在 2020 年的暑期训练营，是一个 Todo 的快应用。虽然获了奖，但确实太简单了。一个人完成的项目，并没有付出很大的精力。但是在今年的暑期训练营，深深感受到了 Android 原生开发的困难，可能这也是 Flutter 等框架兴起的原因吧。</p><p>言归正传，我的第二个 App 并不能称作“我的”，因为小组的产品和设计起了很大作用，没有她们的努力，这个 App 最终也不会呈现。特别感谢设计组的朋友，无论是界面、配色、交互等各个方面，都设计得很完美。也要感谢 iOS 组组长提供的学习机会，学到了很多。</p><p>App 的功能是记账，当这个需求发布的时候我正想找一个记账的软件，遂即开始开发。我试用了很多记账的 App，大多十分冗杂。最终我选择了 <a href="https://apps.apple.com/cn/app/icost-%E8%AE%B0%E8%B4%A6-%E5%BF%AB%E9%80%9F%E7%AE%80%E6%B4%81%E5%A5%BD%E7%94%A8%E7%9A%84%E7%90%86%E8%B4%A2%E5%8A%A9%E6%89%8B/id1484262528">iCost</a>，并且至今仍在使用。它界面的简介和纯粹在我看来是十分可贵的，我正需要这样一款 App。在我的 App 开发大部分完成后，我发现它和 iCost 仍有很多差距，iCost 某些方面的布局和设计十分巧妙，也正是我之后需要学习的地方。</p><p>虽然 App 的展示结束了，但我认为这款 App 的开发远没有结束。我的 commit 集中在 8 月 8 日的一周（86 commits）和 8 月 15 日的一周（10 commits），之后由于小学期、课程设计、训练营、选修课等无数 ddl 就只能搁置了，大约暂停了 25 天……直到最近才开始修改之前留下的各种 bug，还有很多功能需要完善……</p><h1 id="目前实现的功能"><a href="#目前实现的功能" class="headerlink" title="目前实现的功能"></a>目前实现的功能</h1><h2 id="主页"><a href="#主页" class="headerlink" title="主页"></a>主页</h2><ul><li>本月支出、本月收入、结余</li><li>一键隐藏</li><li>月预算、日预算</li><li>按日期筛选交易记录</li><li>按类型筛选每日交易记录</li></ul><h2 id="记一笔"><a href="#记一笔" class="headerlink" title="记一笔"></a>记一笔</h2><ul><li>选择交易类型（支出、收入、不计入收支）</li><li>添加备注</li><li>选择分类</li><li>选择日期和时间</li><li>填写金额</li></ul><h2 id="摇食堂"><a href="#摇食堂" class="headerlink" title="摇食堂"></a>摇食堂</h2><ul><li>随机选择</li><li>可编辑奖池</li></ul><h2 id="预算"><a href="#预算" class="headerlink" title="预算"></a>预算</h2><ul><li>预算卡片背景随剩余比例变换颜色</li><li>查看预算详情</li><li>预算期内交易明细</li><li>可编辑预算</li></ul><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><ul><li>搜索按钮和界面</li></ul><h2 id="账本"><a href="#账本" class="headerlink" title="账本"></a>账本</h2><ul><li>选择账本</li><li>添加账本</li></ul><h2 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h2><ul><li>选择月份</li><li>显示当月总支出、总入账</li><li>显示当月的每日支出和收入对比</li><li>显示当年的每月支出和收入对比</li><li>长按折线图可显示具体金额</li><li>显示当月的支出排行榜（金额排序）</li><li>显示当月的全部支出排行</li><li>不同排序方式（按金额和按时间）</li></ul><h2 id="账户"><a href="#账户" class="headerlink" title="账户"></a>账户</h2><ul><li>添加不同类型账户</li><li>添加每个账户的资产和备注</li><li>自动计算总资产</li><li>添加负债（可选）</li><li>自动计算净资产</li></ul><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><ul><li>记账日报</li><li>记账月报</li><li>分类管理</li><li>常见问题</li><li>问题反馈</li></ul><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>还有很长的路要走……所以先告一段落吧，希望有朝一日可以把 App 完善得更好。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;可能是第一个比较成熟的 app。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Review" scheme="https://blog.superpung.cn/tags/Review/"/>
    
  </entry>
  
  <entry>
    <title>在 swiftUI 中自定义修饰器</title>
    <link href="https://blog.superpung.cn/custom-modifier/"/>
    <id>https://blog.superpung.cn/custom-modifier/</id>
    <published>2021-07-13T02:41:14.000Z</published>
    <updated>2021-07-13T02:49:32.569Z</updated>
    
    <content type="html"><![CDATA[<p>学习 swiftUI 的记录。</p><a id="more"></a><p>首先定义结构体，在其中对内容修饰：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Watermark</span>: <span class="title">ViewModifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> text: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">body</span>(<span class="params">content</span>: <span class="type">Content</span>)</span> -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ZStack</span>(alignment: .bottomTrailing) &#123;</span><br><span class="line">            content</span><br><span class="line">            <span class="type">Text</span>(text)</span><br><span class="line">                .font(.caption)</span><br><span class="line">                .foregroundColor(.white)</span><br><span class="line">                .padding(<span class="number">5</span>)</span><br><span class="line">                .background(<span class="type">Color</span>.black)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后根据此结构体，定义 <code>extension</code>，在其中定义修饰器函数：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">watermarked</span>(<span class="params">with</span> <span class="params">text</span>: <span class="type">String</span>)</span> -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.modifier(<span class="type">Watermark</span>(text: text))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终只需调用 <code>extension</code> 中的函数即可实现：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Color</span>.green</span><br><span class="line">    .frame(width: <span class="number">300</span>, height: <span class="number">200</span>)</span><br><span class="line">    .watermarked(with: <span class="string">&quot;Hacking with Swift&quot;</span>)</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/image-20210713104903030.png" alt="image-20210713104903030"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学习 swiftUI 的记录。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Swift" scheme="https://blog.superpung.cn/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>关于最近，以及……</title>
    <link href="https://blog.superpung.cn/rev-1/"/>
    <id>https://blog.superpung.cn/rev-1/</id>
    <published>2021-07-07T04:00:37.000Z</published>
    <updated>2021-07-17T14:17:26.915Z</updated>
    
    <content type="html"><![CDATA[<p>小记。</p><a id="more"></a><h1 id="关于大学生活已经过去了一半这件事"><a href="#关于大学生活已经过去了一半这件事" class="headerlink" title="关于大学生活已经过去了一半这件事"></a>关于大学生活已经过去了一半这件事</h1><p>大学生活度过了一半，仍旧在学期内忙碌、假期内无所事事两个状态间切换，却没有留下些什么。</p><p>看到许多同龄人在大学两年快速成长，收获颇丰，学习生活两开花，令人羡慕。</p><p>假期前度过的考试周着实令人感到紧张刺激，感觉是一个学期记忆里的高峰，也是学习新知识的最多阶段。</p><p>关于课业，鄙人的大类课程终于告一段落了，接下来将面对专业方向的选择，于是在这个历史性的阶段，想着整理一番两年的学习资料，与它们告别，同时便于后人翻阅。</p><p>考试周前在 GitHub 上偶然间看到了许多课程资料分享的 repo，于是 Google 了一下，发现本校尚无，遂自创之。</p><p>后在考试期间、放假之初也在想如何归纳，后来慢慢变得细化、有条理，最终花了几天时间创建完成。</p><p>本想着能节约一下本就贫瘠的硬盘空间，没想到百余次 commit 让 .git 文件夹达到了 10 G，是资料文件的好几倍……</p><p>算了，10 G 就 10 G 吧……</p><p>就放在 <a href="https://github.com/SuperPung/TJU-CourseSharing">这里</a> 了，欢迎有缘人看到提提 Issue 或 PR……</p><p>希望这个项目可以帮助到更多的人吧……</p><h1 id="关于-2021-年过去了一半却还没有总结-2020-年这件事"><a href="#关于-2021-年过去了一半却还没有总结-2020-年这件事" class="headerlink" title="关于 2021 年过去了一半却还没有总结 2020 年这件事"></a>关于 2021 年过去了一半却还没有总结 2020 年这件事</h1><p>2020 年感觉经历了很多，本想在寒假的时候认真总结一下，但却又想不出什么值得纪念的事情。</p><blockquote><p>从人类尺度上来说，时间是连续的，所谓的年也不过是人为根据天体运行规律与气候所做的尺度划分。</p><p>虽然从回忆中单单拎出任何一件事来说，都不足以道，但是聚在一起，反倒如潮水般，暗流奔涌。</p></blockquote><p>无数件小事堆叠、重合，不断推搡着时间前进，有时多得让人喘不过气，有时空闲得静看庭花。</p><p>对所有人来说非同寻常的 2020 年，不知改变了多少人的人生轨迹。</p><p>疫情束缚了人的脚步，史无前例的线上教学，给了我莫大的自由空间。</p><p>2020 年，继续在博客上活跃，也尝试了公众号（因为发了很多实验讲解导致同学关注的很多），找到了喜欢做的事。</p><p>2020 年， 举行了线上发布会，这也是我开始凌晨一点守候  发布会的开端。从 WWDC20 开始， 至今所有的发布会都熬夜看完直播。从惊艳的 iOS 14、iPadOS 14，还有 macOS Big Sur；从 iPad Air、Apple Watch 6 到 iPhone 12、Apple Silicon M1、新的 MacBook Air、MacBook Pro、Mac mini，再到不痛不痒的 iOS 15、iPadOS 15、macOS Monterey……一年多的时光， 正潜移默化地影响着我的生活。</p><p>第一次接触 macOS 是官网的 Mojave 介绍，壁纸随着时间的推移，光影也在变化。后来了解到了黑苹果，最后熬了几个夜终于给装好了，用了一年多没出现异常。</p><p>后来换了真正的 MacBook，原来的电脑也结束了使命，重装回了 Windows。</p><p>在此记录一下，以纪念陪伴我一年的 Hackintosh。</p><p>2020 年，被困在内，但也可能是我向外迈出的第一步。参加了创新计划，最终顺利结题。参加了暑期训练营，第一次写应用，还获得了小奖（那段时间忙得甚至没来得及记录……）。第一次参加社团，当上了部长，组织了几次活动，有些成就感。</p><p>鄙人虽然才疏学浅，但很喜欢向别人分享学到的知识。2020 年报名了新生小班，遇到了非常厉害的几位“同事”，也接触了许多刚入大学的新生。</p><p>有幸指挥了开学典礼，印象深刻的是前夜的准备。</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/before-open.PNG" alt="before-open"></p><p>（这张图片拍的不错，出自摄影师之手）</p><p>准备完，回宿舍的路上，安静的没有人，忽然觉得很自由。</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/back-to-dom.jpg" alt="back-to-dom"></p><p>（这张图片当然是我自己拍的，但不是趴在地上）</p><p>新生周结束的时候，好多小班都感慨颇深。</p><blockquote><p>工作很辛苦，几乎把宿舍搬到了办公室，随时回消息，提前商量通知，虽然累，但是很快乐，一起吐槽奇葩问题，一起欣慰工作顺利，脑洞大开，脑回路拓宽，一起唱歌，一起蹦迪，一起吃喝，一起复习准备考试，一起湖边看星星唱歌。</p><p>好久没有这种一个团队一起付出的感觉了，这三周我很开心，很回味，机会不再有，友谊不会散~</p><p>——hrq</p></blockquote><blockquote><p>太多的话来不及表达，太多的人来不及道别，太多的事来不及结尾。</p><p>时过境迁，岂敢奢求驻足暂歇</p><p>幸甚至哉，得同道之人渡日夜</p><p>愿君前程皆坦途，往来莫徘徊</p><p>——hzy</p></blockquote><blockquote><p>永远不要甘于自己的平庸，永远对梦想和目标满怀热忱，永远永远不要习惯懒惰。</p><p>——zyn</p></blockquote><blockquote><p>面对大学里的众多选择，我曾选择逃避，选择承认自己的平庸然后自暴自弃。这段操心而忙碌的时光就像闹铃一般吵醒了我，让我突然摆脱了之前浑浑噩噩的状态，找到了自己为之奋斗的目标。</p><p>请永远保持踏进校门时心中的那份希冀与热忱。</p><p>——zyh</p></blockquote><p>还有很多，现在可能也回忆不起来了。只记得那是一个夏夜，十几个少年在湖边且行且歌。</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/xiaobans-and-stars.JPG" alt="xiaobans-and-stars"></p><p>有星空相伴，亦如星般璀璨。</p><p>2020 年，有些事情确实没有白做，但得到的同时也伴有失去。没有什么两全其美的办法，尽力去弥补就好了。</p><p>在此记录一下，以纪念逝去的 2020。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;小记。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Review" scheme="https://blog.superpung.cn/tags/Review/"/>
    
  </entry>
  
  <entry>
    <title>《数据库原理》笔记</title>
    <link href="https://blog.superpung.cn/fcds-notes/"/>
    <id>https://blog.superpung.cn/fcds-notes/</id>
    <published>2021-06-28T12:56:49.000Z</published>
    <updated>2021-06-28T12:58:07.292Z</updated>
    
    <content type="html"><![CDATA[<p>《数据库系统基础教程》《数据库系统全书》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;《数据库系统基础教程》《数据库系统全书》&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="Notes" scheme="https://blog.superpung.cn/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>《数字逻辑与数字系统》笔记</title>
    <link href="https://blog.superpung.cn/ddca-notes/"/>
    <id>https://blog.superpung.cn/ddca-notes/</id>
    <published>2021-06-24T07:10:29.000Z</published>
    <updated>2021-06-24T07:12:47.872Z</updated>
    
    <content type="html"><![CDATA[<p>《数字设计和计算机体系结构》</p><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;p&gt;《数字设计和计算机体系结构》&lt;/p&gt;</summary>
    
    
    
    
    <category term="Notes" scheme="https://blog.superpung.cn/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>《形式化方法》笔记</title>
    <link href="https://blog.superpung.cn/fsv-notes/"/>
    <id>https://blog.superpung.cn/fsv-notes/</id>
    <published>2021-06-22T12:50:21.000Z</published>
    <updated>2021-06-22T12:55:51.243Z</updated>
    
    <content type="html"><![CDATA[<p>Formal Specification Using Z by David Lightfoot</p><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;p&gt;Formal Specification Using Z by David Lightfoot&lt;/p&gt;</summary>
    
    
    
    
    <category term="Notes" scheme="https://blog.superpung.cn/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>宣言</title>
    <link href="https://blog.superpung.cn/declaration/"/>
    <id>https://blog.superpung.cn/declaration/</id>
    <published>2021-06-11T03:39:31.000Z</published>
    <updated>2021-06-11T04:20:28.816Z</updated>
    
    <content type="html"><![CDATA[<p>宣言</p><a id="more"></a><p style="TEXT-ALIGN: center" align="center"><font color="navy"><strong>社会主义没有辜负中国</strong></font></p><p style="TEXT-ALIGN: center" align="center"><font color="navy">宣言</font></p><p>　　习近平总书记在党史学习教育动员大会上深刻指出，对共产主义的信仰，对中国特色社会主义的信念，是共产党人的政治灵魂，是共产党人经受住任何考验的精神支柱，强调党的百年奋斗历程和伟大成就，是我们增强道路自信、理论自信、制度自信、文化自信最坚实的基础。总书记的话语，掷地有声、坚定豪迈，深刻揭示了社会主义、共产主义与百年求索、百年奋斗的内在关系，彰显了中国共产党人沿着中国特色社会主义这条唯一正确道路前进的坚毅和执着。</p><p>　　百年历程，许多人和事仍然历历在目，许多呐喊和高歌犹在耳旁。走过风霜雪雨，创造人间奇迹，我们有义务用胜利告慰先烈：社会主义没有辜负中国！我们有责任让历史告诉未来：社会主义不会辜负中国！</p><p>　　<strong>（一）</strong></p><p>　　历史的偶然中往往带着必然。19世纪40年代，古老的中国被列强的坚船利炮打开了国门，中国命运从此进入前所未有的悲惨境地。几乎是同样的年代，在资本主义发展方兴未艾的欧洲，马克思、恩格斯开始了对科学社会主义、对人类解放进步事业的伟大探索。</p><p>　　鸦片战争后的中国，积贫积弱、任人宰割。“四万万人齐下泪，天涯何处是神州”。谭嗣同的这句诗，字字血泪、字字彷徨。太平天国、戊戌变法、义和团运动、辛亥革命……中国人在黑暗中苦苦摸索救亡图存之路；改良主义、自由主义、社会达尔文主义、无政府主义、实用主义……种种西方的理论和学说都被引进作为强国富民的药方。一个个方案都试过了，却又屡屡化为泡影。一条条道路都探寻了，却撞得头破血流。“无量头颅无量血，可怜购得假共和。”列强横行、军阀混战，人民水深火热，第一次世界大战更是戳穿了资本主义文明看似美好的幻象。无数仁人志士一次次地用生命和灵魂发问：中国的出路在哪里？民族的希望在哪里？</p><p>　　十月革命一声炮响，给中国送来了马克思列宁主义。这是一场伟大的历史之约，这是一个郑重的历史之诺！封建社会上千年来的枷锁太严密，非进行彻底的社会改造不能除旧布新。帝国主义带给中国人的压迫太沉重，非动员几万万劳苦大众的伟力不能与之相抗。</p><p>　　李大钊赞叹：“人道的警钟响了！自由的曙光现了！试看将来的环球，必是赤旗的世界！”陈独秀宣示：“十八世纪法兰西的政治革命，二十世纪俄罗斯的社会革命，当时的人都对着他们极口痛骂；但是后来的历史家都要把他们当做人类社会变动和进化的大关键。”年轻的毛泽东疾呼：“时机到了！世界的大潮卷得更急了！洞庭湖的闸门动了，且开了！浩浩荡荡的新思潮业已奔腾澎湃于湘江两岸了！”</p><p>　　1920年乍暖还寒的春天，29岁的陈望道在老家浙江义乌分水塘的柴房里，废寝忘食两个月，第一次完整译出了《共产党宣言》，首印1000册即刻售罄，到1926年重印再版达17次之多。先进的、不屈的中国人经过反复比较、反复推求，选择了马克思主义作为救国救民的道路，作为始终不渝的志向。</p><p>　　1921年7月，以马克思主义为指导思想、以共产主义为奋斗目标的政党——中国共产党诞生，胸怀着信念、嘱托和梦想，在上海石库门的旭日里、在嘉兴南湖的碧波中毅然起航。从此以后，社会主义的火种就在东方点燃，曾经困顿无望的中国就有了方向！</p><p>　　<strong>（二）</strong></p><p>　　大革命失败后，共产党员夏明翰在汉口被捕，英勇就义前给妻子写信诀别：“抛头颅、洒热血，明翰早已视等闲。各取所需终有日，革命事业代代传。红珠留着相思念，赤云孤苦望成全。坚持革命继吾志，誓将真理传人寰。”在那些风雨如晦的岁月里，像夏明翰这样为了共产主义信仰九死而不悔、坚信革命理想一定会实现的烈士，何止千千万万。他们一旦认定了信仰和主义，就再也没有彷徨过、动摇过，不惜用青春和鲜血浇灌“共产花开”。</p><p>　　这个信仰和主义，闪耀着理想烛照人心的光芒。《共产党宣言》描绘道：“代替那存在着阶级和阶级对立的资产阶级旧社会的，将是这样一个联合体，在那里，每个人的自由发展是一切人自由发展的条件。”在社会主义新世界里，人的价值居于第一位，没有剥削、没有压迫，劳动光荣、劳工至上，人人平等富足，彼此亲如一家……这是超越资本主义世界的新世界，也是中华民族自古以来向往的“天下大同”，吸引着无数先进分子心驰之、神往之、践行之。</p><p>　　这个信仰和主义，揭示着社会发展演化的规律。世界大势、浩浩汤汤，顺之者生、逆之者亡。中国共产党是工人阶级的先锋队，代表着先进生产力的方向，代表着历史前进的潮流。经过科学理论武装、掌握社会发展规律的党，就具备了引领社会变革、推进正义事业的自觉，就具备了无坚不摧、百折不挠的力量。</p><p>　　这个信仰和主义，指引着革命走向胜利的道路。以毛泽东为主要代表的中国共产党人，用马克思主义立场观点方法分析中国国情、解决中国问题，鲜明提出中国革命的任务是推翻帝国主义、封建主义、官僚资本主义“三座大山”的压迫，中国革命的道路是农村包围城市、武装夺取政权，中国革命的力量是工人阶级、农民阶级、小资产阶级和一定条件下的民族资产阶级，无产阶级是领导力量、人民是真正的英雄，中国革命要分民主主义革命和社会主义革命两个阶段进行……这些科学认识，处处闪耀着马克思主义真理的光辉，引领着中国革命澎湃向前。</p><p>　　革命理想高于天。正是在理想信念的火炬下，我们党广泛发动工农群众，敢于突击冲锋，成功推进了北伐战争；正是在理想信念的火炬下，幸存的共产党人掩埋了被反动派屠杀的同伴的尸首，拿起武器、走进山林，投入新的战斗；正是在理想信念的火炬下，红军将士闯天险、战强敌，爬雪山、过草地，“风雨浸衣骨更硬，野菜充饥志越坚”，完成了彪炳人类史册的二万五千里长征；正是在理想信念的火炬下，党和人民用坚忍不拔、血战到底，书写了抗击日本军国主义的民族壮歌，取得了抵御外侮的最终胜利；正是在理想信念的火炬下，英勇的人民解放军只用三年时间就打垮了国民党反动派800万军队，彰显了什么是“天若有情天亦老，人间正道是沧桑。”</p><p>　　“批判的武器当然不能代替武器的批判，物质力量只能用物质力量来摧毁。”28年浴血奋战，28年砥砺前行，我们的国家从任人欺辱的“东亚病夫”变成令世界刮目相看的“东方醒狮”，我们的人民从做牛做马的奴隶变成扬眉吐气的主人。中国革命的胜利，就是中国共产党人运用马克思主义挽救中国的伟大实践，就是科学真理彰显力量的伟大历程！</p><p>　　<strong>（三）</strong></p><p>　　1949年6月30日，毛泽东发表《论人民民主专政》提出，我们要经过人民共和国，由农业国进到工业国，由新民主主义社会进到社会主义社会和共产主义社会。中华人民共和国的成立，是科学社会主义原则与中国革命实际相结合的历史结果，也标志着人类进步事业和社会主义力量的发展壮大，开启了社会主义在世界东方的伟大时代。</p><p>　　这是一个革故鼎新、改天换地的时代。面对重重困难考验，中国共产党带领人民迅速医治战争创伤、恢复国民经济，以中国独有的形式实现了对农业、手工业、资本主义工商业的社会主义改造，创造性地完成了由新民主主义革命向社会主义革命的转变，成功实现了中国历史上最深刻最伟大的社会变革。轰轰烈烈的土地改革，使三亿多农民无偿获得七亿亩土地和生产资料；1954年宪法，用根本大法的形式把人民民主和社会主义的原则固定下来；人民代表大会制度、中国共产党领导的多党合作和政治协商制度、民族区域自治制度，构筑起社会主义制度的“四梁八柱”……在这个古老而青春的国度，中国人民建设着社会主义的巍巍大厦，品尝着幸福生活的滋味。</p><p>　　这是一个朝气蓬勃、激情燃烧的时代。“每一秒钟都为创造社会主义社会而劳动”。规划于清末的成渝铁路在新中国成立前的40多年里还是地图上一条虚线，1950年正式开工后只用两年就全线贯通；“一五”期间156个重点工程、694个建设项目全部建成，打下了社会主义工业化的坚实基础；治淮治黄、治理长江取得明显效果，农田水利建设在全国热火朝天铺开；全国城乡卫生医疗网基本形成，天花、霍乱、血吸虫病、疟疾、鼠疫等疾病，或被根除、或得到有效防治……新生的人民政权唤醒了巨大的生产力，新生的社会主义制度激活了人民的能量、促进了人民的福祉。</p><p>　　这是一个英雄辈出、斗志昂扬的时代。为了和平，志愿军将士出国作战，谱写了以“钢少气多”力克“钢多气少”的雄壮史诗；为摘掉“贫油少油”的帽子，“铁人”王进喜带领钻井队战天斗地，“宁肯少活20年，拼命也要拿下大油田”；为改变贫穷落后的面貌，县委书记的榜样焦裕禄带领兰考人民整治“三害”，“生也沙丘，死也沙丘，父老生死系”；为打牢国家自立自强的基石，钱学森、钱三强、邓稼先等一大批科研工作者把汗水和热血洒在茫茫戈壁，创造了“两弹一星”的奇迹……无数有名字的英雄和没有留下名字的英雄，用血肉之躯和坚强臂膀，扛起民族的责任、共和国的荣光。</p><p>　　“筚路蓝缕，以启山林。”在中国这样经济文化比较落后、人口众多的东方大国建设社会主义，犹如攀登一座人迹未至的高山，没有笔直的大道可走，没有现成的路径可循。我们依靠“人民创造历史”的伟力，依靠“集中力量办大事”的优势，创造了一个又一个可以载入中华民族和人类史册的奇迹。我们凭着“革命加拼命”的精神，凭着“一万年太久、只争朝夕”的勇气，在九百六十多万平方公里的土地上描绘了社会主义新中国的最美图画。我们也曾在摸索探求的路上，遭受“文化大革命”这样严重的挫折，惨痛教训值得永远汲取。</p><p>　　无论平坦还是崎岖，无论阳光还是风雨，党领导人民探索社会主义道路的脚步始终向前。历史已经证明：“我们不但善于破坏一个旧世界，我们还将善于建设一个新世界”！</p><p>　　<strong>（四）</strong></p><p>　　“什么是社会主义？怎样建设社会主义？”这个回荡在中国上空的历史之问，中国共产党人从未停止作答。从深刻揭示社会主义建设和社会主义改造的“十大关系”，到及时作出我国社会主要矛盾已经转变成“先进的社会主义制度同落后的社会生产力之间的矛盾”的重要论断，到鲜明提出正确处理人民内部矛盾，无不是宝贵的探索、艰难的行进。</p><p>　　党的十一届三中全会成为党的历史和新中国历史上具有深远意义的伟大转折。停止使用“以阶级斗争为纲”，把全党工作重点转移到社会主义现代化建设上来，重新确立解放思想、实事求是的思想路线……为了建设社会主义，中国共产党领导人民矢志推进新的伟大革命，开启了改革开放的伟大航程。</p><p>　　贫穷不是社会主义！邓小平指出：“社会主义的本质，是解放生产力，发展生产力，消灭剥削，消除两极分化，最终达到共同富裕。”为了使生产关系适应生产力的发展，家庭联产承包责任制广泛施行，经济特区先行先试，乡镇企业异军突起，科技体制改革深入推进，对外开放格局加快形成，蕴藏在广大人民中的活力创造力充分迸发。</p><p>　　走自己的道路，建设有中国特色的社会主义！我们深刻认识到我国处于并将长期处于社会主义初级阶段，提出党在社会主义初级阶段的基本路线，积极发展公有制为主体、多种所有制经济共同发展的基本经济制度，不断完善社会主义市场经济体制，提出小康社会目标和现代化分步走战略，开创和发展了中国特色社会主义。</p><p>　　坚持改革开放的社会主义方向！坚持改革开放、坚持四项基本原则，这两个基本点紧密联系、不可偏废。我们坚持社会主义物质文明和精神文明“两手抓、两手都要硬”，坚定推进党的建设新的伟大工程，全面推进中国特色社会主义经济、政治、文化、社会、生态文明建设，让人民群众共享改革发展成果，为社会主义理想插上现实的翅膀。</p><p>　　改革开放40多年来，我国经济总量一路超过意大利、法国、英国、德国、日本，稳居世界第二；我国人民生活水平持续提升，已经进入中高收入国家行列；神州大地面貌日新月异，公路成网、铁路密布、西气东输、南水北调、高坝矗立、大桥巍峨，天堑变通途；中国还战胜了历史罕见的洪涝、雨雪冰冻、地震等重大自然灾害和非典等重大疫病，经受住了亚洲金融危机和国际金融危机严峻考验，风雨过后更见气度从容、身姿挺拔。</p><p>　　在把握历史前进的逻辑中前进，在顺应时代发展的潮流中发展。中华大地汹涌澎湃的伟大实践表明：只有社会主义才能发展中国，只有改革开放才能让中国大踏步赶上时代、让人民过上幸福生活。中国特色社会主义道路越走越宽广！</p><p>　　<strong>（五）</strong></p><p>　　雄伟壮丽的社会主义事业，凝结着一代代共产党人的艰苦卓绝和付出奉献，负载着多少先哲英烈的寄托与热望。当历史的接力棒再次传递，习近平总书记的话语铿锵有力：我们这一代共产党人的任务，就是继续把坚持和发展中国特色社会主义这篇大文章写下去！</p><p>　　党的十九大向全党全国和全世界庄严宣告：“经过长期努力，中国特色社会主义进入了新时代，这是我国发展新的历史方位。”</p><p>　　新时代的中国，理想的旗帜鲜艳高扬。面对世界百年未有大变局，习近平总书记带领全党全国人民揽全局、应变局、开新局，党和国家事业取得历史性成就、实现历史性变革，中华民族比历史上任何时候都更接近民族复兴的伟大目标。中国人民对马克思主义、共产主义的信仰更加坚定，对中国特色社会主义的信念更加牢固，对实现中华民族伟大复兴的信心空前高涨。</p><p>　　新时代的中国，发展的动力深厚强劲。从十八届三中全会的全面深化改革，到全面依法治国、全面建成小康社会，再到全面从严治党、以党的自我革命推动社会革命，从坚持和完善中国特色社会主义制度，到立足新发展阶段、贯彻新发展理念、构建新发展格局、推动高质量发展，全面建设社会主义现代化国家，中国特色社会主义的战略布局日益完善，现代化建设的方向目标愈加清晰。</p><p>　　新时代的中国，人民的地位充分彰显。“江山就是人民，人民就是江山”，初心的回响穿越时空。“人民对美好生活的向往，就是我们的奋斗目标”，铿锵的宣示淬铁成钉。为了实现中国人民摆脱贫困的千年夙愿，党领导人民打响了脱贫攻坚战，贫困地区广大干部群众顽强拼搏，第一书记和驻村干部全力投入，东西部协作精准对接，社会各界有钱出钱、有力出力，一户户贫困乡亲感受着社会主义大家庭的温暖，一座座寂静的深山涌动着生机和希望。</p><p>　　新时代的中国，团结的力量一往无前。面对科技的高峰，我们从不退缩。嫦娥飞天、蛟龙入海、天眼观星、北斗组网，就在前不久，“祝融”号火星车经过295天的旅程，成功登陆火星。面对霸凌和打压，我们从未屈服，全党全国敢于斗争、勇于胜利，攒成一股劲、拧成一股绳。百年不遇的新冠肺炎疫情，把我们每个人的命运与国家的、集体的命运紧紧连在一起，14亿中国人心手相连、守家护国，创造了人类抗疫斗争史上的伟大奇迹……社会主义的制度优势得到极大彰显。</p><p>　　天地有正气，浩然塞苍冥。如果说社会主义作为人类的正义事业、崇高的价值追求，赋予了新时代以最鲜明的底色、最厚重的底气；那么，新时代就以它最波澜壮阔的实践，赋予了科学社会主义以新的思想维度、新的历史高度。</p><p>　　2021年4月，习近平总书记专程来到广西全州，瞻仰红军长征湘江战役纪念园，他动情地说，理想信念之火一经点燃就会产生巨大的精神力量，要缅怀革命先烈，赓续共产党人精神血脉，坚定理想信念，砥砺革命意志。</p><p>　　回望八十七年前，长征路上、湘江岸边，无数红军战士为了保存革命的火种鏖战拼杀，用鲜血染红了漫漫征程、滚滚江水。这些大多二十来岁、甚至只有十五六岁的战士们，视死而如归、乐观而顽强，就是因为胸怀着对革命必胜的信念，对社会主义、共产主义美好社会的憧憬。这是一个党永生不灭的基因，是一个民族由衰而兴的密码。</p><p>　　今天，我们可以告慰百年来一切先辈和英魂的是：此时此刻，社会主义的阳光正映照在奋斗者的身影中、孩子们的笑脸上，中国特色社会主义旗帜正引领中华民族伟大复兴呈现出前所未有的光明前景。我们必将创造让世界刮目相看的更大奇迹，必将实现共产党人最崇高的伟大理想！</p><hr><p style="TEXT-ALIGN: center" align="center"><font color="navy"><strong>中国没有辜负社会主义</strong></font></p><p style="TEXT-ALIGN: center" align="center"><font color="navy">宣言</font></p><p>　　英国伦敦，大英博物馆，1516年出版的莫尔的《乌托邦》一书静静躺在展柜里。同时留在这座博物馆图书阅览室地板上的，是一位伟人厚重的足印。正是这位为人类解放事业奋斗终身的马克思，将社会主义从空想变为科学，从而广泛而深刻地影响了世界，也广泛而深刻地改变了中国。</p><p>　　中国北京，人民大会堂，习近平总书记2016年在庆祝中国共产党成立95周年大会上向世界宣示：中国共产党领导中国人民取得的伟大胜利，使具有500年历史的社会主义主张在世界上人口最多的国家成功开辟出具有高度现实性和可行性的正确道路，让科学社会主义在21世纪焕发出新的蓬勃生机。</p><p>　　数百年奔流激荡。曾经苦难深重，如今意气昂扬。在科学真理和崇高理想的指引下，中国大地发生历史巨变，我们无比坚定，社会主义没有辜负中国！在中国共产党领导人民的顽强奋斗中，信仰的光芒熠熠闪烁，伟大的事业青春盎然，我们无比自豪，中国没有辜负社会主义！</p><p>　　<strong>（一）</strong></p><p>　　走进江苏常州的瞿秋白纪念馆，“我总想为大家辟一条光明的路”的誓言格外醒目。</p><p>　　中国共产党这个百折不回的寻路者、大勇无畏的开路人，面对种种考验、重重难关，以愚公移山的坚定、精卫填海的奉献，带领中国人民走出了一条险峻而壮丽、艰辛而宽广的中国道路。中国特色社会主义道路，是党和人民100年奋斗、创造、积累的根本成就，是引领中国进步、增进人民福祉、实现民族复兴的康庄大道。</p><p>　　这是一条在历史洪流中扭转民族命运、书写人间奇迹的奋斗之路。在“山重水复疑无路”的彷徨困顿中，马克思主义给中国带来“柳暗花明”。从此，中国共产党开展了以马克思主义之“矢”射中国之“的”的伟大实践。为了推翻“三座大山”，党领导人民开创了农村包围城市、武装夺取政权的革命道路，建立了新中国。为了改变一穷二白的落后面貌，我们建立起全新的社会主义制度，形成了独立的比较完整的工业体系和国民经济体系，并在总结正反两方面经验的基础上，开启了改革开放的伟大航程，极大解放和发展了生产力。面对民族复兴和世界变局的交织激荡，我们坚定理想信念、保持战略定力，围绕坚持和发展中国特色社会主义，完善总体布局、确立战略布局，引领中华民族迎来了从站起来到富起来、强起来的伟大飞跃。</p><p>　　这是一条把人民放在最高位置，得民心、顺民意、惠民利的初心之路。“人民就是江山，共产党打江山、守江山，守的是人民的心，为的是让人民过上好日子。”一代代共产党人为了人民的利益和福祉，把青春和生命、鲜血和汗水，倾注在这片可爱的土地。“小康路上一个都不能少”！为了让幸福的阳光洒遍神州每一个角落，习近平总书记带领全党全国打响脱贫攻坚战，25.5万个驻村工作队挺进一线，近200万名乡镇干部、数百万村干部倾力奋战，八年时间实现了9899万农村贫困人口全部脱贫，832个贫困县全部摘帽，12.8万个贫困村全部出列。这是党、人民、民族的伟大光荣，是我国社会主义制度优越性的充分体现，标志着中华民族向着共同富裕迈出了一大步。</p><p>　　这是一条在经济文化落后国家探索建设现代化的创造之路。现代化是世界近代以来的历史潮流，也寄托着马克思主义先驱对理想社会的期许。错失了工业革命机遇的中国，从所谓“天朝上国”跌落成任人宰割的“鱼肉”。严复著《原强》《辟韩》，郭嵩焘著《使西纪程》，孙中山著《建国方略》，都见证着对现代化的希望和失望。只有中国共产党登上历史舞台，根除了帝国主义和封建主义的祸根，实现了经济基础和上层建筑的彻底改造，才为中国现代化提供了根本前提。从“四个现代化”目标到“三步走”战略，从建设小康社会到建设现代化强国……党领导人民不但用几十年时间走完了发达国家几百年走过的工业化历程，而且探索开辟了物质文明和精神文明相协调、全体人民共同富裕、人与自然和谐共生、走和平发展道路的中国式现代化，为人类社会发展提供了现代化的全新选择。</p><p>　　这是一条始终保持革命精神、以党的自我革命引领伟大社会革命的锻造之路。列宁指出：“无产阶级在争取政权的斗争中，除了组织，没有别的武器。”把曾经“一盘散沙”的中国凝聚起来，不能不依靠有理想、有纪律的马克思主义政党；为宏伟的目标、艰巨的任务而奋斗，不能不保持党的先进性和纯洁性、创造力和战斗力。古田会议、遵义会议、延安整风、“两个务必”、伟大工程和新的伟大工程……每到重大关头，党都指引着前进的方向、担当起历史的责任，坚持真理、修正错误，带领人民翻过一座又一座山，夺取一个又一个胜利。党的十八大以来，以习近平同志为核心的党中央坚持党对一切工作的领导，以自我革命精神推进全面从严治党，以党的革命性锻造引领新的伟大斗争。“打铁必须自身硬。”新时代共产党人用决心和勇气夯实了事业常青之基，用行动回答了跳出“历史周期率”的世纪之问！</p><p>　　2021年3月，俄罗斯联邦共产党中央委员会主席根纳季·久加诺夫在《真理报》撰文指出：“中国共产党的经验证明，20世纪末社会主义的失利，并不是各种反共产主义者喜欢说的‘乌托邦社会主义计划的失败’……在中共领导下，中国人民有能力应对时代的一切挑战，沿着建设新时代中国特色社会主义的正确道路前进”。</p><p>　　中国用铁一般的事实宣告：历史没有终结也不会终结，社会主义生机蓬勃、前途无限！中国特色社会主义道路不但走得对、走得通，而且必将通往更加光明的未来！</p><p>　　<strong>（二）</strong></p><p>　　马克思主义为人间带回真理的火种，但它并没有结束真理，而是开启了真理之书的扉页。中国，以鲜活厚重的理论创新、思想创造，在科学社会主义这部巨著里写下了属于自己的不朽篇章。</p><p>　　——坚守：中国从未背离科学社会主义基本原则</p><p>　　马克思、恩格斯曾对未来社会主义社会的发展过程、发展方向、一般特征作过科学预测和设想。比如，在生产资料公有制基础上组织生产，满足全体社会成员的需要是社会主义生产的根本目的；对社会生产进行有计划的指导和调节，实行等量劳动领取等量产品的按劳分配原则；合乎自然规律地改造和利用自然……这些构成了科学社会主义基本原则。</p><p>　　百年峥嵘岁月，无论弱小还是强大，无论处于高潮还是遭遇挫折，中国共产党从未动摇对科学社会主义基本原则的坚持。我们坚持党的领导；坚持人民民主专政的国体和人民代表大会制度的政体；坚持劳动光荣、按劳分配的社会主义分配原则；坚持把人的价值放在第一位，不断促进人的全面发展和社会全面进步……这些都在新的历史条件下体现了科学社会主义基本原则，赓续了社会主义的基因血脉。</p><p>　　——发展：中国不断推进马克思主义中国化</p><p>　　“马克思的整个世界观不是教义，而是方法。它提供的不是现成的教条，而是进一步研究的出发点和供这种研究使用的方法。”只有发展马克思主义，才能坚持马克思主义，这就是历史的辩证法。</p><p>　　百年风雨兼程，中国共产党始终高举真理的旗帜、进行理论的创造，坚持解放思想和实事求是相统一、培元固本和守正创新相统一，不断推进马克思主义基本原理同中国实际相结合，产生了毛泽东思想、邓小平理论、“三个代表”重要思想、科学发展观等重大理论创新成果，不断丰富和发展中国化的马克思主义，用与时俱进的科学理论回答了“中国向何处去、社会主义向何处去”的历史课题、时代之问。这些深深扎根于中国大地的思想成果，深刻影响着国家民族的前途命运，极大改变着中国人民的精神面貌，社会主义参天大树在世界东方根深叶茂。</p><p>　　——领航：引领中国、影响世界的当代中国马克思主义、21世纪马克思主义</p><p>　　“哲学把无产阶级作为自己的物质武器。同样，无产阶级也把哲学作为自己的精神武器。”从现实的此岸通向梦想的彼岸，从必然王国通向自由王国，必定依靠揭示客观规律、洞察历史大势、回应时代呼声的科学理论。</p><p>　　百年大江奔流，在中华民族伟大复兴的关键时期，在当今世界动荡变革的历史变局之中，中国共产党人凭着历史的积淀、理想的坚守、开拓的勇毅，紧紧围绕新时代坚持和发展什么样的中国特色社会主义、怎样坚持和发展中国特色社会主义，推进实践的新革命、思想的新长征，结出了饱含中国精神、时代精华的硕果——习近平新时代中国特色社会主义思想。</p><p>　　“中国共产党领导是中国特色社会主义最本质的特征”“坚持以人民为中心的发展思想”“推动全体人民共同富裕取得更为明显的实质性进展”“充分发挥市场在资源配置中的决定性作用，更好发挥政府作用”“坚持创新、协调、绿色、开放、共享的发展理念”“绿水青山就是金山银山”“推动构建人类命运共同体”……这些富有创见的思想、观点和论断，对马克思主义作出了原创性、时代性贡献，开拓了中国特色社会主义的新境界。</p><p>　　新时代中国共产党人赋予马克思主义以鲜明的中国特色、民族特色、时代特色，使人们对共产党执政规律、社会主义建设规律、人类社会发展规律的认识达到了一个新的历史高度，使科学社会主义释放出具有强大说服力、感召力的真理光芒！</p><p>　　<strong>（三）</strong></p><p>　　从莫尔笔下的“乌托邦”，到康帕内拉书中的“太阳城”，从摩莱里苦心写就的《自然法典》，到欧文身体力行的“新和谐公社”，从只存在了72天的巴黎公社，到世界上第一个社会主义国家苏联，人类对社会主义社会和制度形态的探索从未停止。中国在社会主义道路上的制度探索和实践，成就了经济快速发展和社会长期稳定“两大奇迹”。</p><p>　　中国共产党一经成立，就把建立体现社会主义原则的制度作为追求。无论是互助合作运动还是工农兵代表大会制度，无论是“三三制”还是“豆选法”，这些在革命根据地的早期实践，都蕴含着社会主义的制度因素和价值理念，为建立新型国家制度积累了宝贵经验。</p><p>　　新中国成立后，我们及时把成功的实践经验转化为制度成果，使我国国家制度既体现科学社会主义基本原则，又符合中国的特殊国情。社会主义公有制、人民代表大会制度、中国共产党领导的多党合作和政治协商制度、民族区域自治制度等一系列制度逐步建立健全。</p><p>　　习近平总书记深刻指出：“制度问题更带有根本性、全局性、稳定性、长期性。”“只有扎根本国土壤、汲取充沛养分的制度，才最可靠、也最管用。”</p><p>　　进入新时代，我们聚焦坚持和完善中国特色社会主义制度、推进国家治理体系和治理能力现代化，在实践探索的基础上加强顶层设计和战略安排，党和国家制度建设“施工图”恢弘展开。从党的领导、人民代表大会、坚持马克思主义在意识形态领域指导地位、党对人民军队的绝对领导等根本制度，到社会主义基本经济制度、基本政治制度，再到不同领域具有创新性、支撑性的重要制度，中国特色社会主义制度体系层次分明、系统完备，各项制度更加成熟、更加定型，在国家治理中日益显现出巨大的制度效能。</p><p>　　危机是制度的试金石。面对百年不遇的新冠肺炎疫情，党领导人民不惜一切代价阻断疫情传播链条，不惜一切代价抢救生命，仅用3个月左右的时间取得了武汉保卫战、湖北保卫战的决定性成果，以最快速度研制出安全有效的疫苗，在压力巨大的情况下确保了经济发展、社会稳定，并为世界各国抗击疫情提供了有力支持。中国速度、中国奇迹的背后，是人民至上、生命至上的社会主义价值理念，是同舟共济、集中力量办大事的制度优越性，是心系世界人民安危福祉的国际主义精神！</p><p>　　德国政治家埃贡·克伦茨这样评价：中国应对这场全球性危机的方式方法，展示了社会主义的制度优势。资本主义世界的旧药方已经不受欢迎，重心正在发生偏移。阿根廷学者马塞洛·罗德里格斯这样写道：这场危机再次凸显了两种理念之争，一种是资本主义，将所有社会关系都商品化，倡导消费主义、个人主义、剥削和社会达尔文主义；另一种是社会主义，倡导健康、教育、文化等不是市场上可交易的商品，而是人民的权利。</p><p>　　在中国特色社会主义制度下，中国人民享受着前所未有的民主、自由和人权，感受着前所未有的获得感、幸福感、安全感。中国制度和治理体系是党和人民历尽千辛万苦、付出巨大代价取得的伟大成就，矗立起人类制度文明和政治文明发展史上的一座丰碑！</p><p>　　<strong>（四）</strong></p><p>　　“文化自信是一个国家、一个民族发展中更基本、更深沉、更持久的力量。”源自于源远流长的中华优秀传统文化，熔铸于党领导人民创造的革命文化和社会主义先进文化，植根于中国特色社会主义伟大实践……历经百年，中国特色社会主义文化已经融入在中国共产党的精神血脉，时刻形塑着亿万中国人的精神气质。</p><p>　　悠远的文明传承是她的基因。今年3月22日，正在福建考察的习近平总书记来到朱熹园，语重心长地指出：“如果没有中华五千年文明，哪里有什么中国特色？如果不是中国特色，哪有我们今天这么成功的中国特色社会主义道路？”五千年文明的薪火相传、生生不息，赋予了我们党百折不挠的顽强与坚韧；中华文化特有的气质和禀赋，赋予了我们党质朴刚健、艰苦奋斗的宝贵品格；华夏先人对天下大同的追求向往，赋予了我们党心系苍生、天下为公的博大胸襟。凝结着人类思想精华的马克思主义，激活了古老的华夏文明；历史上唯一一个从未中断的伟大文明，又为马克思主义在中国的发展注入丰富的养分和深厚的动力。</p><p>　　威武不屈的革命精神是她的本色。在一百年来党领导人民开天辟地、改天换地、翻天覆地的进程中，不但书写了足以彪炳史册的伟大功绩，而且铸就了可歌可泣、光照千秋的伟大精神。上海兴业路的石库门，嘉兴南湖的红船，井冈山麓的八角楼，长征路上的大渡桥，大庆油田第一口油井，戈壁深处的“两弹一星”科研基地，深圳的莲花山，荆江大堤的抗洪纪念碑，汶川地震后建成的新城，旧貌换新颜的湘西十八洞村……这些早已不只是闻名中外的地理标识，更已成为中华民族不甘落后、拼搏奋斗的精神图腾。每当风雨来袭，每当挑战来临，中国人民都在精神之旅中坚定信心、鼓足勇气，凝聚起众志成城、一往无前的磅礴伟力。</p><p>　　社会主义不但要提高物质生产力、也要提高精神生产力，实现现代化一个重要目标就是建成社会主义文化强国。新时代的中国，党的创新理论深入人心，社会主义核心价值观广为弘扬，文化体制改革扎实推进，文化事业、产业蓬勃发展，文明之花处处绽放。《我和我的祖国》《我和我的家乡》等电影诉说着家国的情怀，《觉醒年代》《跨过鸭绿江》《山海情》等电视剧拨动着人民的心弦，《不忘初心》《天耀中华》《沂蒙山》《大地颂歌》等主题作品传扬着时代的旋律，更有那一支支乌兰牧骑活跃在边疆草原，一支支文艺志愿小分队扎根在工厂田间，一部部作品走出国门、走向世界……这一切，构成了激荡人心的时代协奏、感动世界的中国交响。</p><p>　　这是人民蓬勃向上的中国，这是文化繁盛绚丽的中国。中国特色社会主义文化，成为新时代中国屹立于世界民族之林的精神支柱，成为中华民族为人类贡献的文明瑰宝！</p><p>　　五百年来，人类追求社会主义的路途上，有鲜花芬芳，也有荆棘密布。一百年来，中国人追求社会主义的历程中，闪耀着光荣和梦想，也充满着奋斗和牺牲，伟大的中国共产党和英雄的中国人民从未退却、从未动摇。历史雄辩地证明：中国没有辜负社会主义！</p><p>　　面向未来，中国必将为人类文明进步、为世界社会主义发展作出更大贡献，让这个正义而充满前途的事业迸发出更加夺目的光芒！</p><hr><p>转载自：<a href="http://www.xinhuanet.com/">新华网</a></p><p>原文链接：</p><ul><li><a href="http://www.xinhuanet.com/2021-06/06/c_1127535562.htm">宣言：社会主义没有辜负中国｜新华网</a></li><li><a href="http://www.xinhuanet.com/politics/2021-06/07/c_1127539369.htm">宣言：中国没有辜负社会主义｜新华网</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;宣言&lt;/p&gt;</summary>
    
    
    
    
    <category term="Others" scheme="https://blog.superpung.cn/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>iOS 15、iPadOS 15、macOS Monterey 体验</title>
    <link href="https://blog.superpung.cn/wwdc21/"/>
    <id>https://blog.superpung.cn/wwdc21/</id>
    <published>2021-06-09T00:10:09.000Z</published>
    <updated>2021-07-28T04:16:45.444Z</updated>
    
    <content type="html"><![CDATA[<p>创新还是挤牙膏，这是一个问题。</p><a id="more"></a><p>去年的此时，在家里迎来了 WWDC20，升级了 iOS 14、iPadOS 14 和 watchOS 7。不得不说，14 的更新幅度确实很大，有很多令人惊喜的功能，当时宣布的 Apple Silicon 也更是充满期待。当时使用的 Hackintosh 仍在 macOS Catalina，并不支持 Big Sur。后来添加了设备 MacBook Air，很喜欢 Big Sur 的新界面，很多地方做了半透明化，像是打通了边界，除了很丑的方形图标。</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/IMG_0298.jpg" alt="IMG_0298"></p><p>今年充满期待地迎接 WWDC21，但说实话远没有去年那么多惊喜。但还是想记录一下使用了一天的体验。官方的新功能就不过多列举了，只记录我自己的想法，会持续更新。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>总体来看，感觉 Apple 对这次升级准备的很少，很多地方显得很突兀、不和谐，而且官网的中文介绍暂时还没有出，macOS Monterey 中新的特性很少。</p><div class="note primary"><h4 id="2021-6-25-更新"><a href="#2021-6-25-更新" class="headerlink" title="2021.6.25 更新"></a>2021.6.25 更新</h4><p>iOS、iPadOS、watchOS 发布了 Beta 2，同时官网在最近也更新了中文版。</p><p>原英文版如下：</p><ul><li><a href="https://www.apple.com/ios/ios-15-preview/">iOS 15</a></li><li><a href="https://www.apple.com/watchos/watchos-preview/">watchOS 8</a></li><li><a href="https://www.apple.com/ipados/ipados-preview/">iPadOS 15</a></li><li><a href="https://www.apple.com/macos/monterey-preview/">macOS Monterey</a></li></ul></div><h1 id="iOS-15"><a href="#iOS-15" class="headerlink" title="iOS 15"></a><a href="https://www.apple.com.cn/ios/ios-15-preview/">iOS 15</a></h1><p>型号名称：iPhone XR</p><h2 id="软件版本：15-0-19A5261w"><a href="#软件版本：15-0-19A5261w" class="headerlink" title="软件版本：15.0 (19A5261w)"></a>软件版本：15.0 (19A5261w)</h2><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/iOS15beta1.PNG" alt="iOS15beta1"></p><ol><li><p>首先最直观的就是通知中心变小了（根据消息长度改变）、通知横幅变小了。不仅如此，包括设置等 app 在内的很多应用中每一行都变窄了，上下左右的间隔都变大了。</p><p>感觉弧度也变大了，很不适应，感觉更丑了，以前统一的好看。</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/iOS15notice.PNG" alt="iOS15notice"></p></li><li><p>很多地方都开始采用卡片式布局，造成了左右的留白。</p></li><li><p>输入法选中的字符增加了白色底框，很明显。</p></li><li><p>新增「专注」功能，整合了勿扰模式和睡眠模式，而且支持增加新的模式。</p><p> 感觉很鸡肋，设置新模式略显繁琐，勿扰+睡眠已经足够了。</p></li><li><p>备忘录增强，新增快速备忘录、标签等功能，界面微调，准备替代 macOS 上的「便笺」，同时也可以作为笔记 app 使用。</p></li><li><p>升级后多了一个「放大镜」app，对于 iPhone 这放大倍数，无用。</p></li><li><p>iMessage、FaceTime 增强，无用。</p></li><li><p>屏幕小组件的字体变细了。</p></li><li><p>天气 app 增强，个人非常喜欢的点：动画效果增多、描述更详细（更智能）、10 日天气预报增加了温度条、最下方天气情况变大变好看。很遗憾的点：城市间切换的动画没有了，猜测可能是动画变多导致衔接情况变多，还没完全解决，期待后续版本能完善切换动画；空气质量地图虽然没用，但是不准确，图形会重复铺满，以至于很丑很卡顿，不如不要。</p></li><li><p>Safari 升级：iPhone 端的有点反直觉，刷新网页虽然可以下拉实现，但是变麻烦了；为了展示更多网页内容去掉了很多按钮，目前很不适应。</p><p>以前明明也可以全面屏显示，不懂为什么要改变。</p></li><li><p>很多地方的模糊透明的程度有变化。</p></li><li><p>钱包 app 升级，添加交通卡可以选择其他国家或地区。</p><p>十分期待钱包 app 可以自由绑定 NFC，希望 16 可以。</p></li><li><p>App Store 的“正在载入”字体变小，应该是 bug。</p></li><li><p>升级后校园网需要重新认证（mac 地址不会变吧（？）），不知道什么原因。</p></li><li><p>app 请求位置服务时左上角变为蓝色圆圈白色标识。</p></li><li><p>通知摘要功能一样鸡肋。</p></li><li><p>闹钟的时间选择转盘回来了，不错。</p></li><li><p>有时分隔线会和上面文本框的底线重合，等待修复。</p></li><li><p>照片 app 增强，可以显示图片信息，编辑图片时字体更改。</p></li><li><p>测试版发热、耗电略显严重。</p></li></ol><h2 id="软件版本：15-0-19A5281h"><a href="#软件版本：15-0-19A5281h" class="headerlink" title="软件版本：15.0 (19A5281h)"></a>软件版本：15.0 (19A5281h)</h2><p>流畅度提升！</p><p>相比于 Beta 1，更新后熟悉的流畅感回来了。Beta 1 是真的卡卡卡。</p><h2 id="软件版本：15-0-19A5297e"><a href="#软件版本：15-0-19A5297e" class="headerlink" title="软件版本：15.0 (19A5297e)"></a>软件版本：15.0 (19A5297e)</h2><ol><li><p>流畅度提升！</p></li><li><p>「天气」中“周”改成了“星期”，导致显示不全……</p><p> <img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/IMG_0533.PNG" alt="IMG_0533"></p></li></ol><h2 id="软件版本：15-0-19A5307g"><a href="#软件版本：15-0-19A5307g" class="headerlink" title="软件版本：15.0 (19A5307g)"></a>软件版本：15.0 (19A5307g)</h2><ol><li>流畅度提升！</li><li>「天气」中“星期”又改回了“周”……</li><li>Safari 地址栏的刷新和分享按钮回来了。</li></ol><h1 id="watchOS-8"><a href="#watchOS-8" class="headerlink" title="watchOS 8"></a><a href="https://www.apple.com.cn/watchos/watchos-preview/">watchOS 8</a></h1><p>基本没更新。</p><h1 id="iPadOS-15"><a href="#iPadOS-15" class="headerlink" title="iPadOS 15"></a><a href="https://www.apple.com.cn/ipados/ipados-preview/">iPadOS 15</a></h1><p>型号名称：iPad（第 6 代）</p><h2 id="软件版本：15-0-19A5261w-1"><a href="#软件版本：15-0-19A5261w-1" class="headerlink" title="软件版本：15.0 (19A5261w)"></a>软件版本：15.0 (19A5261w)</h2><ol><li>挤牙膏，小组件可以自由拖动了，但是好像变小了以至于特别丑，尤其是电量小组件。</li><li>很多地方 UI 很奇怪，大小很不合适。</li><li>app 资源库也是挤牙膏，无用。</li><li>分屏功能增强，屏幕上方有三个小圆点，可以直接拖动，会提示是否支持多窗口。</li><li>快速备忘录，支持自定义 Apple Pencil 从左右下角向中间划的功能。</li><li>主屏幕竖屏左右留白变大，特别丑。</li><li>下载新的 app 没有图标。</li><li>Swift playground 可以编译 app，但还不是生产力工具。</li><li>挤牙膏，支持低电量模式。</li></ol><h2 id="软件版本：15-0-19A5281h-1"><a href="#软件版本：15-0-19A5281h-1" class="headerlink" title="软件版本：15.0 (19A5281h)"></a>软件版本：15.0 (19A5281h)</h2><ol><li><p>增加了「健身」app，但没什么用。</p><p> <img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/iPad%E5%81%A5%E8%BA%AB.PNG" alt="iPad健身"></p><p> <img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/iPad-Fitness-plus.PNG" alt="iPad-Fitness-plus"></p></li></ol><h2 id="软件版本：15-0-19A5307g-1"><a href="#软件版本：15-0-19A5307g-1" class="headerlink" title="软件版本：15.0 (19A5307g)"></a>软件版本：15.0 (19A5307g)</h2><ol><li>Safari 支持选择 Compact Tab Bar 或 Separate Tab Bar。</li></ol><h1 id="macOS-Monterey"><a href="#macOS-Monterey" class="headerlink" title="macOS Monterey"></a><a href="https://www.apple.com.cn/macos/monterey-preview/">macOS Monterey</a></h1><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/macos-monterey.png" alt="macos-monterey"></p><p>macOS Big Sur 还没用多久，软件厂商还没全适配，又更新。</p><p>和 Catalina 到 Big Sur 相比，Big Sur 到 Monterey 的更新幅度太小了，以至于图标壁纸都是直接改的 Big Sur。Big Sur 至少还有很多壁纸，但是 Monterey 就一张。</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/monterey-open.png" alt="monterey-open"></p><p>触发角设置时，Big Sur 的壁纸忘记换成 Monterey 的了。</p><ol><li><p>最直观的感受，菜单栏的透明度似乎调整了，变好看了。也有可能是新壁纸更好看。</p></li><li><p>Safari 增强，支持标签页组，这个功能不错，很好用。重新排列的 Safari 可以显示更多内容，很好。部分动画效果更新，很好。</p><p> 但是博客顶部的彩虹效果在新版 Safari 中没有了，等待解决。Safari 中字体有问题。</p></li><li><p>AirPlay 终于有用了。以前就觉得为什么 iPhone 不能用屏幕镜像功能投屏到 mac，现在终于打通了。</p><p> 目前存在 bug：mac 端结束屏幕镜像后鼠标指针消失。</p></li><li><p>Universal Control 很好，但目前还不能用。</p></li><li><p>访达边栏增加「共享」文件夹，显示共享的文件。</p></li><li><p>系统扩展需要重新设置，部分兼容 Big Sur 的软件不能兼容 Monterey，本来不兼容 Big Sur 的软件应该更不能兼容 Monterey。</p></li></ol><h2 id="版本-12-0-Beta版-21A5284e"><a href="#版本-12-0-Beta版-21A5284e" class="headerlink" title="版本 12.0 Beta版(21A5284e)"></a>版本 12.0 Beta版(21A5284e)</h2><p>降级更新：Safari 变回了原来的样子，甚至更难看了：</p><p><img src="https://super-bucket1.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2021-07-15%20%E4%B8%8B%E5%8D%8812.15.27.png" alt="截屏2021-07-15 下午12.15.27"></p><p>笑死，直接打脸自己。</p><p>使用了这么长时间，感觉 Monterey 刚更新的 Safari 标签栏确实不太好用，恢复到原来的样子也是情理之中，但是加大标签页栏的宽度只是把原来的方形变成卡片式，只能说是很丑，且没有意义，毫不实用。</p><p>致命 bug：Xcode 无法连接模拟器……直接回到 Big Sur。</p><p>回不去，无法降级……</p><p>Xcode 无法连接模拟器不完全解决方式：取消 Debug executable，但会导致无法打断点。</p><h2 id="版本-12-0-Beta版-21A5294g"><a href="#版本-12-0-Beta版-21A5294g" class="headerlink" title="版本 12.0 Beta版(21A5294g)"></a>版本 12.0 Beta版(21A5294g)</h2><ol><li>和 iPadOS 同步，Safari 支持选择 Compact Tab Bar 或 Separate Tab Bar。</li><li>Xcode 崩溃的问题没有解决。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>推荐文章：<a href="https://mp.weixin.qq.com/s/EFqnDiR9HzJKIM84Ocfoxw">WWDC 这 9 个细节关键词，我想展开说说｜果核 Group</a></p><blockquote class="blockquote-center"><p>2021 年的 WWDC 给的功能很少，但它给的想象很多。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;创新还是挤牙膏，这是一个问题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Others" scheme="https://blog.superpung.cn/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>访问控制远程文件</title>
    <link href="https://blog.superpung.cn/primary-practice-h62/"/>
    <id>https://blog.superpung.cn/primary-practice-h62/</id>
    <published>2021-05-30T06:54:41.000Z</published>
    <updated>2021-05-30T16:41:03.333Z</updated>
    
    <content type="html"><![CDATA[<p>Primary Practice h62</p><a id="more"></a><div class="note info"><p>构造一个用户通过 socket 访问和控制远程文件的项目</p></div><p>开始理解的时候感觉很困难，但实际上就是一个文件操作的实验，套了一个 socket 的壳。</p><p>和 <a href="https://blog.superpung.xyz/primary-practice-h60">h60</a> 类似，请确保你已经理解 h60。</p><p>先来看一下目录结构：</p><ul><li><code>MyRemoteFile</code> 远程文件类，是远程主机下的文件</li><li><code>MyHost</code> 远程主机，即客户端，向服务器发出操作文件的请求</li><li><code>MyDaemon</code> 监听类，即服务器端，接收客户端请求，直接操作文件</li><li><code>MyDaemonConfigVo</code> 服务器配置</li><li><code>my_user.txt</code> 存放用户名和口令，<code>MyHost</code> 登录需要</li><li><code>Test</code> 测试文件</li></ul><p>实际上，先配置好服务器，创建监听线程，用于响应主机的请求。然后创建远程主机，根据远程主机和路径访问并控制远程文件。</p><h1 id="0x00-MyDaemonConfigVo"><a href="#0x00-MyDaemonConfigVo" class="headerlink" title="0x00 MyDaemonConfigVo"></a>0x00 <code>MyDaemonConfigVo</code></h1><p>服务器配置。</p><p>在这里，服务器就是可以直接操作本地文件的一层。根据 <code>Test</code>，配置项有本地文件目录、端口号和用户信息。其中用户信息可以直接在这里读文件转换为字符串列表（不用 Map）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String root;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>然后创建对应的 setter 和 getter。</p><p>读取文件的经典方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">readLines</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    String line;</span><br><span class="line">    Reader reader = <span class="keyword">new</span> FileReader(filePath);</span><br><span class="line">    LineNumberReader lineReader = <span class="keyword">new</span> LineNumberReader(reader);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        line = lineReader.readLine();</span><br><span class="line">        <span class="keyword">if</span> (line == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (line.trim().length() == <span class="number">0</span> || line.startsWith(<span class="string">&quot;#&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result.add(line);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x01-MyDaemon"><a href="#0x01-MyDaemon" class="headerlink" title="0x01 MyDaemon"></a>0x01 <code>MyDaemon</code></h1><p>监听类，服务器端，继承 <code>Thread</code>。</p><p>创建时直接将服务器配置传过来，直接保存三个配置项：</p><ul><li>本地路径，直接存字符串</li><li>端口号，直接创建一个 <code>SocketServer</code></li><li>用户信息，直接存字符串列表</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ServerSocket server;</span><br><span class="line"><span class="keyword">private</span> Socket socket;</span><br><span class="line"><span class="keyword">private</span> BufferedReader in;</span><br><span class="line"><span class="keyword">private</span> PrintWriter out;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String root;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; users;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyDaemon</span><span class="params">(MyDeamonConfigVo config)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   server = <span class="keyword">new</span> ServerSocket(config.getPort());</span><br><span class="line">   socket = <span class="keyword">null</span>;</span><br><span class="line">   root = config.getRoot();</span><br><span class="line">   users = config.getUsers();</span><br><span class="line">   in = <span class="keyword">null</span>;</span><br><span class="line">   out = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写 <code>run</code>，循环从输入流读入并用 <code>readLine</code> 分析（进一步直接操作本地文件）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        socket = server.accept();</span><br><span class="line">        in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">        out = <span class="keyword">new</span> PrintWriter(socket.getOutputStream());</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            String line = in.readLine();</span><br><span class="line">            readLine(line);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1</span> == <span class="number">0</span>) &#123;<span class="comment">// 这里的条件应该是程序结束的条件，没想好怎么写</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>readLine</code> 是自己写的，在下文和客户端放在一起叙述。</p><h1 id="0x02-MyHost"><a href="#0x02-MyHost" class="headerlink" title="0x02 MyHost"></a>0x02 <code>MyHost</code></h1><p>远程主机，客户端，需要向输出流写各种操作文件的请求，在服务器那边处理，再从输入流读入服务器输出的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String ip;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> valid;</span><br><span class="line"><span class="keyword">private</span> Socket socket;</span><br><span class="line"><span class="keyword">private</span> BufferedReader in;</span><br><span class="line"><span class="keyword">private</span> PrintWriter out;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    socket = <span class="keyword">null</span>;</span><br><span class="line">    in = <span class="keyword">null</span>;</span><br><span class="line">    out = <span class="keyword">null</span>;</span><br><span class="line">    valid = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>远程主机需要登录，即输入 <code>用户名\t口令</code> 到服务器端判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    socket = <span class="keyword">new</span> Socket(ip, port);</span><br><span class="line">    in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">    out = <span class="keyword">new</span> PrintWriter(socket.getOutputStream());</span><br><span class="line">    writeLine(<span class="string">&quot;login&quot;</span> + username + <span class="string">&quot;\t&quot;</span> + password);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * in.readLine() doesn&#x27;t have &quot;\r\n&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    valid = <span class="string">&quot;success&quot;</span>.equals(in.readLine());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInvalid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !valid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x03-MyRemoteFile-gt-MyHost-gt-MyDaemon"><a href="#0x03-MyRemoteFile-gt-MyHost-gt-MyDaemon" class="headerlink" title="0x03 MyRemoteFile -&gt; MyHost -&gt; MyDaemon"></a>0x03 <code>MyRemoteFile</code> -&gt; <code>MyHost</code> -&gt; <code>MyDaemon</code></h1><p><code>MyRemoteFile</code> 是远程文件类，需要一个远程主机再加上路径才能创建一个远程文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MyHost host;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String path;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyRemoteFile</span><span class="params">(MyHost host, String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里不能直接login，因为不只调用这个类一次，不能每次都login</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (host.isInvalid()) &#123;<span class="comment">// 如果主机当前是无效的，意味着主机未登录或者用户名口令不匹配</span></span><br><span class="line">        host.login();</span><br><span class="line">        <span class="keyword">if</span> (host.isInvalid()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;host login failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.host = host;</span><br><span class="line">    <span class="keyword">this</span>.path = path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据 <code>Test</code>，需要实现的功能有：</p><ul><li>登录</li><li>列出子目录和文件</li><li>判断文件类型</li><li>获取远程文件路径（只需返回 <code>path</code>）</li><li>写入文件</li><li>删除文件</li><li>获取文件大小</li><li>检查文件是否存在</li></ul><p>实现的过程，就是远程文件调用远程主机的方法，向监听发送请求，监听对远程主机的请求作出相应，远程主机根据响应来返回值。这里服务器端（监听）和客户端（远程主机）需要遵从一个协议，即：</p><table><thead><tr><th>操作类型</th><th>格式</th></tr></thead><tbody><tr><td>登录</td><td>“login” + username + “\t” + password</td></tr><tr><td>列出子目录和文件</td><td>“getAscDir” + path</td></tr><tr><td>判断文件类型</td><td>“type” + path</td></tr><tr><td>写入文件</td><td>“write” + path + “:” + content</td></tr><tr><td>删除文件</td><td>“delete” + path</td></tr><tr><td>获取文件大小</td><td>“length” + path</td></tr><tr><td>检查文件是否存在</td><td>“exist” + path</td></tr></tbody></table><p>为简化输出，定义方法 <code>writeLine</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeLine</span><span class="params">(String line)</span> </span>&#123;</span><br><span class="line">    out.write(line + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    out.flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：为实现登录操作，客户端需要：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">writeLine(<span class="string">&quot;login&quot;</span> + username + <span class="string">&quot;\t&quot;</span> + password);</span><br></pre></td></tr></table></figure><p>服务器端需要：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (line.startsWith(<span class="string">&quot;login&quot;</span>)) &#123;</span><br><span class="line">    checkLogin(line.substring(<span class="number">5</span>));<span class="comment">// 取&quot;login&quot;后面的内容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkLogin</span><span class="params">(String line)</span> </span>&#123;</span><br><span class="line">  String result = <span class="string">&quot;failed&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (String user: users) &#123;</span><br><span class="line">    <span class="keyword">if</span> (line.equals(user)) &#123;</span><br><span class="line">      result = <span class="string">&quot;success&quot;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  writeLine(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上文所叙述，服务器端始终用 <code>readLine</code> 方法处理所有请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readLine</span><span class="params">(String line)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (line.startsWith(<span class="string">&quot;login&quot;</span>)) &#123;</span><br><span class="line">        checkLogin(line.substring(<span class="number">5</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (line.startsWith(<span class="string">&quot;getAscDir&quot;</span>)) &#123;</span><br><span class="line">        listFiles(line.substring(<span class="number">9</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (line.startsWith(<span class="string">&quot;type&quot;</span>)) &#123;</span><br><span class="line">        getFileType(line.substring(<span class="number">4</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (line.startsWith(<span class="string">&quot;write&quot;</span>)) &#123;</span><br><span class="line">        writeFile(line.substring(<span class="number">5</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (line.startsWith(<span class="string">&quot;delete&quot;</span>)) &#123;</span><br><span class="line">        delete(line.substring(<span class="number">6</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (line.startsWith(<span class="string">&quot;length&quot;</span>)) &#123;</span><br><span class="line">        getLength(line.substring(<span class="number">6</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (line.startsWith(<span class="string">&quot;exist&quot;</span>)) &#123;</span><br><span class="line">        isExist(line.substring(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>如上文所叙述，创建一个远程文件时需要登录主机，主机登录时依照协议向服务器端写入用户名和口令。</p><p>服务器判断请求为“登录”操作，执行 <code>checkLogin</code>，遍历用户信息字符串列表，存在则写出 <code>&quot;success&quot;</code> 否则 <code>&quot;failed&quot;</code>，客户端根据服务器的响应修改 <code>valid</code> 状态。</p><h2 id="列出子目录和文件"><a href="#列出子目录和文件" class="headerlink" title="列出子目录和文件"></a>列出子目录和文件</h2><p><strong>远程文件类：</strong></p><p>直接调用远程主机的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> MyRemoteFile[] dirByNameAsc() <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">    <span class="keyword">return</span> host.getDirByNameAsc(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>远程主机类：</strong></p><p>发出请求后，服务器先发来文件个数，据此创建远程文件数组；服务器再依次发来文件路径，据此创建每一个远程文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> MyRemoteFile[] getDirByNameAsc(String path) <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">    writeLine(<span class="string">&quot;getAscDir&quot;</span> + path);</span><br><span class="line">    <span class="keyword">int</span> count = Integer.parseInt(in.readLine());</span><br><span class="line">    MyRemoteFile[] result = <span class="keyword">new</span> MyRemoteFile[count];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        result[i] = <span class="keyword">new</span> MyRemoteFile(<span class="keyword">this</span>, in.readLine());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>监听类：</strong></p><p>根据请求得到文件列表，然后按照名称顺序排序，先输出文件个数再依次输出远程文件路径（远程文件根目录路径+文件名，如果是目录则再加上 <code>/</code>）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">listFiles</span><span class="params">(String filepath)</span> </span>&#123;</span><br><span class="line">    List&lt;File&gt; files = getFiles(filepath);</span><br><span class="line">    List&lt;File&gt; resortFiles = sortFiles(files);</span><br><span class="line">    writeLine(String.valueOf(resortFiles.size()));</span><br><span class="line">    <span class="keyword">for</span> (File resortFile : resortFiles) &#123;</span><br><span class="line">        String path = filepath + resortFile.getName();</span><br><span class="line">        <span class="keyword">if</span> (!resortFile.isFile()) &#123;</span><br><span class="line">            path += <span class="string">&quot;/&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        writeLine(path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;File&gt; <span class="title">getFiles</span><span class="params">(String filepath)</span> </span>&#123;</span><br><span class="line">    List&lt;File&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    File file = <span class="keyword">new</span> File(root + filepath);</span><br><span class="line">    <span class="keyword">if</span> (!file.isFile()) &#123;</span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">if</span> (files != <span class="keyword">null</span>) &#123;</span><br><span class="line">            result.addAll(Arrays.asList(files));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result.add(file);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;File&gt; <span class="title">sortFiles</span><span class="params">(List&lt;File&gt; fileList)</span> </span>&#123;</span><br><span class="line">    List&lt;File&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;File&gt; files = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;File&gt; dirs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (File file: fileList) &#123;</span><br><span class="line">        <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">            files.add(file);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dirs.add(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * it will be changed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> dirCount = dirs.size();</span><br><span class="line">    <span class="keyword">int</span> fileCount = files.size();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dirCount; i++) &#123;</span><br><span class="line">        File dir = dirs.get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (File file: dirs) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dir.getAbsolutePath().compareTo(file.getAbsolutePath()) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                dir = file;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result.add(dir);</span><br><span class="line">        dirs.remove(dir);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fileCount; i++) &#123;</span><br><span class="line">        File file = files.get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (File file1: files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.getAbsolutePath().compareTo(file1.getAbsolutePath()) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                file = file1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result.add(file);</span><br><span class="line">        files.remove(file);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断文件类型"><a href="#判断文件类型" class="headerlink" title="判断文件类型"></a>判断文件类型</h2><p><strong>远程文件类：</strong></p><p>规定一个文件如果是目录则返回 0，如果是文件则返回 1，否则返回 -1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDirectory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> host.getType(path) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> host.getType(path) == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>远程主机类：</strong></p><p>规定一个文件如果是目录则输出 <code>&quot;dir&quot;</code>，如果是文件则输出 <code>&quot;file&quot;</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    writeLine(<span class="string">&quot;type&quot;</span> + path);</span><br><span class="line">    String type = in.readLine();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;file&quot;</span>.equals(type)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;dir&quot;</span>.equals(type)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>监听类：</strong></p><p>根据路径创建本地文件对象，判断文件类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getFileType</span><span class="params">(String filepath)</span> </span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(root + filepath);</span><br><span class="line">    <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">        writeLine(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        writeLine(<span class="string">&quot;dir&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取远程文件路径"><a href="#获取远程文件路径" class="headerlink" title="获取远程文件路径"></a>获取远程文件路径</h2><p><strong>远程文件类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPathFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><p><strong>远程文件类：</strong></p><p>直接调用远程主机，传入路径和文件内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeByBytes</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">    host.writeByBytes(path, bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>远程主机类：</strong></p><p>根据字节数组创建字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeByBytes</span><span class="params">(String path, <span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">    String content = <span class="keyword">new</span> String(bytes, StandardCharsets.UTF_8);</span><br><span class="line">    writeLine(<span class="string">&quot;write&quot;</span> + path + <span class="string">&quot;:&quot;</span> + content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>监听类：</strong></p><p>根据格式分离路径和文件内容，文件不存在则新建文件，然后通过文件输出流输出文件内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">(String pathAndContent)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    String[] pathContent = pathAndContent.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">    String path = pathContent[<span class="number">0</span>];</span><br><span class="line">    String content = pathContent[<span class="number">1</span>];</span><br><span class="line">    File file = <span class="keyword">new</span> File(root + path);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (file.createNewFile()) &#123;</span><br><span class="line">            FileOutputStream outFileStream = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            outFileStream.write(content.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            outFileStream.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p><strong>远程文件类：</strong></p><p>直接调用远程主机。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    host.delete(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>远程主机类：</strong></p><p>按照格式发送请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">    writeLine(<span class="string">&quot;delete&quot;</span> + path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>监听类：</strong></p><p>由于客户端没有读取操作，这里也不能输出。</p><div class="note warning"><p><code>file.delete()</code> 是有返回值的。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String filepath)</span> </span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(root + filepath);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * write must be read</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (file.delete()) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取文件大小"><a href="#获取文件大小" class="headerlink" title="获取文件大小"></a>获取文件大小</h2><p><strong>远程文件类：</strong></p><p>直接调用远程主机。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> host.getLength(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>远程主机类：</strong></p><p>按照格式发送请求，将返回的字符串转换为数字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    writeLine(<span class="string">&quot;length&quot;</span> + path);</span><br><span class="line">    String len = in.readLine();</span><br><span class="line">    <span class="keyword">return</span> Integer.parseInt(len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>监听类：</strong></p><p>根据路径新建文件，若存在则输出文件大小（转换为字符串），否则输出 <code>&quot;0&quot;</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getLength</span><span class="params">(String filepath)</span> </span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(root + filepath);</span><br><span class="line">    <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">        writeLine(String.valueOf(file.length()));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        writeLine(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="检查文件是否存在"><a href="#检查文件是否存在" class="headerlink" title="检查文件是否存在"></a>检查文件是否存在</h2><p><strong>远程文件类：</strong></p><p>直接调用远程主机。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> host.isExist(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>远程主机类：</strong></p><p>按照格式发送请求，对服务器输出的结果进行判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExist</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    writeLine(<span class="string">&quot;exist&quot;</span> + path);</span><br><span class="line">    String result = in.readLine();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;exist&quot;</span>.equals(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>监听类：</strong></p><p>新建文件，判断是否在本地存在。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">isExist</span><span class="params">(String filepath)</span> </span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(root + filepath);</span><br><span class="line">    <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">        writeLine(<span class="string">&quot;exist&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        writeLine(<span class="string">&quot;not exist&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Primary Practice h62&lt;/p&gt;</summary>
    
    
    
    
    <category term="Practice" scheme="https://blog.superpung.cn/tags/Practice/"/>
    
  </entry>
  
  <entry>
    <title>疾病传播模拟</title>
    <link href="https://blog.superpung.cn/primary-practice-h61/"/>
    <id>https://blog.superpung.cn/primary-practice-h61/</id>
    <published>2021-05-22T12:35:30.000Z</published>
    <updated>2021-05-30T16:40:00.498Z</updated>
    
    <content type="html"><![CDATA[<p>Primary Practice h61</p><a id="more"></a><div class="note info"><h4 id="Param"><a href="#Param" class="headerlink" title="Param"></a>Param</h4><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td><code>getImmuEffect()</code> / <code>setImmuEffect(double immuEffect)</code></td><td>疫苗免疫率，可降低传染率</td></tr><tr><td><code>getImmuRate()</code> / <code>setImmuRate(double immuRate)</code></td><td>人群中注射疫苗的人的比例，随机</td></tr><tr><td><code>getCityPopulation()</code> / <code>setCityPopulation(int cityPopulation)</code></td><td>城市人口数</td></tr><tr><td><code>getFamilySize()</code> / <code>setFamilySize(int familySize)</code></td><td>每个家庭人口数（按序）</td></tr><tr><td><code>getCompanySize()</code> / <code>setCompanySize(int companySize)</code></td><td>每个公司人口数（随机）</td></tr><tr><td><code>getSpreadRateFamily()</code> / <code>setSpreadRateFamily(double spreadRateFamily)</code></td><td>家庭传染率（晚上）</td></tr><tr><td><code>getSpreadRateCompany(double spreadRateCompany)</code></td><td>公司传染率（白天）</td></tr><tr><td><code>getLatentPeriod()</code> / <code>setLatentPeriod(int latentPeriod)</code></td><td>潜伏期，此时病人具有传染性，但仍正常上班生活，度过潜伏期后排队治疗</td></tr><tr><td><code>getHealingRateHome()</code> / <code>setHealingRateHome(double healingRateHome)</code></td><td>在家每天自愈概率</td></tr><tr><td><code>getDeathRateHome()</code> / <code>setDeathRateHome(double deathRateHome)</code></td><td>在家每天死亡概率</td></tr><tr><td><code>getHealingRateHospital()</code> / <code>setHealingRateHospital(double healingRateHospital)</code></td><td>在医院每天治愈概率</td></tr><tr><td><code>getDeathRateHospital()</code> / <code>setDeathRateHospital(double deathRateHospital)</code></td><td>在医院每天死亡概率</td></tr><tr><td><code>getHospitalSize()</code> / <code>setHospitalSize(int hospitalSize)</code></td><td>医院床位数</td></tr><tr><td><code>getInitPatients()</code> / <code>setInitPatients(List&lt;Integer&gt; initPatients)</code></td><td>初始病人编号</td></tr></tbody></table><h4 id="SimResult"><a href="#SimResult" class="headerlink" title="SimResult"></a>SimResult</h4><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td><code>getLatents()</code> / <code>setLatents(int latents)</code></td><td>潜伏期状态人数</td></tr><tr><td><code>getDeaths()</code> / <code>setDeaths(int deaths)</code></td><td>死亡人数</td></tr><tr><td><code>getCured()</code> / <code>setCured(int cured)</code></td><td>自愈+痊愈人数</td></tr><tr><td><code>getPatients()</code> / <code>setPatients(int patients)</code></td><td>患病人数</td></tr></tbody></table></div><p>和 <a href="https://blog.superpung.xyz/primary-practice-h53">h53</a> 问题类似，确保你已经理解 h53。</p><div class="note warning"><h4 id="本文尚未完成，但-h62-已经完成"><a href="#本文尚未完成，但-h62-已经完成" class="headerlink" title="本文尚未完成，但 h62 已经完成"></a>本文尚未完成，但 h62 已经完成</h4></div><p>考虑一个人的状态，有：健康-&gt;潜伏期-&gt;患病-&gt;自愈、治愈/死亡。</p><p>开始的思路是新建一个 <code>Citizen</code> 类，保存一个人的状态和活动。但模拟的时候需要另外定义许多组合，比如家庭、公司、医院等，代码复杂而且算法效率低。运行一次需要 70 多秒，结果还不对。考虑到可能是公司成员设置问题，影响效率、疫苗注射给谁，随机问题不能每次循环十万次、可不可以只保存不健康的人，每天不再循环健康者……改进后仍无果，遂改用老师的思路。</p><p>发现我改进后和老师的思路类似，只不过缺少抽象。为了减少模拟过程中的计算，应将家庭和公司抽象为地点类、医院抽象为医院类。</p><p>由于许多地方用到概率，直接在工具类中定义，提高可读性、简洁度。</p><p>家庭和公司包含成员“市民”，同时市民也包含属性“属于哪个家庭/公司”。</p><p>定义 <code>boolean</code> 变量时，应使用过去分词或形容词，调用它的方法名为 <code>is...</code>。</p><p>潜伏期默认为 -1 更好。</p><p>市民不用写多个“spendOneDay”，写一个分多情况就可以。</p><p>判断一个人是否得病，可以抽象为一个方法，属于一个市民。</p><p>潜伏期在家或在公司都会传染其他人，而且过了潜伏期，如果在家等待床位，也会传染其他人。所以判断家庭和公司内是否有传染源，需要不同的判断方式。</p><p>抽象的好处，住院的病人和等待住院的病人都可以放在 <code>Hospital</code> 类中。</p><p>疫苗注射人数可以不准确，直接对一个人按概率注射。</p><p>果然设置公司用到了 <code>shuffle</code>。</p><p>之前模拟一天的市民感染需要住院、患者治愈或自愈需要出院移动到 <code>Hospital</code> 中。</p><p>以前从个体考虑，很复杂；现在从整体考虑，并加以抽象，更简单。</p><p>传染给公司其他人，不再从传染源考虑，而是从公司考虑，每天查看公司里面是否有传染源，家庭同理；之前每个人判断他的同事，现在公司抽象为一个带有 id 的类。一个人每天如果健康则判断周围环境有无传染源、如果处于潜伏期则潜伏期增长一天并判断是否超过一定天数患病（患病则直接在家等待）、如果在家或在医院等待则判断是否自愈/治愈或死亡。</p><p>上层类调用下层类的实例，可以将自身传参过去，这样下层类就可以访问上层类了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Primary Practice h61&lt;/p&gt;</summary>
    
    
    
    
    <category term="Practice" scheme="https://blog.superpung.cn/tags/Practice/"/>
    
  </entry>
  
  <entry>
    <title>简单的爬虫尝试</title>
    <link href="https://blog.superpung.cn/tju-drive-crawling/"/>
    <id>https://blog.superpung.cn/tju-drive-crawling/</id>
    <published>2021-05-22T11:30:07.000Z</published>
    <updated>2021-05-22T12:24:44.388Z</updated>
    
    <content type="html"><![CDATA[<p>算是第一次写的一个小工具吧。</p><a id="more"></a><p>GitHub：<a href="https://github.com/SuperPung/TJU-Drive-Crawling/">https://github.com/SuperPung/TJU-Drive-Crawling/</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>回想起上一次写 Python 小项目，还是一年之前学习 Python 的时候。当时看书（pcc2e）时敲了一遍书后面几章的项目，尤其是外星人入侵的小游戏，很有趣。</p><p>时隔一年，面对每次打开都需要输入密码的天大云盘，还有好话老师留作业、批作业 follow his heart 的频率，我决定尝试写个小爬虫，能在云盘更新的时候提醒我。</p><p>爬虫，学 Python 之前就听说了，很喜欢这种懒人工具。前段时间开始经常逛 GitHub，也看到过一些小项目。于是我打开了许久未用过的 Pycharm，新建了一个项目。</p><blockquote><p>JetBrains 竟然不支持 edu 邮箱了，👴学生认证马上就到期，只能用学信网资料认证，好几天也不出结果……</p></blockquote><p>写这篇文章时，这个小工具已经写完了。所以有些重构的过程可能会忘记了。</p><h1 id="Crawling"><a href="#Crawling" class="headerlink" title="Crawling"></a>Crawling</h1><p>用 Chrome 抓包，分析到天大云盘的 url 实际上是 <a href="http://pan.tju.edu.cn:9123/v1/link?method=listdir%EF%BC%8C%E5%86%99%E4%B8%80%E4%B8%AA%E8%AF%B7%E6%B1%82%E5%A4%B4">http://pan.tju.edu.cn:9123/v1/link?method=listdir，写一个请求头</a> <code>payload_header</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">payload_header = &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain;charset=UTF-8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://pan.tju.edu.cn/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                  <span class="string">&quot;Chrome/90.0.4430.212 Safari/537.36 &quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求数据需要发出一个 json <code>data</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;link&quot;</span>: link,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: password,</span><br><span class="line">    <span class="string">&quot;by&quot;</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sort&quot;</span>: <span class="string">&quot;asc&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 link 就是天大云盘链接的后 32 位，password 就是密码。</p><p>最后通过 POST 请求得到响应：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = requests.session()</span><br><span class="line">get_root = s.post(url, data=json.dumps(data), headers=payload_header)</span><br><span class="line"><span class="keyword">return</span> get_root.text</span><br></pre></td></tr></table></figure><h1 id="响应分析"><a href="#响应分析" class="headerlink" title="响应分析"></a>响应分析</h1><p>得到响应后，需要对内容分析。尝试用面向对象，但最终选择了函数。通过递归将文件目录输出。</p><p>每次分析后输出文件列表，以 json 格式存放到本地目录，下一次分析则与本地比较，这样就可以知道哪些文件更新了。</p><p>因为使用了递归，所以很多小功能又用函数重构了一下。</p><h1 id="邮件服务"><a href="#邮件服务" class="headerlink" title="邮件服务"></a>邮件服务</h1><p>通过 smtplib 实现。</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>部署到服务器也走了弯路，根本原因是路径的问题。</p><p>最后在脚本上先加一句 cd 解决。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>一共花了一天多一点的时间完成，还是很有趣的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;算是第一次写的一个小工具吧。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://blog.superpung.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>简单的聊天室</title>
    <link href="https://blog.superpung.cn/primary-practice-h60/"/>
    <id>https://blog.superpung.cn/primary-practice-h60/</id>
    <published>2021-05-22T08:51:20.000Z</published>
    <updated>2021-05-22T11:27:27.535Z</updated>
    
    <content type="html"><![CDATA[<p>Primary Practice h60</p><a id="more"></a><div class="note info"><p>在 <code>ChatServer</code>、<code>ChatClient</code> 中增加适当代码，并增加适当的类，完成一个简单的聊天室</p></div><p>和之前 OOP 的一个实验类似，利用 Socket 实现 client 和 server 通信。不同的是，本实验需要多客户端和一服务器通信。</p><h1 id="0x00-ChatServer"><a href="#0x00-ChatServer" class="headerlink" title="0x00 ChatServer"></a>0x00 ChatServer</h1><p>类变量一定包括一个 <code>ServerSocket</code>。</p><p>根据要求，需要从文件中读取到所有的用户名和密码，用 <code>HashMap</code> 保存。</p><p>多 client，为了给每一个 client 回复，需要保存目前已经连接的 client。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ServerSocket server;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; passwd;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Socket&gt; clients = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>构造方法只需要初始化 server 和 passwd：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ChatServer</span> <span class="params">(<span class="keyword">int</span> port, String passwordFilename)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">server = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">passwd = readLines(passwordFilename);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经典：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">readLines</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String line;</span><br><span class="line">Reader reader;</span><br><span class="line">Map&lt;String, String&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">reader = <span class="keyword">new</span> FileReader(filename);</span><br><span class="line">LineNumberReader lineReader = <span class="keyword">new</span> LineNumberReader(reader);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">line = lineReader.readLine();</span><br><span class="line"><span class="keyword">if</span> (line == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (line.trim().length() == <span class="number">0</span> || line.startsWith(<span class="string">&quot;#&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">String[] lineContent = line.split(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">result.put(lineContent[<span class="number">0</span>], lineContent[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要开始监听，所以此类一定继承了 <code>Thread</code>，<code>startListen</code> 只需要调用 <code>run</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startListen</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写 <code>run</code>，因为要持续监听，与多个 client 相连，所以需要新建 <code>ServerThread</code> 类，在此类中调用它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">Socket socket = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">socket = server.accept();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">clients.add(socket);</span><br><span class="line"><span class="keyword">new</span> ServerThread(socket, passwd).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x01-ServerThread"><a href="#0x01-ServerThread" class="headerlink" title="0x01 ServerThread"></a>0x01 ServerThread</h1><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Socket socket;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; passwd;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServerThread</span><span class="params">(Socket socket, Map&lt;String, String&gt; passwd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.socket = socket;</span><br><span class="line">    <span class="keyword">this</span>.passwd = passwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写 <code>run</code>，从输入流读入，向输出流写出。读入的是每一个客户端说的话，写出需要向所有客户端写出。</p><div class="note warning"><p>这里不知道怎么处理比较合适，可能会有更好的写法，欢迎提 pr。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">            PrintWriter out = <span class="keyword">new</span> PrintWriter(socket.getOutputStream());</span><br><span class="line">            String line = in.readLine();</span><br><span class="line">            String passwdStr = line;</span><br><span class="line"><span class="comment">//            System.out.println(&quot;server received username and password: &quot; + passwdStr);</span></span><br><span class="line">            String isLoggedIn = pass(passwdStr);</span><br><span class="line">            out.write(isLoggedIn + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            out.flush();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;0&quot;</span>.equals(isLoggedIn)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                line = in.readLine();</span><br><span class="line">                <span class="comment">// \r\n is necessary</span></span><br><span class="line">                <span class="keyword">for</span> (Socket client : ChatServer.clients) &#123;</span><br><span class="line">                    PrintWriter clientOut = <span class="keyword">new</span> PrintWriter(client.getOutputStream());</span><br><span class="line">                    clientOut.write(line + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">                    clientOut.flush();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">1</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            in.close();</span><br><span class="line">            out.close();</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>判断用户名和口令是否有效，为了方便就直接返回字符串了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">pass</span><span class="params">(String passwdStr)</span> </span>&#123;</span><br><span class="line">    String[] userPasswd = passwdStr.split(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (userPasswd.length != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String username = userPasswd[<span class="number">0</span>];</span><br><span class="line">    String password = userPasswd[<span class="number">1</span>];</span><br><span class="line">    Set&lt;Map.Entry&lt;String, String&gt;&gt; passwdEntry = passwd.entrySet();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : passwdEntry) &#123;</span><br><span class="line">        <span class="keyword">if</span> (username.equals(entry.getKey())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (password.equals(entry.getValue())) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x03-ChatClient"><a href="#0x03-ChatClient" class="headerlink" title="0x03 ChatClient"></a>0x03 ChatClient</h1><p>每个客户端有是否登录两种状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isLoggedIn;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> PrintWriter out;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BufferedReader in;</span><br></pre></td></tr></table></figure><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ChatClient</span> <span class="params">(String ip, <span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Socket client = <span class="keyword">new</span> Socket(ip, port);</span><br><span class="line"><span class="comment">// 获得输出流</span></span><br><span class="line">out = <span class="keyword">new</span> java.io.PrintWriter(client.getOutputStream());</span><br><span class="line"><span class="comment">// 获得输入流</span></span><br><span class="line">in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(client.getInputStream()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登录操作，向服务器写入用户名和密码（用 <code>\t</code> 分隔），服务器会判断并写出到这里的输入流。</p><p>是不是有更好的写法？欢迎提 pr。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String userName,String password)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String passwd = userName + <span class="string">&quot;\t&quot;</span> + password;</span><br><span class="line">String get;</span><br><span class="line"><span class="comment">// \r\n is necessary</span></span><br><span class="line">out.write(passwd + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">out.flush();</span><br><span class="line">get = in.readLine();</span><br><span class="line">isLoggedIn = <span class="string">&quot;1&quot;</span>.equals(get);</span><br><span class="line"><span class="keyword">return</span> isLoggedIn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">isLoggedIn = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发言：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">(String str)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (!isLoggedIn) &#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;Haven&#x27;t logged in!&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> out.write(str + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line"> out.flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读取发言：</p><p>这里是否需要创建消息队列？欢迎评论、issue、提 pr 交流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isLoggedIn) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> in.readLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>有很多地方写的不是很好，但最后也过了，可能需要特定的测试用例？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Primary Practice h60&lt;/p&gt;</summary>
    
    
    
    
    <category term="Practice" scheme="https://blog.superpung.cn/tags/Practice/"/>
    
  </entry>
  
  <entry>
    <title>化学反应分析</title>
    <link href="https://blog.superpung.cn/primary-practice-h59/"/>
    <id>https://blog.superpung.cn/primary-practice-h59/</id>
    <published>2021-05-06T13:12:11.000Z</published>
    <updated>2021-05-13T13:45:52.490Z</updated>
    
    <content type="html"><![CDATA[<p>Primary Practice h59</p><a id="more"></a><div class="note info"><p>根据 reactionFile 给出的一系列反应， 判断一个体系中根据 init 物质，判断出最后可能都存在什么物质</p><p>本文件中存放了若干的化学反应方程式（总数量不会超过 1000 个）</p><p>本文件中存放了一系列的化学反应 #表示注释</p><p>化学反应以 = 分为了左侧和右侧；不同化合物之间至少有一个空格</p><p>A + B = C + D 意味着体系中如果有了 A B 就可以生成 C D，同样如果有 C D 也可以生成 A B</p><p>所有反应，反应物前系数均为 1</p></div><ol><li>从文件中读取反应方程式，用<del>哈希映射</del> <code>Reaction</code> 类存储：反应物存储为一个集合、生成物存储为一个集合，二者一一对应（可逆反应，反应物和生成物可互换）；</li><li>遍历方程式映射，如果 result 含有所有的反应物<strong>且不含有所有的生成物（不含、含一部分）</strong>，则将生成物加入 result；依据生成物加反应物同理；</li><li>若遍历一次，result 未添加新的物质，说明反应达到平衡。</li></ol><div class="note success"><h4 id="2021-5-13-更新"><a href="#2021-5-13-更新" class="headerlink" title="2021.5.13 更新"></a>2021.5.13 更新</h4><p>文件读取方程式不能用哈希映射存储，因为可能存在反应物相同而生成物不同的情况。</p><p>所以新建了 <code>Reaction</code> 类。</p></div><p>修改后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h59;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reaction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; reactant;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; product;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Reaction</span><span class="params">(Set&lt;String&gt; reactant, Set&lt;String&gt; product)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.reactant = reactant;</span><br><span class="line">        <span class="keyword">this</span>.product = product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getReactant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> reactant;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h59;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReactionTools</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据reactionFile给出的一系列反应， 判断一个体系中根据init物质，判断出最后可能都存在什么物质</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> reactionFile 体系中初始反应物</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> initComponents 体系中初始反应物</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 最后体系中存在的全部物质</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">findAllComponents</span><span class="params">(String reactionFile,Set&lt;String&gt; initComponents)</span></span>&#123;</span><br><span class="line">List&lt;Reaction&gt; reactions = readLines(reactionFile);</span><br><span class="line">Set&lt;String&gt; result = <span class="keyword">new</span> HashSet&lt;&gt;(initComponents);</span><br><span class="line"><span class="keyword">int</span> newAddCount = initComponents.size();</span><br><span class="line"><span class="keyword">while</span> (newAddCount != <span class="number">0</span>) &#123;</span><br><span class="line">newAddCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Reaction reaction : reactions) &#123;</span><br><span class="line"><span class="comment">// contain or not contain, that is a question</span></span><br><span class="line"><span class="keyword">if</span> (result.containsAll(reaction.getReactant()) &amp;&amp; !result.containsAll(reaction.getProduct())) &#123;</span><br><span class="line">result.addAll(reaction.getProduct());</span><br><span class="line">newAddCount++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (result.containsAll(reaction.getProduct()) &amp;&amp; !result.containsAll(reaction.getReactant())) &#123;</span><br><span class="line">result.addAll(reaction.getReactant());</span><br><span class="line">newAddCount++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Reaction&gt; <span class="title">readLines</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">String line;</span><br><span class="line">Reader reader = <span class="keyword">null</span>;</span><br><span class="line">List&lt;Reaction&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">reader = <span class="keyword">new</span> FileReader(filename);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (reader == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">LineNumberReader lineReader = <span class="keyword">new</span> LineNumberReader(reader);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">line = lineReader.readLine();</span><br><span class="line"><span class="keyword">if</span> (line == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (line.trim().length() == <span class="number">0</span> || line.startsWith(<span class="string">&quot;#&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">String[] reaction = line.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">String left = reaction[<span class="number">0</span>];</span><br><span class="line">String right = reaction[<span class="number">1</span>];</span><br><span class="line">String[] lefts = left.split(<span class="string">&quot;\\ \\+\\ &quot;</span>);<span class="comment">// regular</span></span><br><span class="line">Set&lt;String&gt; leftSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String s : lefts) &#123;</span><br><span class="line">leftSet.add(s.trim());</span><br><span class="line">&#125;</span><br><span class="line">String[] rights = right.split(<span class="string">&quot;\\ \\+\\ &quot;</span>);</span><br><span class="line">Set&lt;String&gt; rightSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String s : rights) &#123;</span><br><span class="line">rightSet.add(s.trim());</span><br><span class="line">&#125;</span><br><span class="line">result.add(<span class="keyword">new</span> Reaction(leftSet, rightSet));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="note no-icon"><summary><p>修改前</p></summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h59;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> super</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReactionTools</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据reactionFile给出的一系列反应， 判断一个体系中根据init物质，判断出最后可能都存在什么物质</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> reactionFile 体系中初始反应物</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> initComponents 体系中初始反应物</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 最后体系中存在的全部物质</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">findAllComponents</span><span class="params">(String reactionFile,Set&lt;String&gt; initComponents)</span></span>&#123;</span><br><span class="line">Map&lt;Set&lt;String&gt;, Set&lt;String&gt;&gt; reactions = readLines(reactionFile);</span><br><span class="line">Set&lt;String&gt; result = <span class="keyword">new</span> HashSet&lt;&gt;(initComponents);</span><br><span class="line">Set&lt;Map.Entry&lt;Set&lt;String&gt;, Set&lt;String&gt;&gt;&gt; reactionsEntrySet = reactions.entrySet();</span><br><span class="line"><span class="keyword">int</span> newAddCount = initComponents.size();</span><br><span class="line"><span class="keyword">while</span> (newAddCount != <span class="number">0</span>) &#123;</span><br><span class="line">newAddCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Set&lt;String&gt;, Set&lt;String&gt;&gt; entry : reactionsEntrySet) &#123;</span><br><span class="line"><span class="comment">// contain or not contain, that is a question</span></span><br><span class="line"><span class="keyword">if</span> (result.containsAll(entry.getKey()) &amp;&amp; !result.containsAll(entry.getValue())) &#123;</span><br><span class="line">result.addAll(entry.getValue());</span><br><span class="line">newAddCount++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (result.containsAll(entry.getValue()) &amp;&amp; !result.containsAll(entry.getKey())) &#123;</span><br><span class="line">result.addAll(entry.getKey());</span><br><span class="line">newAddCount++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Map&lt;Set&lt;String&gt;, Set&lt;String&gt;&gt; readLines(String filename) &#123;</span><br><span class="line">String line;</span><br><span class="line">Reader reader = <span class="keyword">null</span>;</span><br><span class="line">Map&lt;Set&lt;String&gt;, Set&lt;String&gt;&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">reader = <span class="keyword">new</span> FileReader(filename);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (reader == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">LineNumberReader lineReader = <span class="keyword">new</span> LineNumberReader(reader);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">line = lineReader.readLine();</span><br><span class="line"><span class="keyword">if</span> (line == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (line.trim().length() == <span class="number">0</span> || line.startsWith(<span class="string">&quot;#&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">String[] reaction = line.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">String left = reaction[<span class="number">0</span>];</span><br><span class="line">String right = reaction[<span class="number">1</span>];</span><br><span class="line">String[] lefts = left.split(<span class="string">&quot;\\ \\+\\ &quot;</span>);<span class="comment">// regular</span></span><br><span class="line">Set&lt;String&gt; leftSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String s : lefts) &#123;</span><br><span class="line">leftSet.add(s.trim());</span><br><span class="line">&#125;</span><br><span class="line">String[] rights = right.split(<span class="string">&quot;\\ \\+\\ &quot;</span>);</span><br><span class="line">Set&lt;String&gt; rightSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String s : rights) &#123;</span><br><span class="line">rightSet.add(s.trim());</span><br><span class="line">&#125;</span><br><span class="line">result.put(leftSet, rightSet);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><a href="https://github.com/SuperPung/Primary-Practice-Homeworks/tree/master/src/com/huawei/classroom/student/h59">Source code</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Primary Practice h59&lt;/p&gt;</summary>
    
    
    
    
    <category term="Practice" scheme="https://blog.superpung.cn/tags/Practice/"/>
    
  </entry>
  
  <entry>
    <title>投票统计</title>
    <link href="https://blog.superpung.cn/primary-practice-h58/"/>
    <id>https://blog.superpung.cn/primary-practice-h58/</id>
    <published>2021-05-06T13:12:08.000Z</published>
    <updated>2021-05-12T07:05:41.640Z</updated>
    
    <content type="html"><![CDATA[<p>Primary Practice h58</p><a id="more"></a><div class="note info"><p>fileName 是一个投票的明细记录，里面逐行存放了</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">投票的时间（yyyy-MM-dd HH:mm:ss 格式） + <span class="string">\t</span> + 投票的微信ID + <span class="string">\t</span> + 候选人</span><br></pre></td></tr></table></figure><p>存放按时间递增（但是可能出现同一秒出现若干条记录的情况） </p><p>现在需要完成投票统计的过程，具体要求如下：</p><ul><li>1 个微信 ID 1 分钟内 最多投 1 票 多余的票数无效</li><li>1 个微信 ID 10 分钟内 最多只能投 5 票 多余的票无效</li><li>其中微信 ID 不固定，候选人姓名不固定</li><li>测试的时候要求 10 万行记录处理时间不超过 3 秒</li></ul></div><p>很有趣的一道题，虽然最后的结果始终有 3%～5% 的误差（截止到 2021.5.6 晚 9:58，还是没有找到误差出现的地方）。</p><p>和之前分析的文件类似，每一行文本有相同的格式，此处我抽象为一个 Record 类。</p><p>假设已经有了 Record 类，根据要求，需要对每位投票者的投票操作进行分析，去除掉那些不符合要求的操作记录。所以投票者也应抽象为一 Voter 类。</p><h1 id="0x00-Record"><a href="#0x00-Record" class="headerlink" title="0x00 Record"></a>0x00 Record</h1><p>此 Record 类对应文件的一行，所以应有时间、投票者和候选人属性。但整体来看，每条记录可能有效也可能无效，所以再添加一有效性属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Date date;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String voterId;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String candidate;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> valid;</span><br></pre></td></tr></table></figure><p>构造方法只需要传入参数，初始化各个属性。难点在于时间 <code>Date</code> 类型的处理，需要引入 <code>DateFormat</code> 和 <code>SimpleDateFormat</code> 类。此时暂且将每一条记录都设为有效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Record</span><span class="params">(String date, String voterId, String candidate)</span> </span>&#123;</span><br><span class="line">    DateFormat fmt = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.date = fmt.parse(date);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.voterId = voterId;</span><br><span class="line">    <span class="keyword">this</span>.candidate = candidate;</span><br><span class="line">    valid = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义各种 getter 和 setter：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getVoterId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> voterId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCandidate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> candidate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> valid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInvalid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    valid = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，由于后续分析记录有效性的主要依据是时间，所以记录之间的先后顺序很重要。故 Record 类需要实现 <code>Comparable</code> 接口，重写 <code>compareTo</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Record</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Record</span>&gt; </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Record o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date.compareTo(o.date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x01-Voter"><a href="#0x01-Voter" class="headerlink" title="0x01 Voter"></a>0x01 Voter</h1><p>最主要的部分，本次实践的核心。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>作为一名投票者，区别身份的就是 ID，权利是一系列的投票记录：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;Record&gt; records = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RECORDS_IN_TEN_MINUTES = <span class="number">5</span>; <span class="comment">// 十分钟内最多投票的次数</span></span><br></pre></td></tr></table></figure><div class="note warning"><p>可能会联想到，Record 类的属性中，关于投票者为什么只存一个 String 而不是 Voter？</p><p>因为 Voter 会包含 Record，避免套娃，减少冗余，而且 Record 只是一个中间类，目的是根据 Record 的 voterId 将其添加到对应 voter 的 records 中，所以只需要一个 String。</p></div><p>构造方法只传入 ID：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Voter</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件中同一位投票者的投票记录不一定是连续的，所以投票记录需要逐条添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRecord</span><span class="params">(Record record)</span> </span>&#123;</span><br><span class="line">    records.add(record);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，从整体来看，投票者有若干个，可构成集合，为便于后续获取投票者的集合，此处需实现可序列化接口，重写哈希码和相等方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Voter</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Voter)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ((Voter) o).id.equals(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="去除无效记录"><a href="#去除无效记录" class="headerlink" title="去除无效记录"></a>去除无效记录</h2><p>核心中的核心。</p><p>再次回顾一下，具体要求如下：</p><ul><li>1 个微信 ID 1 分钟内 最多投 1 票 多余的票数无效</li><li>1 个微信 ID 10 分钟内 最多只能投 5 票 多余的票无效</li></ul><p>为了判断，记录存储必须是按照时间递增的。1 分钟内最多 1 票，这个条件容易判断，只需要记录当前记录的时间，计算出 1 分钟之后的时间，再和下一条记录比对。但是要保证 10 分钟内最多 5 票，就有些困难。一方面，不能先只判断 1 分钟，因为两个条件互相影响，必须按时间顺序逐条判断；另一方面，判断 10 分钟不能按 0～10、10～20 判断，因为要保证任意 10 分钟内都最多只有 5 条，所以我利用 buffer 一次读入 5 条记录，这 5 条记录一定是满足 10 分钟条件的，在此基础上进行 1 分钟条件判断。</p><div class="note primary"><h4 id="2021-5-7-更新"><a href="#2021-5-7-更新" class="headerlink" title="2021.5.7 更新"></a>2021.5.7 更新</h4><p>之前读入 5 条记录后只判断了 1 分钟条件，忘记判断 10 分钟条件。即这 5 条记录中可能从中间某一条记录开始，时间已经在第一条的 10 分钟以外，此时这条记录之前的记录一定为有效，且 buffer 应后移相应记录条数。</p><p>相应地，移动后应重新判断 1 分钟条件和 10 分钟条件，故定义了 <code>isBufFinish</code> 控制循环。</p><p>且，5 条记录内，1 分钟条件应优先于 10 分钟条件，所以加了 <code>break</code>。</p><p>修改前：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1007</span> ms cost!</span><br><span class="line"><span class="attribute">wang</span> 的误差为：<span class="number">5</span>.<span class="number">09</span>%</span><br><span class="line"><span class="attribute">zhao</span> 的误差为：<span class="number">4</span>.<span class="number">23</span>%</span><br><span class="line"><span class="attribute">zhang</span> 的误差为：<span class="number">3</span>.<span class="number">36</span>%</span><br><span class="line"><span class="attribute">li</span> 的误差为：<span class="number">4</span>.<span class="number">29</span>%</span><br></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">901</span> ms cost!</span><br><span class="line"><span class="attribute">wang</span> 的误差为：<span class="number">4</span>.<span class="number">65</span>%</span><br><span class="line"><span class="attribute">zhao</span> 的误差为：<span class="number">2</span>.<span class="number">7</span>%</span><br><span class="line"><span class="attribute">zhang</span> 的误差为：<span class="number">4</span>.<span class="number">57</span>%</span><br><span class="line"><span class="attribute">li</span> 的误差为：<span class="number">4</span>.<span class="number">05</span>%</span><br></pre></td></tr></table></figure></div><p>buffer 内部判断完成，需将 buffer 整体后移。若 buffer 之后的记录还在 10 分钟内，一定为无效。直到找到下一条 10 分钟之外的记录。每次 buffer 只移动一条记录，加 <code>break</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeInvalidRecords</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 按时间排序</span></span><br><span class="line">    records.sort(Record::compareTo);</span><br><span class="line">    <span class="comment">// 容量为5的buffer</span></span><br><span class="line">    List&lt;Record&gt; buffer = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> next = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Math.min(MAX_RECORDS_IN_TEN_MINUTES, records.size()); i++) &#123;</span><br><span class="line">        buffer.add(records.get(next++));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每条记录判断</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> i, j;</span><br><span class="line">        Date curDate = buffer.get(<span class="number">0</span>).getDate();</span><br><span class="line">        Date oneMinLater = <span class="keyword">new</span> Date(curDate.getTime() + <span class="number">60000</span>);</span><br><span class="line">        Date tenMinLater = <span class="keyword">new</span> Date(curDate.getTime() + <span class="number">600000</span>);</span><br><span class="line">        <span class="keyword">boolean</span> isBufFinish = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (!isBufFinish) &#123;</span><br><span class="line">            <span class="comment">// 去除不满足1分钟条件的记录</span></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; buffer.size(); i++) &#123;</span><br><span class="line">                Date nextDate = buffer.get(i).getDate();</span><br><span class="line">                <span class="keyword">if</span> (nextDate.compareTo(oneMinLater) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    buffer.get(i).setInvalid();</span><br><span class="line">                    buffer.remove(i--);</span><br><span class="line">                    <span class="keyword">if</span> (next &lt; records.size()) &#123;</span><br><span class="line">                        buffer.add(records.get(next++));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    oneMinLater = <span class="keyword">new</span> Date(nextDate.getTime() + <span class="number">60000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// （5.7新增）判断buffer内是否超过10分钟，不设无效，只移动</span></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; buffer.size(); i++) &#123;</span><br><span class="line">                Date nextDate = buffer.get(i).getDate();</span><br><span class="line">                <span class="keyword">if</span> (nextDate.compareTo(tenMinLater) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    tenMinLater = <span class="keyword">new</span> Date(nextDate.getTime() + <span class="number">600000</span>);</span><br><span class="line">                    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                        buffer.remove(j);</span><br><span class="line">                        buffer.add(records.get(next++));</span><br><span class="line">                    &#125;</span><br><span class="line">                    isBufFinish = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    isBufFinish = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断buffer后的下一条记录是否超过10分钟</span></span><br><span class="line">        <span class="keyword">while</span> (next &lt; records.size()) &#123;</span><br><span class="line">            Record nextRecord = records.get(next);</span><br><span class="line">            <span class="keyword">if</span> (nextRecord.getDate().compareTo(tenMinLater) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                nextRecord.setInvalid();</span><br><span class="line">                next++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                buffer.remove(<span class="number">0</span>);</span><br><span class="line">                buffer.add(nextRecord);</span><br><span class="line">                next++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (next &lt; records.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，最核心的算法已完成。但 5.7 更新后仍有 4.7% 以下的误差，一定是有边界情况未考虑，待更新。</p><h2 id="获取有效记录"><a href="#获取有效记录" class="headerlink" title="获取有效记录"></a>获取有效记录</h2><p>用哈希映射存储，遍历有效记录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Integer&gt; <span class="title">getCandidates</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Integer&gt; candidates = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Record record : records) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!record.isValid()) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String candidate = record.getCandidate();</span><br><span class="line">        <span class="keyword">int</span> count = candidates.getOrDefault(candidate, <span class="number">0</span>);</span><br><span class="line">        candidates.put(candidate, count + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> candidates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x02-VoteRecord"><a href="#0x02-VoteRecord" class="headerlink" title="0x02 VoteRecord"></a>0x02 VoteRecord</h1><p>顶层类，按行读取文件，每行存一 Record 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Record&gt; <span class="title">readLines</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">String line = <span class="string">&quot;&quot;</span>;</span><br><span class="line">Reader reader = <span class="keyword">null</span>;</span><br><span class="line">List&lt;Record&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">reader = <span class="keyword">new</span> FileReader(filename);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (reader == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">LineNumberReader lineReader = <span class="keyword">new</span> LineNumberReader(reader);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">line = lineReader.readLine();</span><br><span class="line"><span class="keyword">if</span> (line == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">String[] recordItems = line.split(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">String date = recordItems[<span class="number">0</span>];</span><br><span class="line">String voterId = recordItems[<span class="number">1</span>];</span><br><span class="line">String candidate = recordItems[<span class="number">2</span>];</span><br><span class="line">Record record = <span class="keyword">new</span> Record(date, voterId, candidate);</span><br><span class="line">result.add(record);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主体 <code>calcRecording</code>，将读取到的 Record 列表存储，存所有 voter 的 id，存所有 voter，存所有 voterId 和 voter 的对应关系，存所有的候选人和其所得票数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Integer&gt; <span class="title">calcRecording</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">List&lt;Record&gt; records = readLines(fileName);</span><br><span class="line">Set&lt;String&gt; voterIds = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">Set&lt;Voter&gt; voters = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">Map&lt;String, Voter&gt; voterMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">Map&lt;String, Integer&gt; candidates = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Record record : records) &#123;</span><br><span class="line">voterIds.add(record.getVoterId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String voterId : voterIds) &#123;</span><br><span class="line">Voter voter = <span class="keyword">new</span> Voter(voterId);</span><br><span class="line">voters.add(voter);</span><br><span class="line">voterMap.put(voterId, voter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Record record : records) &#123;</span><br><span class="line">Voter voter = voterMap.get(record.getVoterId());</span><br><span class="line">voter.addRecord(record);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Voter voter : voters) &#123;</span><br><span class="line">voter.removeInvalidRecords();</span><br><span class="line">Map&lt;String, Integer&gt; oneCandidates = voter.getCandidates();</span><br><span class="line"><span class="comment">//System.out.println(voter.getRecords().size());</span></span><br><span class="line">Set&lt;Map.Entry&lt;String, Integer&gt;&gt; oneCandidatesNameCount = oneCandidates.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : oneCandidatesNameCount) &#123;</span><br><span class="line">String candidate = entry.getKey();</span><br><span class="line"><span class="keyword">int</span> count = entry.getValue();</span><br><span class="line"><span class="keyword">if</span> (candidates.containsKey(candidate)) &#123;</span><br><span class="line">count += candidates.get(candidate);</span><br><span class="line">&#125;</span><br><span class="line">candidates.put(candidate, count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> candidates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning"><h4 id="误差待消除"><a href="#误差待消除" class="headerlink" title="误差待消除"></a>误差待消除</h4></div><p><a href="https://github.com/SuperPung/Primary-Practice-Homeworks/tree/master/src/com/huawei/classroom/student/h58">Source code</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Primary Practice h58&lt;/p&gt;</summary>
    
    
    
    
    <category term="Practice" scheme="https://blog.superpung.cn/tags/Practice/"/>
    
  </entry>
  
</feed>
